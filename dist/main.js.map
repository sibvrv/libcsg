{"version":3,"sources":["webpack://libcsg/webpack/universalModuleDefinition","webpack://libcsg/webpack/bootstrap","webpack://libcsg/./core/constants.js","webpack://libcsg/./core/math/Vector3.js","webpack://libcsg/./core/math/Vector2.js","webpack://libcsg/./core/math/Polygon3.js","webpack://libcsg/./core/utils.js","webpack://libcsg/./core/math/Vertex3.js","webpack://libcsg/./core/CSGFactories.js","webpack://libcsg/./core/math/Plane.js","webpack://libcsg/./core/CAGFactories.js","webpack://libcsg/./csg.js","webpack://libcsg/./core/CAG.js","webpack://libcsg/./core/math/Matrix4.js","webpack://libcsg/./core/math/OrthoNormalBasis.js","webpack://libcsg/./core/connectors.js","webpack://libcsg/./api/optionParsers.js","webpack://libcsg/./core/CSG.js","webpack://libcsg/./modifiers/transforms/index.ts","webpack://libcsg/./core/math/Line3.js","webpack://libcsg/./core/math/Side.js","webpack://libcsg/./core/math/Vertex2.js","webpack://libcsg/./core/math/Path2.js","webpack://libcsg/./core/math/Line2.js","webpack://libcsg/./modifiers/booleans/index.ts","webpack://libcsg/./modifiers/extrusions/index.ts","webpack://libcsg/./core/Properties.js","webpack://libcsg/./primitives/index.ts","webpack://libcsg/./core/math/Polygon2.js","webpack://libcsg/./core/utils/cagValidation.js","webpack://libcsg/./core/utils/canonicalize.js","webpack://libcsg/./core/FuzzyFactory3d.js","webpack://libcsg/./core/FuzzyFactory.js","webpack://libcsg/./core/utils/retesellate.js","webpack://libcsg/./api/ops-cnc.js","webpack://libcsg/./modifiers/extrusions/extrudeInOrthonormalBasis.ts","webpack://libcsg/./api/center.js","webpack://libcsg/./api/ops-expandContract.js","webpack://libcsg/./modifiers/transforms/hull.ts","webpack://libcsg/./primitives/geodesicSphere.ts","webpack://libcsg/./primitives/polyhedron.ts","webpack://libcsg/./color/css2rgb.ts","webpack://libcsg/./color/hue2rgb.ts","webpack://libcsg/./main.ts","webpack://libcsg/./primitives/square.ts","webpack://libcsg/./core/mutators.js","webpack://libcsg/./core/trees.js","webpack://libcsg/./core/math/lineUtils.js","webpack://libcsg/./modifiers/booleans/union.ts","webpack://libcsg/./modifiers/booleans/difference.ts","webpack://libcsg/./modifiers/booleans/intersection.ts","webpack://libcsg/./core/FuzzyFactory2d.js","webpack://libcsg/./core/math/reTesselateCoplanarPolygons.js","webpack://libcsg/./core/utils/cagMeasurements.js","webpack://libcsg/./modifiers/extrusions/extrudeInPlane.ts","webpack://libcsg/./modifiers/extrusions/extrude.ts","webpack://libcsg/./modifiers/extrusions/rotateExtrude.ts","webpack://libcsg/./modifiers/extrusions/linear_extrude.ts","webpack://libcsg/./modifiers/extrusions/rotate_extrude.ts","webpack://libcsg/./api/helpers.js","webpack://libcsg/./modifiers/extrusions/rectangular_extrude.ts","webpack://libcsg/./api/cagOutlinePaths.js","webpack://libcsg/./core/utils/toArray.js","webpack://libcsg/./api/solidFromSlices.js","webpack://libcsg/./core/utils/fixTJunctions.js","webpack://libcsg/./core/utils/csgMeasurements.js","webpack://libcsg/./core/utils/csgProjections.js","webpack://libcsg/./api/ops-cuts.js","webpack://libcsg/./primitives/csg/primitives2d.js","webpack://libcsg/./primitives/csg/primitives3d.js","webpack://libcsg/./primitives/circle.ts","webpack://libcsg/./primitives/polygon.ts","webpack://libcsg/./primitives/triangle.ts","webpack://libcsg/./primitives/cube.ts","webpack://libcsg/./modifiers/transforms/translate.ts","webpack://libcsg/./modifiers/transforms/scale.ts","webpack://libcsg/./modifiers/transforms/rotate.ts","webpack://libcsg/./modifiers/transforms/transform.ts","webpack://libcsg/./modifiers/transforms/center.ts","webpack://libcsg/./modifiers/transforms/mirror.ts","webpack://libcsg/./modifiers/transforms/expand.ts","webpack://libcsg/./modifiers/transforms/contract.ts","webpack://libcsg/./modifiers/transforms/minkowski.ts","webpack://libcsg/./modifiers/transforms/helpers/ConvexHull.ts","webpack://libcsg/./modifiers/transforms/helpers/ConvexHullPoint.ts","webpack://libcsg/./modifiers/transforms/chain_hull.ts","webpack://libcsg/./primitives/sphere.ts","webpack://libcsg/./primitives/cylinder.ts","webpack://libcsg/./primitives/torus.ts","webpack://libcsg/./color/index.ts","webpack://libcsg/./color/color.ts","webpack://libcsg/./color/colorTable/cssColors.ts","webpack://libcsg/./color/rgb2hsl.ts","webpack://libcsg/./color/rgb2html.ts","webpack://libcsg/./color/rgb2hsv.ts","webpack://libcsg/./color/html2rgb.ts","webpack://libcsg/./color/hsv2rgb.ts","webpack://libcsg/./color/hsl2rgb.ts","webpack://libcsg/./api/maths.js","webpack://libcsg/./api/text.js","webpack://libcsg/./fonts/single-line/hershey/simplex.js"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","areaEPS","Math","sin","staticTag","_CSGDEBUG","defaultResolution2D","defaultResolution3D","EPS","angleEPS","all","top","bottom","left","right","front","back","getTag","IsFloat","Vector2D","Vector3D","x","y","z","arguments","length","this","_x","parseFloat","_y","_z","ok","Array","v","Error","Create","result","clone","negated","abs","plus","a","minus","times","dividedBy","dot","lerp","lengthSquared","sqrt","unit","cross","distanceTo","distanceToSquared","equals","multiply4x4","matrix4x4","leftMultiply1x3Vector","transform","toString","toFixed","randomNonParallelVector","min","max","fromAngle","radians","fromAngleRadians","fromAngleDegrees","degrees","PI","cos","toVector3D","normal","leftMultiply1x2Vector","angle","angleRadians","angleDegrees","atan2","Vertex","Matrix4x4","Polygon","vertices","shared","plane","defaultShared","Plane","fromVector3Ds","pos","checkIfConvex","verticesConvex","setColor","args","newshared","Shared","fromColor","apply","getSignedVolume","signedVolume","getArea","polygonArea","getTetraFeatures","features","forEach","feature","push","extrude","offsetvector","fromPolygons","newpolygons","polygon1","flipped","polygon2","translate","numvertices","sidefacepoints","nexti","xn","fromPosAndUV","sidefacepolygon","offset","translation","boundingSphere","cachedBoundingSphere","box","boundingBox","middle","radius","cachedBoundingBox","minpoint","maxpoint","point","newvertices","map","reverse","newplane","isMirroring","vertex","projectToOrthoNormalBasis","orthobasis","CAG","fromPointsNoCheck","to2D","area","solidFromSlices","options","fromObject","obj","createFromPoints","points","polygon","vec","planenormal","prevprevpos","prevpos","isConvexPoint","prevpoint","nextpoint","isStrictlyConvexPoint","color","slice","tag","getHash","join","fnNumberSort","b","fnSortByIndex","index","isNaN","Infinity","solve2Linear","u","invdet","insertSorted","array","element","comparefunc","leftbound","rightbound","testindex","floor","splice","interpolateBetween2DPointsForY","point1","point2","f1","f2","isCAG","sides","isCSG","polygons","uv","newVertex","interpolate","other","newpos","newUv","Polygon2D","Polygon3D","csg","isCanonicalized","isRetesselated","fromSlices","fromCompactBinary","bin","w","planes","planeData","numplanes","arrayindex","planeindex","vertexData","vertexindex","numpolygonvertices","polygonvertices","shareds","numpolygons","numPolygons","numVerticesPerPolygon","polygonVertices","polygonPlaneIndexes","polygonSharedIndexes","polygonindex","Line3D","anyPlaneFromVector3Ds","v1","v2","fromPoints","fromNormalAndPoint","ismirror","point3","splitLineBetweenPoints","p1","p2","direction","labda","intersectWithLine","line3d","intersectWithPlane","fromPlanes","signedDistanceToPoint","mirrorPoint","point3d","distance","Side","Vertex2","isSelfIntersecting","contains","union","difference","fromSides","cag","isArray","undefined","fromPointsArray","fromNestedPointsArray","prevvertex","canonicalized","paths","path","tree","parents","isHole","parentKey","side","fromPath2","isClosed","getPoints","fromFakeCSG","_fromFakePolygon","filter","numsides","sideVertexIndices","sideindex","vertexindex0","vertexindex1","addTransformationMethodsToPrototype","addCenteringToPrototype","CSG","Line2D","Path2D","OrthoNormalBasis","Connector","ConnectorList","Properties","circle","ellipse","rectangle","roundedRectangle","sphere","cube","roundedCube","cylinder","roundedCylinder","cylinderElliptic","polyhedron","CAGFactories","optionsParsers","parseOptionAs2DVector","parseOptionAs3DVector","parseOptionAs3DVectorList","parseOptionAsBool","parseOptionAsFloat","parseOptionAsInt","globalApi","assign","Vertex3D","canonicalize","retesselate","isCAGValid","hasPointInside","getBounds","overCutInsideCorners","extrudeInOrthonormalBasis","extrudeInPlane","rotateExtrude","cagoutlinePaths","center","expand","contract","expandedShellOfCAG","cags","_toCSGWall","reTesselated","subtract","subtractSub","intersect","intersectSub","newsides","axes","expandedShell","resolution","debug","orthonormalbasis","depth","axis1","axis2","check","getOutlinePaths","cutterradius","z0","z1","toPolygon3D","_toVector3DPairs","pairs","p0","vertex0","vertex1","pair","_toPlanePolygons","origin","defaultAxis","defaultNormal","thisConnector","axisVector","normalVector","toConnector","getTransformationTo","bounds","csgshell","csgplane","invert","polys","poly","_toWallPolygons","iteration","toConnector1","toConnector2","toCag","m1","axisvector","m2","vps1","vps2","hasMirroredNormals","vps1List","vps2List","vps1Temp","vps2Temp","xbot0","xtop0","vp1","j","xbot1","xtop1","y0","y1","toPoints","shift","toCompactBinary","vertexmap","Uint32Array","sidevertexindicesindex","vertextag","Float64Array","verticesArrayIndex","elements","multiply","this0","this1","this2","this3","this4","this5","this6","this7","this8","this9","this10","this11","this12","this13","this14","this15","m0","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","rightMultiply1x3Vector","v0","invw","rightMultiply1x2Vector","unity","rotationX","rotationY","rotationZ","rotation","rotationCenter","rotationAxis","rotationPlane","transformation","getProjectionMatrix","getInverseProjectionMatrix","els","mirroring","nx","ny","nz","scaling","rightvector","planeorigin","GetCartesian","xaxisid","yaxisid","axisid","Z0Plane","vec3","to3D","vec2","line3Dto2D","a2d","b2d","line2Dto3D","line2d","a3d","b3d","rightpointTransformed","originTransformed","newrighthandvector","normalvector","normalized","mirror","normalrotation","Number","us","axesplane","axesbasis","angle1","angle2","usAxesAligned","normalsplane","normalsbasis","axisLine","extend","newpoint","connectors","connectors_","fromPath2D","path2D","arg1","arg2","_fromPath2DTangents","_fromPath2DExplicit","start","end","axis","pathLen","appendConnector","closed","angleIsh","rotateZ","pt","getAngle","setClosed","conn","followWith","cagish","getCag","connector","verify","currCag","prevConnector","prevCag","notFirst","connI","connI1","parseOption","optionname","defaultvalue","res","Tree","fixTJunctions","lieFlat","getTransformationToFlatLying","getTransformationAndInverseTransformationToFlatLying","sectionCut","cutByPlane","expandedShellOfCCSG","properties","csgs","unionSub","mayOverlap","clipTo","allPolygons","concat","_merge","unionForNonIntersecting","islast","addPolygons","flippedpolygons","transform1","_transform","transformedvertices","transformedplanes","planetag","newvertex","unionWithThis","stretchAtPlane","onb","midpiece","piece1","piece2","mybounds","otherbounds","connectTo","myConnector","otherConnector","matrix","setShared","getFeatures","toTriangles","triPoly","reduce","pv","feat","toPolygons","planemap","sharedmap","numshared","sharedtag","polygonVerticesIndex","sharedindex","planesArrayIndex","firstVertex","scale","rotate","minkowski","hull","chain_hull","mabsx","mabsy","mabsz","line","newdirection","closestPointOnLine","distanceToPoint","closestpoint","Vertex3","vert1Indices","pts2d","newp1","newp2","newpoints","skip","arc","startangle","endangle","maketangent","absangledif","numsteps","edgestepsize","numstepsMod","step","otherpath","appendPoint","appendPoints","close","getTurn","twice_area","last","current","rectangularExtrude","width","height","expandToCAG","pathradius","numpoints","startindex","pointindex","innerToCAG","appendBezier","controlpoints","factorials","controlpointsParsed","lastBezierControlPoint","bezierOrder","fact","binomials","binomial","getPointForT","t_k","one_minus_t_n_minus_k","pow","inv_1_minus_t","k","bernstein_coefficient","newpoints_t","subdivideBase","maxangle","maxsinangle","dir1","dir2","sinangle","t0","t1","t0_new","t1_new","point0_new","point1_new","appendArc","endpoint","decimals","xradius","yradius","xaxisrotation","clockwise","largearc","startpoint","round","sweepFlag","phi","cosphi","sinphi","minushalfdistance","startTranslated","biglambda","sqrtbiglambda","multiplier1","centerTranslated","vec1","theta1","deltatheta","ceil","theta","costheta","sintheta","xAtY","absDistanceToPoint","pointProjected","pointOnPlane","neworigin","newnormal","newpointOnPlane","neww","intersection","linear_extrude","rotate_extrude","rectangular_extrude","transformObj","otherproperties","cloneObj","addFrom","source","propertyname","propertyvalue","transformed","cloned","square","triangle","geodesicSphere","torus","linesIntersect","inside","c1","c2","errors","pointcount","mappoint","count","ertxt","err","side0","ii","side1","console","log","cag1","cag2","il","FuzzyCSGFactory","FuzzyCAGFactory","canonicalizeCSG","CSGFromCSGFuzzyFactory","canonicalizeCAG","CAGFromCAGFuzzyFactory","sourcecsg","_this","newpolygon","getPolygon","sourcecag","getSide","csgOrCAG","FuzzyFactory","vertexfactory","planefactory","polygonsharedfactory","getPolygonShared","sourceshared","hash","getVertex","sourcevertex","lookupOrCreate","getPlane","sourceplane","sourcepolygon","newverticesDedup","prevvertextag","numdimensions","tolerance","lookuptable","multiplier","creatorCallback","el","valueQuantized","hashparts","q0","numhashes","hashmask","hashmaskShifted","hashpart","reTesselateCoplanarPolygons","polygonsPerPlane","fuzzyfactory","destpolygons","sourcepolygons","retesselayedpolygons","_csg","besttransformation","bestinversetransformation","xvector","yvector","zvector","z0connectorx","z0connectory","isfirst","minheight","maxdotz","inversetransformation","pointonplane","planeconnector","transformedcsg","dotz","zheight","isbetter","_cag","pointmap","from","to","cutouts","pointtag","pointobj","fromcoord","pointcoord","tocoord","alpha","midvector","circlesegmentangle","radiuscorrected","circlecenter","deltaangle","extruded","toArray","objects","results","dl","shellpoints","newcag","pcenter","end1","end2","fullcircle","extrudevector","extrudedface","vertexpairs","vertextagpair","planenormals","vertexpair","zbase","xbase","ybase","angles","iMax","si","co","sort","prevp1","prevp2","numangles","startfacevertices","endfacevertices","normals","vertexobj","xaxis","bestzaxis","bestzaxisorthogonality","crosslength","yaxis","zaxis","_sphere","shape","pts","done","convexHull","ConvexHull","compute","indices","getIndices","ch","params","fn","ci","ti","geodesicSubDivide","p3","f","s0","s1","s2","q","mix3","rv","s3","triangles","fv","_f","cv","g","Polygon3","Vector3","pgs","ref","colors","pp","colorName","primitives2d","primitives3d","maths","text","off","isFinite","size","prot","mirrored","mirroredX","mirroredY","mirroredZ","rotateX","deg","rotateY","rotateEulerAngles","beta","gamma","position","Rz1","Rx","Rz2","T","rotateEulerXYZ","Ry","Rz","cAxes","indexOf","PolygonTreeNode","parent","children","removed","isRootNode","addChild","remove","parentschildren","recursivelyInvalidatePolygon","isRemoved","invertSub","getPolygons","node","queue","splitByPlane","coplanarfrontnodes","coplanarbacknodes","frontnodes","backnodes","nodes","_splitByPlane","bound","sphereradius","spherecenter","splitresult","type","thisw","hasfront","hasback","vertexIsBack","MINEPS","isback","frontvertices","backvertices","nextvertexindex","nextisback","interpolationFactor","pointa","pointb","intermediatePoint","intersectionvertex","EPS_SQUARED","splitPolygonByPlane","frontnode","backnode","newchild","polygonTree","rootnode","Node","alsoRemovecoplanarFront","polygontreenodes","addPolygonTreeNodes","temp","clipPolygons","stack","numpolygontreenodes","node1","numbacknodes","pop","bestplane","getParentPlaneNormals","maxdepth","p0start","p0end","p1start","p1end","d0","d1","alphas","defaults","extrude2d","sourceside","calcInterpolationFactor","polygonvertices2d","polygonuvcoordinates","polygontopvertexindexes","topy2polygonindexes","ycoordinatetopolygonindexes","ycoordinatebins","ycoordinateBinningFactor","poly3d","vertices2d","uvcoordinates","minindex","miny","maxy","maxindex","newy","pos2d","uvcoordinate","ycoordinatebin","ycoordinates","ycoordinate","activepolygons","prevoutpolygonrow","yindex","nextycoordinate","newoutpolygonrow","ycoordinate_as_string","polygonindexeswithcorner","activepolygonindex","activepolygon","newleftvertexindex","leftvertexindex","newrightvertexindex","rightvertexindex","nextleftvertexindex","nextrightvertexindex","topleft","topleftuv","topright","toprightuv","bottomleft","bottomleftuv","bottomright","bottomrightuv","middleycoordinate","startingpolygonindexes","polygonindex_key","topvertexindex","topleftvertexindex","toprightvertexindex","newactivepolygon","el1","el2","x1","x2","activepolygonKey","outpolygon","leftline","rightline","prevoutpolygon","d2","prevcontinuedindexes","matchedindexes","thispolygon","prevpolygon","leftlinecontinues","rightlinecontinues","rightlineisconvex","rightpoints","rightuvcoordinates","leftpoints","leftuvcoordinates","points2d","vertices3d","point2d","vertex3d","offsetVector","twistangle","twiststeps","axisV","normalV","connS","connE","connT2","connT1","baseShape","slices","twist","output","Matrix4","cagToPointsArray","clamp","rightMultiply1x3VectorToArray","polygonFromPoints","startAngle","overflow","totalAngle","segments","overlapTolerance","shapePoints","pointsWithNegativeX","pointsWithPositiveX","arePointsWithNegAndPosX","curPoint","nextPoint","prevMatrix","curMatrix","pointA","pointAP","pointB","pointBP","overlappingPoints","sideShape","endCap","startCap","input","vector","basePoints","h","sideTagToSideMap","startVertexTagToSideTagMap","sidetag","startvertextag","startsidetag","aVertexTag","sidesForcagVertex","connectedVertexPoints","cagside","nextvertextag","nextpossiblesidetags","nextsideindex","bestangle","cagangle","nextpossiblesidetag","angledif","nextsidetag","data","constructor","_addWalls","walls","bFlipped","bottomPoints","topPoints","len","iTopLen","iBotLen","iExtra","bMoreTops","bMoreBottoms","aMin","secondPoint","nBotFacet","nTopFacet","getTriangle","pointC","bpoint","tpoint","iB","iT","fnCallback","prev","numSlices","bLoop","Boolean","numslices","callback","every","unshift","addSide","sidemap","vertextag2sidestart","vertextag2sideend","starttag","endtag","newsidetag","deleteSide","newsideobj","idx","sideobjs","sideobj","nextvertex","reversesidetag","ar","sidestocheck","sidemapisempty","donesomething","sidetagtocheck","donewithside","directionindex","startvertex","endvertex","endvertextag","matchingsides","matchingsideindex","matchingside","matchingsidestartvertex","matchingsideendvertex","matchingsidestartvertextag","startpos","endpos","insertionvertextag","insertionvertextagindex","found","loop","item","newsidetag1","newsidetag2","newcsg","volume","Vector2","plane1","plane2","cut3d","planecenter","maxdistance","corner1","corner2","rswap","e2","large","roundradius","maxroundradius","rect","prevcylinderpoint","qresolution","slice1","cylinderpoint","prevcospitch","prevsinpitch","slice2","pitch","cospitch","sinpitch","facepoint","info","facecenters","cuberadius","innerradius","e","rEnd","rStart","ray","axisZ","axisX","axisY","out","cylCenter","fptVec","fptVec90","facepointH","facepointH90","defaultnormal","faces","face","_objects","scaleValue","transformationMatrix","clear","ccw","_points","al","ang","dist","ConvexHullPoint","compare","tmp","M","hulls","hullsAmount","r1","r2","radiusStart","radiusEnd","ri","ro","fni","fno","roti","baseCircle","css2rgb","rgb2hsl","rgb2html","rgb2hsv","html2rgb","hsv2rgb","hue2rgb","hsl2rgb","colorValue","cssColors3ub","substring","parseInt","asin","acos","tan","atan","rands","vn","seed","random","lookup","ix","a0","a1","sign","defaultsVectorParams","xOffset","yOffset","align","font","lineSpacing","letterSpacing","extrudeOffset","vectorParams","translateLine","segment","jl","vectorChar","char","code","charCodeAt","glyph","ratio","extrudeYOffset","polyline","gx","gy","vectorText","vect","diff","lines","maxWidth","lineStart","pushLine","vector_char","vector_text","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126"],"mappings":"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AAC,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAC/IC,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,CAAE,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,CAAE,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,CAAE,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,GACjYC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,GAAI,EAAG,CAAE,EAAG,EAAG,GAAI,GAClDC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,CAAE,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,GACrKC,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GACnIC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,GAC7GC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,GAAI,GAAI,CAAE,EAAG,GAAI,GAAI,GAAI,CAAE,EAAG,EAAG,GAAI,GACpEC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,GAAI,GAAI,CAAE,EAAG,GAAI,GAAI,IACpDC,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,CAAE,GAAI,EAAG,GAAI,GAC1JC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,GAAI,GAAI,GAAI,EAAG,CAAE,EAAG,GAAI,GAAI,IACpDC,GAAI,CAAC,EAAG,EAAG,GAAI,EAAG,GAClBC,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvEC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,GAAI,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,GAAI,GACnDC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,EAAG,GAAI,GAClCC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,GAAI,EAAG,CAAE,GAAI,GAAI,GAAI,EAAG,CAAE,GAAI,GAAI,GAAI,GACrEC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,GAAI,EAAG,CAAE,GAAI,GAAI,GAAI,GACpDC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,IACxJC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,IAClGC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,CAAE,GAAI,EAAG,IAAK,GAC1KC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,CAAE,GAAI,GAAI,GAAI,GACpHC,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnJC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,GAAI,IACnCC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,IACzEC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,GAAI,GAAI,EAAG,GACnCC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,GAAI,GAAI,EAAG,EAAG,CAAE,GAAI,GAAI,GAAI,EAAG,CAAE,GAAI,GAAI,GAAI,GACrEC,GAAI,CAAC,GAAI,EAAG,GAAI,GAAI,EAAG,CAAE,GAAI,GAAI,EAAG,GACpCC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,GAAI,GAAI,EAAG,IAC1CC,GAAI,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,GAAI,GAAI,CAAE,EAAG,EAAG,GAAI,GACpDC,GAAI,CAAC,GAAI,EAAG,GAAI,GAAI,EAAG,CAAE,EAAG,GAAI,GAAI,EAAG,CAAE,EAAG,GAAI,GAAI,GAAI,CAAE,GAAI,EAAG,IAAK,GACtEC,GAAI,CAAC,GAAI,EAAG,GAAI,IAAK,GACrBC,GAAI,CAAC,GAAI,EAAG,GAAI,GAAI,EAAG,CAAE,GAAI,GAAI,IAAK,EAAG,CAAE,EAAG,GAAI,GAAI,GAAI,CAAE,GAAI,EAAG,IAAK,GACxEC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,CAAE,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,CAAE,EAAG,GAAI,EAAG,GACnEC,GAAI,CAAC,GAAI,GAAI,EAAG,IAAK,GACrBC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,IACtDC,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,EAAG,CAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GACvHC,GAAI,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvHC,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GACtGC,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,EAAG,CAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GACxHC,IAAK,CAAC,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAC5HC,IAAK,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,EAAG,IACzDC,IAAK,CAAC,GAAI,GAAI,GAAI,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,CAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAC/JC,IAAK,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1EC,IAAK,CAAC,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,CAAE,EAAG,GAAI,EAAG,GACxDC,IAAK,CAAC,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,CAAE,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAC/EC,IAAK,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,GAAI,GAAI,EAAG,EAAG,CAAE,EAAG,EAAG,GAAI,GACnDC,IAAK,CAAC,EAAG,EAAG,GAAI,EAAG,GACnBC,IAAK,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,CAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACnIC,IAAK,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1EC,IAAK,CAAC,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,IAC3HC,IAAK,CAAC,GAAI,EAAG,GAAI,GAAI,EAAG,CAAE,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzHC,IAAK,CAAC,GAAI,GAAI,GAAI,IAAK,EAAG,CAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GACzHC,IAAK,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,IACxDC,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5HC,IAAK,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,CAAE,EAAG,GAAI,EAAG,IACtDC,IAAK,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,CAAE,GAAI,GAAI,GAAI,GACtEC,IAAK,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,GAAI,GAAI,EAAG,GACpCC,IAAK,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,GAAI,GAAI,EAAG,EAAG,CAAE,GAAI,GAAI,GAAI,EAAG,CAAE,GAAI,GAAI,GAAI,GACtEC,IAAK,CAAC,GAAI,EAAG,GAAI,GAAI,EAAG,CAAE,GAAI,GAAI,EAAG,GACrCC,IAAK,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,CAAE,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAChEC,IAAK,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,CAAE,EAAG,GAAI,GAAI,GAAI,CAAE,EAAG,EAAG,GAAI,GACrDC,IAAK,CAAC,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,CAAE,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GACnQC,IAAK,CAAC,EAAG,EAAG,GAAI,GAAI,GACpBC,IAAK,CAAC,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,CAAE,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GACpQC,IAAK,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,CAAE,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"libcsg\"] = factory();\n\telse\n\t\troot[\"libcsg\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 41);\n","const _CSGDEBUG = false;\n\n/** Number of polygons per 360 degree revolution for 2D objects.\n * @default\n */\nconst defaultResolution2D = 32; // FIXME this seems excessive\n/** Number of polygons per 360 degree revolution for 3D objects.\n * @default\n */\nconst defaultResolution3D = 12;\n\n/** Epsilon used during determination of near zero distances.\n * @default\n */\nconst EPS = 1e-5;\n\n/** Epsilon used during determination of near zero areas.\n * @default\n */\nconst angleEPS = 0.10;\n\n/** Epsilon used during determination of near zero areas.\n *  This is the minimal area of a minimal polygon.\n * @default\n */\nconst areaEPS = 0.50 * EPS * EPS * Math.sin(angleEPS);\n\nconst all = 0;\nconst top = 1;\nconst bottom = 2;\nconst left = 3;\nconst right = 4;\nconst front = 5;\nconst back = 6;\n// Tag factory: we can request a unique tag through CSG.getTag()\nlet staticTag = 1;\nconst getTag = () => staticTag++;\n\nmodule.exports = {\n  _CSGDEBUG,\n  defaultResolution2D,\n  defaultResolution3D,\n  EPS,\n  angleEPS,\n  areaEPS,\n  all,\n  top,\n  bottom,\n  left,\n  right,\n  front,\n  back,\n  staticTag,\n  getTag\n};\n","const {IsFloat} = require('../utils');\nconst Vector2D = require('./Vector2');\n\n/** Class Vector3D\n * Represents a 3D vector with X, Y, Z coordinates.\n * @constructor\n *\n * @example\n * new CSG.Vector3D(1, 2, 3);\n * new CSG.Vector3D([1, 2, 3]);\n * new CSG.Vector3D({ x: 1, y: 2, z: 3 });\n * new CSG.Vector3D(1, 2); // assumes z=0\n * new CSG.Vector3D([1, 2]); // assumes z=0\n */\nconst Vector3D = function (x, y, z) {\n  if (arguments.length === 3) {\n    this._x = parseFloat(x);\n    this._y = parseFloat(y);\n    this._z = parseFloat(z);\n  } else if (arguments.length === 2) {\n    this._x = parseFloat(x);\n    this._y = parseFloat(y);\n    this._z = 0;\n  } else {\n    var ok = true;\n    if (arguments.length === 1) {\n      if (typeof (x) === 'object') {\n        if (x instanceof Vector3D) {\n          this._x = x._x;\n          this._y = x._y;\n          this._z = x._z;\n        } else if (x instanceof Vector2D) {\n          this._x = x._x;\n          this._y = x._y;\n          this._z = 0;\n        } else if (x instanceof Array) {\n          if ((x.length < 2) || (x.length > 3)) {\n            ok = false;\n          } else {\n            this._x = parseFloat(x[0]);\n            this._y = parseFloat(x[1]);\n            if (x.length === 3) {\n              this._z = parseFloat(x[2]);\n            } else {\n              this._z = 0;\n            }\n          }\n        } else if (('x' in x) && ('y' in x)) {\n          this._x = parseFloat(x.x);\n          this._y = parseFloat(x.y);\n          if ('z' in x) {\n            this._z = parseFloat(x.z);\n          } else {\n            this._z = 0;\n          }\n        } else if (('_x' in x) && ('_y' in x)) {\n          this._x = parseFloat(x._x);\n          this._y = parseFloat(x._y);\n          if ('_z' in x) {\n            this._z = parseFloat(x._z);\n          } else {\n            this._z = 0;\n          }\n        } else ok = false;\n      } else {\n        var v = parseFloat(x);\n        this._x = v;\n        this._y = v;\n        this._z = v;\n      }\n    } else ok = false;\n    if (ok) {\n      if ((!IsFloat(this._x)) || (!IsFloat(this._y)) || (!IsFloat(this._z))) ok = false;\n    } else {\n      throw new Error('wrong arguments');\n    }\n  }\n};\n\n// This does the same as new Vector3D(x,y,z) but it doesn't go through the constructor\n// and the parameters are not validated. Is much faster.\nVector3D.Create = function (x, y, z) {\n  var result = Object.create(Vector3D.prototype);\n  result._x = x;\n  result._y = y;\n  result._z = z;\n  return result;\n};\n\nVector3D.prototype = {\n  get x() {\n    return this._x;\n  },\n  get y() {\n    return this._y;\n  },\n  get z() {\n    return this._z;\n  },\n\n  set x(v) {\n    throw new Error('Vector3D is immutable');\n  },\n  set y(v) {\n    throw new Error('Vector3D is immutable');\n  },\n  set z(v) {\n    throw new Error('Vector3D is immutable');\n  },\n\n  clone: function () {\n    return Vector3D.Create(this._x, this._y, this._z);\n  },\n\n  negated: function () {\n    return Vector3D.Create(-this._x, -this._y, -this._z);\n  },\n\n  abs: function () {\n    return Vector3D.Create(Math.abs(this._x), Math.abs(this._y), Math.abs(this._z));\n  },\n\n  plus: function (a) {\n    return Vector3D.Create(this._x + a._x, this._y + a._y, this._z + a._z);\n  },\n\n  minus: function (a) {\n    return Vector3D.Create(this._x - a._x, this._y - a._y, this._z - a._z);\n  },\n\n  times: function (a) {\n    return Vector3D.Create(this._x * a, this._y * a, this._z * a);\n  },\n\n  dividedBy: function (a) {\n    return Vector3D.Create(this._x / a, this._y / a, this._z / a);\n  },\n\n  dot: function (a) {\n    return this._x * a._x + this._y * a._y + this._z * a._z;\n  },\n\n  lerp: function (a, t) {\n    return this.plus(a.minus(this).times(t));\n  },\n\n  lengthSquared: function () {\n    return this.dot(this);\n  },\n\n  length: function () {\n    return Math.sqrt(this.lengthSquared());\n  },\n\n  unit: function () {\n    return this.dividedBy(this.length());\n  },\n\n  cross: function (a) {\n    return Vector3D.Create(\n      this._y * a._z - this._z * a._y, this._z * a._x - this._x * a._z, this._x * a._y - this._y * a._x);\n  },\n\n  distanceTo: function (a) {\n    return this.minus(a).length();\n  },\n\n  distanceToSquared: function (a) {\n    return this.minus(a).lengthSquared();\n  },\n\n  equals: function (a) {\n    return (this._x === a._x) && (this._y === a._y) && (this._z === a._z);\n  },\n\n  // Right multiply by a 4x4 matrix (the vector is interpreted as a row vector)\n  // Returns a new Vector3D\n  multiply4x4: function (matrix4x4) {\n    return matrix4x4.leftMultiply1x3Vector(this);\n  },\n\n  transform: function (matrix4x4) {\n    return matrix4x4.leftMultiply1x3Vector(this);\n  },\n\n  toString: function () {\n    return '(' + this._x.toFixed(5) + ', ' + this._y.toFixed(5) + ', ' + this._z.toFixed(5) + ')';\n  },\n\n  // find a vector that is somewhat perpendicular to this one\n  randomNonParallelVector: function () {\n    var abs = this.abs();\n    if ((abs._x <= abs._y) && (abs._x <= abs._z)) {\n      return Vector3D.Create(1, 0, 0);\n    } else if ((abs._y <= abs._x) && (abs._y <= abs._z)) {\n      return Vector3D.Create(0, 1, 0);\n    } else {\n      return Vector3D.Create(0, 0, 1);\n    }\n  },\n\n  min: function (p) {\n    return Vector3D.Create(\n      Math.min(this._x, p._x), Math.min(this._y, p._y), Math.min(this._z, p._z));\n  },\n\n  max: function (p) {\n    return Vector3D.Create(\n      Math.max(this._x, p._x), Math.max(this._y, p._y), Math.max(this._z, p._z));\n  }\n};\n\nmodule.exports = Vector3D;\n","const {IsFloat} = require('../utils');\n\n/** Class Vector2D\n * Represents a 2D vector with X, Y coordinates\n * @constructor\n *\n * @example\n * new CSG.Vector2D(1, 2);\n * new CSG.Vector2D([1, 2]);\n * new CSG.Vector2D({ x: 1, y: 2});\n */\nconst Vector2D = function (x, y) {\n  if (arguments.length === 2) {\n    this._x = parseFloat(x);\n    this._y = parseFloat(y);\n  } else {\n    var ok = true;\n    if (arguments.length === 1) {\n      if (typeof (x) === 'object') {\n        if (x instanceof Vector2D) {\n          this._x = x._x;\n          this._y = x._y;\n        } else if (x instanceof Array) {\n          this._x = parseFloat(x[0]);\n          this._y = parseFloat(x[1]);\n        } else if (('x' in x) && ('y' in x)) {\n          this._x = parseFloat(x.x);\n          this._y = parseFloat(x.y);\n        } else ok = false;\n      } else {\n        var v = parseFloat(x);\n        this._x = v;\n        this._y = v;\n      }\n    } else ok = false;\n    if (ok) {\n      if ((!IsFloat(this._x)) || (!IsFloat(this._y))) ok = false;\n    }\n    if (!ok) {\n      throw new Error('wrong arguments');\n    }\n  }\n};\n\nVector2D.fromAngle = function (radians) {\n  return Vector2D.fromAngleRadians(radians);\n};\n\nVector2D.fromAngleDegrees = function (degrees) {\n  var radians = Math.PI * degrees / 180;\n  return Vector2D.fromAngleRadians(radians);\n};\n\nVector2D.fromAngleRadians = function (radians) {\n  return Vector2D.Create(Math.cos(radians), Math.sin(radians));\n};\n\n// This does the same as new Vector2D(x,y) but it doesn't go through the constructor\n// and the parameters are not validated. Is much faster.\nVector2D.Create = function (x, y) {\n  var result = Object.create(Vector2D.prototype);\n  result._x = x;\n  result._y = y;\n  return result;\n};\n\nVector2D.prototype = {\n  get x() {\n    return this._x;\n  },\n  get y() {\n    return this._y;\n  },\n\n  set x(v) {\n    throw new Error('Vector2D is immutable');\n  },\n  set y(v) {\n    throw new Error('Vector2D is immutable');\n  },\n\n  // extend to a 3D vector by adding a z coordinate:\n  toVector3D: function (z) {\n    const Vector3D = require('./Vector3'); // FIXME: circular dependencies Vector2 => Vector3 => Vector2\n    return new Vector3D(this._x, this._y, z);\n  },\n\n  equals: function (a) {\n    return (this._x === a._x) && (this._y === a._y);\n  },\n\n  clone: function () {\n    return Vector2D.Create(this._x, this._y);\n  },\n\n  negated: function () {\n    return Vector2D.Create(-this._x, -this._y);\n  },\n\n  plus: function (a) {\n    return Vector2D.Create(this._x + a._x, this._y + a._y);\n  },\n\n  minus: function (a) {\n    return Vector2D.Create(this._x - a._x, this._y - a._y);\n  },\n\n  times: function (a) {\n    return Vector2D.Create(this._x * a, this._y * a);\n  },\n\n  dividedBy: function (a) {\n    return Vector2D.Create(this._x / a, this._y / a);\n  },\n\n  dot: function (a) {\n    return this._x * a._x + this._y * a._y;\n  },\n\n  lerp: function (a, t) {\n    return this.plus(a.minus(this).times(t));\n  },\n\n  length: function () {\n    return Math.sqrt(this.dot(this));\n  },\n\n  distanceTo: function (a) {\n    return this.minus(a).length();\n  },\n\n  distanceToSquared: function (a) {\n    return this.minus(a).lengthSquared();\n  },\n\n  lengthSquared: function () {\n    return this.dot(this);\n  },\n\n  unit: function () {\n    return this.dividedBy(this.length());\n  },\n\n  cross: function (a) {\n    return this._x * a._y - this._y * a._x;\n  },\n\n  // returns the vector rotated by 90 degrees clockwise\n  normal: function () {\n    return Vector2D.Create(this._y, -this._x);\n  },\n\n  // Right multiply by a 4x4 matrix (the vector is interpreted as a row vector)\n  // Returns a new Vector2D\n  multiply4x4: function (matrix4x4) {\n    return matrix4x4.leftMultiply1x2Vector(this);\n  },\n\n  transform: function (matrix4x4) {\n    return matrix4x4.leftMultiply1x2Vector(this);\n  },\n\n  angle: function () {\n    return this.angleRadians();\n  },\n\n  angleDegrees: function () {\n    var radians = this.angleRadians();\n    return 180 * radians / Math.PI;\n  },\n\n  angleRadians: function () {\n    // y=sin, x=cos\n    return Math.atan2(this._y, this._x);\n  },\n\n  min: function (p) {\n    return Vector2D.Create(\n      Math.min(this._x, p._x), Math.min(this._y, p._y));\n  },\n\n  max: function (p) {\n    return Vector2D.Create(\n      Math.max(this._x, p._x), Math.max(this._y, p._y));\n  },\n\n  toString: function () {\n    return '(' + this._x.toFixed(5) + ', ' + this._y.toFixed(5) + ')';\n  },\n\n  abs: function () {\n    return Vector2D.Create(Math.abs(this._x), Math.abs(this._y));\n  }\n};\n\nmodule.exports = Vector2D;\n","const Vector2D = require('./Vector2');\nconst Vector3D = require('./Vector3');\nconst Vertex = require('./Vertex3');\nconst Matrix4x4 = require('./Matrix4');\nconst {_CSGDEBUG, EPS, getTag, areaEPS} = require('../constants');\n\n/** Class Polygon\n * Represents a convex polygon. The vertices used to initialize a polygon must\n *   be coplanar and form a convex loop. They do not have to be `Vertex`\n *   instances but they must behave similarly (duck typing can be used for\n *   customization).\n * <br>\n * Each convex polygon has a `shared` property, which is shared between all\n *   polygons that are clones of each other or were split from the same polygon.\n *   This can be used to define per-polygon properties (such as surface color).\n * <br>\n * The plane of the polygon is calculated from the vertex coordinates if not provided.\n *   The plane can alternatively be passed as the third argument to avoid calculations.\n *\n * @constructor\n * @param {Vertex[]} vertices - list of vertices\n * @param {Polygon.Shared} [shared=defaultShared] - shared property to apply\n * @param {Plane} [plane] - plane of the polygon\n *\n * @example\n * const vertices = [\n *   new CSG.Vertex(new CSG.Vector3D([0, 0, 0])),\n *   new CSG.Vertex(new CSG.Vector3D([0, 10, 0])),\n *   new CSG.Vertex(new CSG.Vector3D([0, 10, 10]))\n * ]\n * let observed = new Polygon(vertices)\n */\nlet Polygon = function (vertices, shared, plane) {\n  this.vertices = vertices;\n  if (!shared) shared = Polygon.defaultShared;\n  this.shared = shared;\n  // let numvertices = vertices.length;\n\n  if (arguments.length >= 3) {\n    this.plane = plane;\n  } else {\n    const Plane = require('./Plane'); // FIXME: circular dependencies\n    this.plane = Plane.fromVector3Ds(vertices[0].pos, vertices[1].pos, vertices[2].pos);\n  }\n\n  if (_CSGDEBUG) {\n    if (!this.checkIfConvex()) {\n      throw new Error('Not convex!');\n    }\n  }\n};\n\nPolygon.prototype = {\n  /** Check whether the polygon is convex. (it should be, otherwise we will get unexpected results)\n   * @returns {boolean}\n   */\n  checkIfConvex: function () {\n    return Polygon.verticesConvex(this.vertices, this.plane.normal);\n  },\n\n  // FIXME what? why does this return this, and not a new polygon?\n  // FIXME is this used?\n  setColor: function (args) {\n    let newshared = Polygon.Shared.fromColor.apply(this, arguments);\n    this.shared = newshared;\n    return this;\n  },\n\n  getSignedVolume: function () {\n    let signedVolume = 0;\n    for (let i = 0; i < this.vertices.length - 2; i++) {\n      signedVolume += this.vertices[0].pos.dot(this.vertices[i + 1].pos\n        .cross(this.vertices[i + 2].pos));\n    }\n    signedVolume /= 6;\n    return signedVolume;\n  },\n\n  // Note: could calculate vectors only once to speed up\n  getArea: function () {\n    let polygonArea = 0;\n    for (let i = 0; i < this.vertices.length - 2; i++) {\n      polygonArea += this.vertices[i + 1].pos.minus(this.vertices[0].pos)\n        .cross(this.vertices[i + 2].pos.minus(this.vertices[i + 1].pos)).length();\n    }\n    polygonArea /= 2;\n    return polygonArea;\n  },\n\n  // accepts array of features to calculate\n  // returns array of results\n  getTetraFeatures: function (features) {\n    let result = [];\n    features.forEach(function (feature) {\n      if (feature === 'volume') {\n        result.push(this.getSignedVolume());\n      } else if (feature === 'area') {\n        result.push(this.getArea());\n      }\n    }, this);\n    return result;\n  },\n\n  // Extrude a polygon into the direction offsetvector\n  // Returns a CSG object\n  extrude: function (offsetvector) {\n    const {fromPolygons} = require('../CSGFactories'); // because of circular dependencies\n\n    let newpolygons = [];\n\n    let polygon1 = this;\n    let direction = polygon1.plane.normal.dot(offsetvector);\n    if (direction > 0) {\n      polygon1 = polygon1.flipped();\n    }\n    newpolygons.push(polygon1);\n    let polygon2 = polygon1.translate(offsetvector);\n    let numvertices = this.vertices.length;\n    let x = 0;\n    let y = offsetvector.length();\n    for (let i = 0; i < numvertices; i++) {\n      let sidefacepoints = [];\n      let nexti = (i < (numvertices - 1)) ? i + 1 : 0;\n      let xn = x + polygon1.vertices[i].pos.distanceTo(polygon1.vertices[nexti].pos);\n      sidefacepoints.push(Vertex.fromPosAndUV(polygon1.vertices[i].pos, new Vector2D(x, 0)));\n      sidefacepoints.push(Vertex.fromPosAndUV(polygon2.vertices[i].pos, new Vector2D(x, y)));\n      sidefacepoints.push(Vertex.fromPosAndUV(polygon2.vertices[nexti].pos, new Vector2D(xn, y)));\n      sidefacepoints.push(Vertex.fromPosAndUV(polygon1.vertices[nexti].pos, new Vector2D(xn, 0)));\n      let sidefacepolygon = new Polygon(sidefacepoints, this.shared);\n      newpolygons.push(sidefacepolygon);\n      x = xn;\n    }\n    polygon2 = polygon2.flipped();\n    newpolygons.push(polygon2);\n    return fromPolygons(newpolygons);\n  },\n\n  translate: function (offset) {\n    return this.transform(Matrix4x4.translation(offset));\n  },\n\n  // returns an array with a Vector3D (center point) and a radius\n  boundingSphere: function () {\n    if (!this.cachedBoundingSphere) {\n      let box = this.boundingBox();\n      let middle = box[0].plus(box[1]).times(0.5);\n      let radius3 = box[1].minus(middle);\n      let radius = radius3.length();\n      this.cachedBoundingSphere = [middle, radius];\n    }\n    return this.cachedBoundingSphere;\n  },\n\n  // returns an array of two Vector3Ds (minimum coordinates and maximum coordinates)\n  boundingBox: function () {\n    if (!this.cachedBoundingBox) {\n      let minpoint, maxpoint;\n      let vertices = this.vertices;\n      let numvertices = vertices.length;\n      if (numvertices === 0) {\n        minpoint = new Vector3D(0, 0, 0);\n      } else {\n        minpoint = vertices[0].pos;\n      }\n      maxpoint = minpoint;\n      for (let i = 1; i < numvertices; i++) {\n        let point = vertices[i].pos;\n        minpoint = minpoint.min(point);\n        maxpoint = maxpoint.max(point);\n      }\n      this.cachedBoundingBox = [minpoint, maxpoint];\n    }\n    return this.cachedBoundingBox;\n  },\n\n  flipped: function () {\n    let newvertices = this.vertices.map(function (v) {\n      return v.flipped();\n    });\n    newvertices.reverse();\n    let newplane = this.plane.flipped();\n    return new Polygon(newvertices, this.shared, newplane);\n  },\n\n  // Affine transformation of polygon. Returns a new Polygon\n  transform: function (matrix4x4) {\n    let newvertices = this.vertices.map(function (v) {\n      return v.transform(matrix4x4);\n    });\n    let newplane = this.plane.transform(matrix4x4);\n    if (matrix4x4.isMirroring()) {\n      // need to reverse the vertex order\n      // in order to preserve the inside/outside orientation:\n      newvertices.reverse();\n    }\n    return new Polygon(newvertices, this.shared, newplane);\n  },\n\n  toString: function () {\n    let result = 'Polygon plane: ' + this.plane.toString() + '\\n';\n    this.vertices.map(function (vertex) {\n      result += '  ' + vertex.toString() + '\\n';\n    });\n    return result;\n  },\n\n  // project the 3D polygon onto a plane\n  projectToOrthoNormalBasis: function (orthobasis) {\n    const CAG = require('../CAG');\n    const {fromPointsNoCheck} = require('../CAGFactories'); // circular dependencies\n    let points2d = this.vertices.map(function (vertex) {\n      return orthobasis.to2D(vertex.pos);\n    });\n\n    let result = fromPointsNoCheck(points2d);\n    let area = result.area();\n    if (Math.abs(area) < areaEPS) {\n      // the polygon was perpendicular to the orthnormal plane. The resulting 2D polygon would be degenerate\n      // return an empty area instead:\n      result = new CAG();\n    } else if (area < 0) {\n      result = result.flipped();\n    }\n    return result;\n  },\n\n  // ALIAS ONLY!!\n  solidFromSlices: function (options) {\n    const solidFromSlices = require('../../api/solidFromSlices');\n    return solidFromSlices(this, options);\n  }\n\n};\n\n// create from an untyped object with identical property names:\nPolygon.fromObject = function (obj) {\n  const Plane = require('./Plane'); // FIXME: circular dependencies\n  let vertices = obj.vertices.map(function (v) {\n    return Vertex.fromObject(v);\n  });\n  let shared = Polygon.Shared.fromObject(obj.shared);\n  let plane = Plane.fromObject(obj.plane);\n  return new Polygon(vertices, shared, plane);\n};\n\n/** Create a polygon from the given points.\n *\n * @param {Array[]} points - list of points\n * @param {Polygon.Shared} [shared=defaultShared] - shared property to apply\n * @param {Plane} [plane] - plane of the polygon\n *\n * @example\n * const points = [\n *   [0,  0, 0],\n *   [0, 10, 0],\n *   [0, 10, 10]\n * ]\n * let observed = CSG.Polygon.createFromPoints(points)\n */\nPolygon.createFromPoints = function (points, shared, plane) {\n  // FIXME : this circular dependency does not work !\n  // const {fromPoints} = require('./polygon3Factories')\n  // return fromPoints(points, shared, plane)\n  let vertices = [];\n  points.map(function (p) {\n    let vec = new Vector3D(p);\n    let vertex = new Vertex(vec);\n    vertices.push(vertex);\n  });\n  let polygon;\n  if (arguments.length < 3) {\n    polygon = new Polygon(vertices, shared);\n  } else {\n    polygon = new Polygon(vertices, shared, plane);\n  }\n  return polygon;\n};\n\nPolygon.verticesConvex = function (vertices, planenormal) {\n  let numvertices = vertices.length;\n  if (numvertices > 2) {\n    let prevprevpos = vertices[numvertices - 2].pos;\n    let prevpos = vertices[numvertices - 1].pos;\n    for (let i = 0; i < numvertices; i++) {\n      let pos = vertices[i].pos;\n      if (!Polygon.isConvexPoint(prevprevpos, prevpos, pos, planenormal)) {\n        return false;\n      }\n      prevprevpos = prevpos;\n      prevpos = pos;\n    }\n  }\n  return true;\n};\n\n// calculate whether three points form a convex corner\n//  prevpoint, point, nextpoint: the 3 coordinates (Vector3D instances)\n//  normal: the normal vector of the plane\nPolygon.isConvexPoint = function (prevpoint, point, nextpoint, normal) {\n  let crossproduct = point.minus(prevpoint).cross(nextpoint.minus(point));\n  let crossdotnormal = crossproduct.dot(normal);\n  return (crossdotnormal >= 0);\n};\n\nPolygon.isStrictlyConvexPoint = function (prevpoint, point, nextpoint, normal) {\n  let crossproduct = point.minus(prevpoint).cross(nextpoint.minus(point));\n  let crossdotnormal = crossproduct.dot(normal);\n  return (crossdotnormal >= EPS);\n};\n\n/** Class Polygon.Shared\n * Holds the shared properties for each polygon (Currently only color).\n * @constructor\n * @param {Array[]} color - array containing RGBA values, or null\n *\n * @example\n *   let shared = new CSG.Polygon.Shared([0, 0, 0, 1])\n */\nPolygon.Shared = function (color) {\n  if (color !== null && color !== undefined) {\n    if (color.length !== 4) {\n      throw new Error('Expecting 4 element array');\n    }\n  }\n  this.color = color;\n};\n\nPolygon.Shared.fromObject = function (obj) {\n  return new Polygon.Shared(obj.color);\n};\n\n/** Create Polygon.Shared from color values.\n * @param {number} r - value of RED component\n * @param {number} g - value of GREEN component\n * @param {number} b - value of BLUE component\n * @param {number} [a] - value of ALPHA component\n * @param {Array[]} [color] - OR array containing RGB values (optional Alpha)\n *\n * @example\n * let s1 = Polygon.Shared.fromColor(0,0,0)\n * let s2 = Polygon.Shared.fromColor([0,0,0,1])\n */\nPolygon.Shared.fromColor = function (args) {\n  let color;\n  if (arguments.length === 1) {\n    color = arguments[0].slice(); // make deep copy\n  } else {\n    color = [];\n    for (let i = 0; i < arguments.length; i++) {\n      color.push(arguments[i]);\n    }\n  }\n  if (color.length === 3) {\n    color.push(1);\n  } else if (color.length !== 4) {\n    throw new Error('setColor expects either an array with 3 or 4 elements, or 3 or 4 parameters.');\n  }\n  return new Polygon.Shared(color);\n};\n\nPolygon.Shared.prototype = {\n  getTag: function () {\n    let result = this.tag;\n    if (!result) {\n      result = getTag();\n      this.tag = result;\n    }\n    return result;\n  },\n  // get a string uniquely identifying this object\n  getHash: function () {\n    if (!this.color) return 'null';\n    return this.color.join('/');\n  }\n};\n\nPolygon.defaultShared = new Polygon.Shared(null);\n\nmodule.exports = Polygon;\n","function fnNumberSort(a, b) {\n  return a - b;\n}\n\nfunction fnSortByIndex(a, b) {\n  return a.index - b.index;\n}\n\nconst IsFloat = function (n) {\n  return (!isNaN(n)) || (n === Infinity) || (n === -Infinity);\n};\n\nconst solve2Linear = function (a, b, c, d, u, v) {\n  let det = a * d - b * c;\n  let invdet = 1.0 / det;\n  let x = u * d - b * v;\n  let y = -u * c + a * v;\n  x *= invdet;\n  y *= invdet;\n  return [x, y];\n};\n\nfunction insertSorted(array, element, comparefunc) {\n  let leftbound = 0;\n  let rightbound = array.length;\n  while (rightbound > leftbound) {\n    let testindex = Math.floor((leftbound + rightbound) / 2);\n    let testelement = array[testindex];\n    let compareresult = comparefunc(element, testelement);\n    if (compareresult > 0) // element > testelement\n    {\n      leftbound = testindex + 1;\n    } else {\n      rightbound = testindex;\n    }\n  }\n  array.splice(leftbound, 0, element);\n}\n\n// Get the x coordinate of a point with a certain y coordinate, interpolated between two\n// points (CSG.Vector2D).\n// Interpolation is robust even if the points have the same y coordinate\nconst interpolateBetween2DPointsForY = function (point1, point2, y) {\n  let f1 = y - point1.y;\n  let f2 = point2.y - point1.y;\n  if (f2 < 0) {\n    f1 = -f1;\n    f2 = -f2;\n  }\n  let t;\n  if (f1 <= 0) {\n    t = 0.0;\n  } else if (f1 >= f2) {\n    t = 1.0;\n  } else if (f2 < 1e-10) { // FIXME Should this be CSG.EPS?\n    t = 0.5;\n  } else {\n    t = f1 / f2;\n  }\n  let result = point1.x + t * (point2.x - point1.x);\n  return result;\n};\n\nfunction isCAG(object) {\n  // objects[i] instanceof CAG => NOT RELIABLE\n  // 'instanceof' causes huge issues when using objects from\n  // two different versions of CSG.js as they are not reckonized as one and the same\n  // so DO NOT use instanceof to detect matching types for CSG/CAG\n  if (!('sides' in object)) {\n    return false;\n  }\n  if (!('length' in object.sides)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isCSG(object) {\n  // objects[i] instanceof CSG => NOT RELIABLE\n  // 'instanceof' causes huge issues when using objects from\n  // two different versions of CSG.js as they are not reckonized as one and the same\n  // so DO NOT use instanceof to detect matching types for CSG/CAG\n  if (!('polygons' in object)) {\n    return false;\n  }\n  if (!('length' in object.polygons)) {\n    return false;\n  }\n  return true;\n}\n\nmodule.exports = {\n  fnNumberSort,\n  fnSortByIndex,\n  IsFloat,\n  solve2Linear,\n  insertSorted,\n  interpolateBetween2DPointsForY,\n  isCAG,\n  isCSG\n};\n","const Vector3D = require('./Vector3');\nconst Vector2D = require('./Vector2');\nconst {getTag} = require('../constants');\n\n// # class Vertex\n// Represents a vertex of a polygon. Use your own vertex class instead of this\n// one to provide additional features like texture coordinates and vertex\n// colors. Custom vertex classes need to provide a `pos` property\n// `flipped()`, and `interpolate()` methods that behave analogous to the ones\n// FIXME: And a lot MORE (see plane.fromVector3Ds for ex) ! This is fragile code\n// defined by `Vertex`.\nconst Vertex = function (pos) {\n  this.pos = pos;\n  this.uv = new Vector2D(0, 0);\n};\n\n// create from an untyped object with identical property names:\nVertex.fromObject = function (obj) {\n  var pos = new Vector3D(obj.pos);\n  return new Vertex(pos);\n};\n\n// create with position and uv coordinates\nVertex.fromPosAndUV = function (pos, uv) {\n  var newVertex = new Vertex(pos);\n  newVertex.uv = uv;\n  return newVertex;\n};\n\nVertex.prototype = {\n  // Return a vertex with all orientation-specific data (e.g. vertex normal) flipped. Called when the\n  // orientation of a polygon is flipped.\n  flipped: function () {\n    return this;\n  },\n\n  getTag: function () {\n    var result = this.tag;\n    if (!result) {\n      result = getTag();\n      this.tag = result;\n    }\n    return result;\n  },\n\n  // Create a new vertex between this vertex and `other` by linearly\n  // interpolating all properties using a parameter of `t`. Subclasses should\n  // override this to interpolate additional properties.\n  interpolate: function (other, t) {\n    var newpos = this.pos.lerp(other.pos, t);\n    var newUv = this.uv.lerp(other.uv, t);\n    return Vertex.fromPosAndUV(newpos, newUv);\n  },\n\n  // Affine transformation of vertex. Returns a new Vertex\n  transform: function (matrix4x4) {\n    var newpos = this.pos.multiply4x4(matrix4x4);\n    return Vertex.fromPosAndUV(newpos, this.uv);\n  },\n\n  toString: function () {\n    return this.pos.toString();\n  }\n};\n\nmodule.exports = Vertex;\n","const Vector3D = require('./math/Vector3');\nconst Vertex = require('./math/Vertex3');\nconst Plane = require('./math/Plane');\nconst Polygon2D = require('./math/Polygon2');\nconst Polygon3D = require('./math/Polygon3');\n\n/** Construct a CSG solid from a list of `Polygon` instances.\n * @param {Polygon[]} polygons - list of polygons\n * @returns {CSG} new CSG object\n */\nconst fromPolygons = function (polygons) {\n  const CSG = require('./CSG');\n  let csg = new CSG();\n  csg.polygons = polygons;\n  csg.isCanonicalized = false;\n  csg.isRetesselated = false;\n  return csg;\n};\n\n/** Construct a CSG solid from a list of pre-generated slices.\n * See Polygon.prototype.solidFromSlices() for details.\n * @param {Object} options - options passed to solidFromSlices()\n * @returns {CSG} new CSG object\n */\nfunction fromSlices(options) {\n  return Polygon2D.createFromPoints([\n    [0, 0, 0],\n    [1, 0, 0],\n    [1, 1, 0],\n    [0, 1, 0]\n  ]).solidFromSlices(options);\n}\n\n/** Reconstruct a CSG solid from an object with identical property names.\n * @param {Object} obj - anonymous object, typically from JSON\n * @returns {CSG} new CSG object\n */\nfunction fromObject(obj) {\n  let polygons = obj.polygons.map(function (p) {\n    return Polygon3D.fromObject(p);\n  });\n  let csg = fromPolygons(polygons);\n  csg.isCanonicalized = obj.isCanonicalized;\n  csg.isRetesselated = obj.isRetesselated;\n  return csg;\n}\n\n/** Reconstruct a CSG from the output of toCompactBinary().\n * @param {CompactBinary} bin - see toCompactBinary().\n * @returns {CSG} new CSG object\n */\nfunction fromCompactBinary(bin) {\n  if (bin['class'] !== 'CSG') throw new Error('Not a CSG');\n  let planes = [];\n  let planeData = bin.planeData;\n  let numplanes = planeData.length / 4;\n  let arrayindex = 0;\n  let x, y, z, w, normal, plane;\n  for (let planeindex = 0; planeindex < numplanes; planeindex++) {\n    x = planeData[arrayindex++];\n    y = planeData[arrayindex++];\n    z = planeData[arrayindex++];\n    w = planeData[arrayindex++];\n    normal = Vector3D.Create(x, y, z);\n    plane = new Plane(normal, w);\n    planes.push(plane);\n  }\n\n  let vertices = [];\n  const vertexData = bin.vertexData;\n  const numvertices = vertexData.length / 3;\n  let pos;\n  let vertex;\n  arrayindex = 0;\n  for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\n    x = vertexData[arrayindex++];\n    y = vertexData[arrayindex++];\n    z = vertexData[arrayindex++];\n    pos = Vector3D.Create(x, y, z);\n    vertex = new Vertex(pos);\n    vertices.push(vertex);\n  }\n\n  let shareds = bin.shared.map(function (shared) {\n    return Polygon3D.Shared.fromObject(shared);\n  });\n\n  let polygons = [];\n  let numpolygons = bin.numPolygons;\n  let numVerticesPerPolygon = bin.numVerticesPerPolygon;\n  let polygonVertices = bin.polygonVertices;\n  let polygonPlaneIndexes = bin.polygonPlaneIndexes;\n  let polygonSharedIndexes = bin.polygonSharedIndexes;\n  let numpolygonvertices;\n  let polygonvertices;\n  let shared;\n  let polygon; // already defined plane,\n  arrayindex = 0;\n  for (let polygonindex = 0; polygonindex < numpolygons; polygonindex++) {\n    numpolygonvertices = numVerticesPerPolygon[polygonindex];\n    polygonvertices = [];\n    for (let i = 0; i < numpolygonvertices; i++) {\n      polygonvertices.push(vertices[polygonVertices[arrayindex++]]);\n    }\n    plane = planes[polygonPlaneIndexes[polygonindex]];\n    shared = shareds[polygonSharedIndexes[polygonindex]];\n    polygon = new Polygon3D(polygonvertices, shared, plane);\n    polygons.push(polygon);\n  }\n  let csg = fromPolygons(polygons);\n  csg.isCanonicalized = true;\n  csg.isRetesselated = true;\n  return csg;\n}\n\nmodule.exports = {\n  fromPolygons,\n  fromSlices,\n  fromObject,\n  fromCompactBinary\n};\n","const Vector3D = require('./Vector3');\nconst Line3D = require('./Line3');\nconst {EPS, getTag} = require('../constants');\n\n// # class Plane\n// Represents a plane in 3D space.\nconst Plane = function (normal, w) {\n  this.normal = normal;\n  this.w = w;\n};\n\n// create from an untyped object with identical property names:\nPlane.fromObject = function (obj) {\n  let normal = new Vector3D(obj.normal);\n  let w = parseFloat(obj.w);\n  return new Plane(normal, w);\n};\n\nPlane.fromVector3Ds = function (a, b, c) {\n  let n = b.minus(a).cross(c.minus(a)).unit();\n  return new Plane(n, n.dot(a));\n};\n\n// like fromVector3Ds, but allow the vectors to be on one point or one line\n// in such a case a random plane through the given points is constructed\nPlane.anyPlaneFromVector3Ds = function (a, b, c) {\n  let v1 = b.minus(a);\n  let v2 = c.minus(a);\n  if (v1.length() < EPS) {\n    v1 = v2.randomNonParallelVector();\n  }\n  if (v2.length() < EPS) {\n    v2 = v1.randomNonParallelVector();\n  }\n  let normal = v1.cross(v2);\n  if (normal.length() < EPS) {\n    // this would mean that v1 == v2.negated()\n    v2 = v1.randomNonParallelVector();\n    normal = v1.cross(v2);\n  }\n  normal = normal.unit();\n  return new Plane(normal, normal.dot(a));\n};\n\nPlane.fromPoints = function (a, b, c) {\n  a = new Vector3D(a);\n  b = new Vector3D(b);\n  c = new Vector3D(c);\n  return Plane.fromVector3Ds(a, b, c);\n};\n\nPlane.fromNormalAndPoint = function (normal, point) {\n  normal = new Vector3D(normal);\n  point = new Vector3D(point);\n  normal = normal.unit();\n  let w = point.dot(normal);\n  return new Plane(normal, w);\n};\n\nPlane.prototype = {\n  flipped: function () {\n    return new Plane(this.normal.negated(), -this.w);\n  },\n\n  getTag: function () {\n    let result = this.tag;\n    if (!result) {\n      result = getTag();\n      this.tag = result;\n    }\n    return result;\n  },\n\n  equals: function (n) {\n    return this.normal.equals(n.normal) && this.w === n.w;\n  },\n\n  transform: function (matrix4x4) {\n    let ismirror = matrix4x4.isMirroring();\n    // get two vectors in the plane:\n    let r = this.normal.randomNonParallelVector();\n    let u = this.normal.cross(r);\n    let v = this.normal.cross(u);\n    // get 3 points in the plane:\n    let point1 = this.normal.times(this.w);\n    let point2 = point1.plus(u);\n    let point3 = point1.plus(v);\n    // transform the points:\n    point1 = point1.multiply4x4(matrix4x4);\n    point2 = point2.multiply4x4(matrix4x4);\n    point3 = point3.multiply4x4(matrix4x4);\n    // and create a new plane from the transformed points:\n    let newplane = Plane.fromVector3Ds(point1, point2, point3);\n    if (ismirror) {\n      // the transform is mirroring\n      // We should mirror the plane:\n      newplane = newplane.flipped();\n    }\n    return newplane;\n  },\n\n  // robust splitting of a line by a plane\n  // will work even if the line is parallel to the plane\n  splitLineBetweenPoints: function (p1, p2) {\n    let direction = p2.minus(p1);\n    let labda = (this.w - this.normal.dot(p1)) / this.normal.dot(direction);\n    if (isNaN(labda)) labda = 0;\n    if (labda > 1) labda = 1;\n    if (labda < 0) labda = 0;\n    let result = p1.plus(direction.times(labda));\n    return result;\n  },\n\n  // returns Vector3D\n  intersectWithLine: function (line3d) {\n    return line3d.intersectWithPlane(this);\n  },\n\n  // intersection of two planes\n  intersectWithPlane: function (plane) {\n    return Line3D.fromPlanes(this, plane);\n  },\n\n  signedDistanceToPoint: function (point) {\n    let t = this.normal.dot(point) - this.w;\n    return t;\n  },\n\n  toString: function () {\n    return '[normal: ' + this.normal.toString() + ', w: ' + this.w + ']';\n  },\n\n  mirrorPoint: function (point3d) {\n    let distance = this.signedDistanceToPoint(point3d);\n    let mirrored = point3d.minus(this.normal.times(distance * 2.0));\n    return mirrored;\n  }\n};\n\nmodule.exports = Plane;\n","const Side = require('./math/Side');\nconst Vector2D = require('./math/Vector2');\nconst Vertex2 = require('./math/Vertex2');\nconst {areaEPS} = require('./constants');\nconst {isSelfIntersecting, contains} = require('./utils/cagValidation');\nconst {union, difference} = require('../modifiers/booleans');\n\n/** Construct a CAG from a list of `Side` instances.\n * @param {Side[]} sides - list of sides\n * @returns {CAG} new CAG object\n */\nconst fromSides = function (sides) {\n  const CAG = require('./CAG'); // circular dependency CAG => fromSides => CAG\n  let cag = new CAG();\n  cag.sides = sides;\n  return cag;\n};\n\n// Converts a CSG to a  The CSG must consist of polygons with only z coordinates +1 and -1\n// as constructed by _toCSGWall(-1, 1). This is so we can use the 3D union(), intersect() etc\nconst fromFakeCSG = function (csg) {\n  let sides = csg.polygons.map(function (p) {\n    return Side._fromFakePolygon(p);\n  })\n    .filter(function (s) {\n      return s !== null;\n    });\n  return fromSides(sides);\n};\n\n/** Construct a CAG from a list of points (a polygon) or an nested array of points.\n * The rotation direction of the points is not relevant.\n * The points can define a convex or a concave polygon.\n * The polygon must not self intersect.\n * Hole detection follows the even/odd rule,\n * which means that the order of the paths is not important.\n * @param {points[]|Array.<points[]>} points - (nested) list of points in 2D space\n * @returns {CAG} new CAG object\n */\nconst fromPoints = function (points) {\n  if (!points) {\n    throw new Error('points parameter must be defined');\n  }\n  if (!Array.isArray(points)) {\n    throw new Error('points parameter must be an array');\n  }\n  if (points[0].x !== undefined || typeof points[0][0] === 'number') {\n    return fromPointsArray(points);\n  }\n  if (typeof points[0][0] === 'object') {\n    return fromNestedPointsArray(points);\n  }\n  throw new Error('Unsupported points list format');\n};\n\n// Do not export the two following function (code splitting for fromPoints())\nconst fromPointsArray = function (points) {\n  if (points.length < 3) {\n    throw new Error('CAG shape needs at least 3 points');\n  }\n  let sides = [];\n  let prevvertex = new Vertex2(new Vector2D(points[points.length - 1]));\n  points.map(function (point) {\n    let vertex = new Vertex2(new Vector2D(point));\n    sides.push(new Side(prevvertex, vertex));\n    prevvertex = vertex;\n  });\n  let result = fromSides(sides);\n  if (isSelfIntersecting(result)) {\n    throw new Error('Polygon is self intersecting!');\n  }\n  let area = result.area();\n  if (Math.abs(area) < areaEPS) {\n    throw new Error('Degenerate polygon!');\n  }\n  if (area < 0) {\n    result = result.flipped();\n  }\n  return result.canonicalized();\n};\n\nconst fromNestedPointsArray = function (points) {\n  if (points.length === 1) {\n    return fromPoints(points[0]);\n  }\n  // First pass: create a collection of CAG paths\n  let paths = [];\n  points.forEach(path => {\n    paths.push(fromPointsArray(path));\n  });\n  // Second pass: make a tree of paths\n  let tree = {};\n  // for each polygon extract parents and childs polygons\n  paths.forEach((p1, i) => {\n    // check for intersection\n    paths.forEach((p2, y) => {\n      if (p1 !== p2) {\n        // create default node\n        tree[i] || (tree[i] = {parents: [], isHole: false});\n        tree[y] || (tree[y] = {parents: [], isHole: false});\n        // check if polygon2 stay in poylgon1\n        if (contains(p2, p1)) {\n          // push parent and child; odd parents number ==> hole\n          tree[i].parents.push(y);\n          tree[i].isHole = !!(tree[i].parents.length % 2);\n          tree[y].isHole = !!(tree[y].parents.length % 2);\n        }\n      }\n    });\n  });\n  // Third pass: subtract holes\n  let path = null;\n  for (key in tree) {\n    path = tree[key];\n    if (path.isHole) {\n      delete tree[key]; // remove holes for final pass\n      path.parents.forEach(parentKey => {\n        paths[parentKey] = difference(paths[parentKey], paths[key]);\n      });\n    }\n  }\n  // Fourth and last pass: create final CAG object\n  let cag = fromSides([]);\n  for (key in tree) {\n    cag = union(cag, paths[key]);\n  }\n  return cag;\n};\n\n/** Reconstruct a CAG from an object with identical property names.\n * @param {Object} obj - anonymous object, typically from JSON\n * @returns {CAG} new CAG object\n */\nconst fromObject = function (obj) {\n  let sides = obj.sides.map(function (s) {\n    return Side.fromObject(s);\n  });\n  let cag = fromSides(sides);\n  cag.isCanonicalized = obj.isCanonicalized;\n  return cag;\n};\n\n/** Construct a CAG from a list of points (a polygon).\n * Like fromPoints() but does not check if the result is a valid polygon.\n * The points MUST rotate counter clockwise.\n * The points can define a convex or a concave polygon.\n * The polygon must not self intersect.\n * @param {points[]} points - list of points in 2D space\n * @returns {CAG} new CAG object\n */\nconst fromPointsNoCheck = function (points) {\n  let sides = [];\n  let prevpoint = new Vector2D(points[points.length - 1]);\n  let prevvertex = new Vertex2(prevpoint);\n  points.map(function (p) {\n    let point = new Vector2D(p);\n    let vertex = new Vertex2(point);\n    let side = new Side(prevvertex, vertex);\n    sides.push(side);\n    prevvertex = vertex;\n  });\n  return fromSides(sides);\n};\n\n/** Construct a CAG from a 2d-path (a closed sequence of points).\n * Like fromPoints() but does not check if the result is a valid polygon.\n * @param {path} Path2 - a Path2 path\n * @returns {CAG} new CAG object\n */\nconst fromPath2 = function (path) {\n  if (!path.isClosed()) throw new Error('The path should be closed!');\n  return fromPoints(path.getPoints());\n};\n\n/** Reconstruct a CAG from the output of toCompactBinary().\n * @param {CompactBinary} bin - see toCompactBinary()\n * @returns {CAG} new CAG object\n */\nconst fromCompactBinary = function (bin) {\n  if (bin['class'] !== 'CAG') throw new Error('Not a CAG');\n  let vertices = [];\n  let vertexData = bin.vertexData;\n  let numvertices = vertexData.length / 2;\n  let arrayindex = 0;\n  for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\n    let x = vertexData[arrayindex++];\n    let y = vertexData[arrayindex++];\n    let pos = new Vector2D(x, y);\n    let vertex = new Vertex2(pos);\n    vertices.push(vertex);\n  }\n  let sides = [];\n  let numsides = bin.sideVertexIndices.length / 2;\n  arrayindex = 0;\n  for (let sideindex = 0; sideindex < numsides; sideindex++) {\n    let vertexindex0 = bin.sideVertexIndices[arrayindex++];\n    let vertexindex1 = bin.sideVertexIndices[arrayindex++];\n    let side = new Side(vertices[vertexindex0], vertices[vertexindex1]);\n    sides.push(side);\n  }\n  let cag = fromSides(sides);\n  cag.isCanonicalized = true;\n  return cag;\n};\n\nmodule.exports = {\n  fromSides,\n  fromObject,\n  fromPoints,\n  fromPointsNoCheck,\n  fromPath2,\n  fromFakeCSG,\n  fromCompactBinary\n};\n","/*\n## License\n\nCopyright (c) 2014 bebbi (elghatta@gmail.com)\nCopyright (c) 2013 Eduard Bespalov (edwbes@gmail.com)\nCopyright (c) 2012 Joost Nieuwenhuijse (joost@newhouse.nl)\nCopyright (c) 2011 Evan Wallace (http://evanw.github.com/csg.js/)\nCopyright (c) 2012 Alexandre Girard (https://github.com/alx)\n\nAll code released under MIT license\n\n## Overview\n\nFor an overview of the CSG process see the original csg.js code:\nhttp://evanw.github.com/csg.js/\n\nCSG operations through BSP trees suffer from one problem: heavy fragmentation\nof polygons. If two CSG solids of n polygons are unified, the resulting solid may have\nin the order of n*n polygons, because each polygon is split by the planes of all other\npolygons. After a few operations the number of polygons explodes.\n\nThis version of CSG.js solves the problem in 3 ways:\n\n1. Every polygon split is recorded in a tree (CSG.PolygonTreeNode). This is a separate\ntree, not to be confused with the CSG tree. If a polygon is split into two parts but in\nthe end both fragments have not been discarded by the CSG operation, we can retrieve\nthe original unsplit polygon from the tree, instead of the two fragments.\n\nThis does not completely solve the issue though: if a polygon is split multiple times\nthe number of fragments depends on the order of subsequent splits, and we might still\nend up with unncessary splits:\nSuppose a polygon is first split into A and B, and then into A1, B1, A2, B2. Suppose B2 is\ndiscarded. We will end up with 2 polygons: A and B1. Depending on the actual split boundaries\nwe could still have joined A and B1 into one polygon. Therefore a second approach is used as well:\n\n2. After CSG operations all coplanar polygon fragments are joined by a retesselating\noperation. See CSG.reTesselated(). Retesselation is done through a\nlinear sweep over the polygon surface. The sweep line passes over the y coordinates\nof all vertices in the polygon. Polygons are split at each sweep line, and the fragments\nare joined horizontally and vertically into larger polygons (making sure that we\nwill end up with convex polygons).\nThis still doesn't solve the problem completely: due to floating point imprecisions\nwe may end up with small gaps between polygons, and polygons may not be exactly coplanar\nanymore, and as a result the retesselation algorithm may fail to join those polygons.\nTherefore:\n\n3. A canonicalization algorithm is implemented: it looks for vertices that have\napproximately the same coordinates (with a certain tolerance, say 1e-5) and replaces\nthem with the same vertex. If polygons share a vertex they will actually point to the\nsame CSG.Vertex instance. The same is done for polygon planes. See CSG.canonicalized().\n\nPerformance improvements to the original CSG.js:\n\nReplaced the flip() and invert() methods by flipped() and inverted() which don't\nmodify the source object. This allows to get rid of all clone() calls, so that\nmultiple polygons can refer to the same CSG.Plane instance etc.\n\nThe original union() used an extra invert(), clipTo(), invert() sequence just to remove the\ncoplanar front faces from b; this is now combined in a single b.clipTo(a, true) call.\n\nDetection whether a polygon is in front or in back of a plane: for each polygon\nwe are caching the coordinates of the bounding sphere. If the bounding sphere is\nin front or in back of the plane we don't have to check the individual vertices\nanymore.\n\nOther additions to the original CSG.js:\n\nCSG.Vector class has been renamed into CSG.Vector3D\n\nClasses for 3D lines, 2D vectors, 2D lines, and methods to find the intersection of\na line and a plane etc.\n\nTransformations: CSG.transform(), CSG.translate(), CSG.rotate(), CSG.scale()\n\nExpanding or contracting a solid: CSG.expand() and CSG.contract(). Creates nice\nsmooth corners.\n\nThe vertex normal has been removed since it complicates retesselation. It's not needed\nfor solid CAD anyway.\n\n*/\n\nconst {addTransformationMethodsToPrototype, addCenteringToPrototype} = require('./core/mutators');\nlet CSG = require('./core/CSG');\nlet CAG = require('./core/CAG');\n\n// FIXME: how many are actual usefull to be exposed as API ?? looks like a code smell\nconst {\n  _CSGDEBUG,\n  defaultResolution2D,\n  defaultResolution3D,\n  EPS,\n  angleEPS,\n  areaEPS,\n  all,\n  top,\n  bottom,\n  left,\n  right,\n  front,\n  back,\n  staticTag,\n  getTag\n} = require('./core/constants');\n\nCSG._CSGDEBUG = _CSGDEBUG;\nCSG.defaultResolution2D = defaultResolution2D;\nCSG.defaultResolution3D = defaultResolution3D;\nCSG.EPS = EPS;\nCSG.angleEPS = angleEPS;\nCSG.areaEPS = areaEPS;\nCSG.all = all;\nCSG.top = top;\nCSG.bottom = bottom;\nCSG.left = left;\nCSG.right = right;\nCSG.front = front;\nCSG.back = back;\nCSG.staticTag = staticTag;\nCSG.getTag = getTag;\n\n// eek ! all this is kept for backwards compatibility...for now\nCSG.Vector2D = require('./core/math/Vector2');\nCSG.Vector3D = require('./core/math/Vector3');\nCSG.Vertex = require('./core/math/Vertex3');\nCAG.Vertex = require('./core/math/Vertex2');\nCSG.Plane = require('./core/math/Plane');\nCSG.Polygon = require('./core/math/Polygon3');\nCSG.Polygon2D = require('./core/math/Polygon2');\nCSG.Line2D = require('./core/math/Line2');\nCSG.Line3D = require('./core/math/Line3');\nCSG.Path2D = require('./core/math/Path2');\nCSG.OrthoNormalBasis = require('./core/math/OrthoNormalBasis');\nCSG.Matrix4x4 = require('./core/math/Matrix4');\n\nCAG.Side = require('./core/math/Side');\n\nCSG.Connector = require('./core/connectors').Connector;\nCSG.ConnectorList = require('./core/connectors').ConnectorList;\nCSG.Properties = require('./core/Properties');\n\nconst {circle, ellipse, rectangle, roundedRectangle} = require('./primitives/csg/primitives2d');\nconst {sphere, cube, roundedCube, cylinder, roundedCylinder, cylinderElliptic, polyhedron} = require('./primitives/csg/primitives3d');\n\nCSG.sphere = sphere;\nCSG.cube = cube;\nCSG.roundedCube = roundedCube;\nCSG.cylinder = cylinder;\nCSG.roundedCylinder = roundedCylinder;\nCSG.cylinderElliptic = cylinderElliptic;\nCSG.polyhedron = polyhedron;\n\nCAG.circle = circle;\nCAG.ellipse = ellipse;\nCAG.rectangle = rectangle;\nCAG.roundedRectangle = roundedRectangle;\n\n// injecting factories\nconst {fromPolygons, fromCompactBinary, fromObject, fromSlices} = require('./core/CSGFactories');\nCSG.fromCompactBinary = fromCompactBinary;\nCSG.fromObject = fromObject;\nCSG.fromSlices = fromSlices;\nCSG.fromPolygons = fromPolygons;\n\nconst CAGFactories = require('./core/CAGFactories');\nCAG.fromSides = CAGFactories.fromSides;\nCAG.fromObject = CAGFactories.fromObject;\nCAG.fromPoints = CAGFactories.fromPoints;\nCAG.fromPointsNoCheck = CAGFactories.fromPointsNoCheck;\nCAG.fromPath2 = CAGFactories.fromPath2;\nCAG.fromFakeCSG = CAGFactories.fromFakeCSG;\nCAG.fromCompactBinary = CAGFactories.fromCompactBinary;\n\n/// ////////////////////////////////////\n// option parsers\nconst optionsParsers = require('./api/optionParsers');\n\n// ////////////////////////////////////\naddTransformationMethodsToPrototype(CSG.prototype);\naddTransformationMethodsToPrototype(CSG.Vector2D.prototype);\naddTransformationMethodsToPrototype(CSG.Vector3D.prototype);\naddTransformationMethodsToPrototype(CSG.Vertex.prototype);\naddTransformationMethodsToPrototype(CSG.Plane.prototype);\naddTransformationMethodsToPrototype(CSG.Polygon.prototype);\naddTransformationMethodsToPrototype(CSG.Line2D.prototype);\naddTransformationMethodsToPrototype(CSG.Line3D.prototype);\naddTransformationMethodsToPrototype(CSG.Path2D.prototype);\naddTransformationMethodsToPrototype(CSG.OrthoNormalBasis.prototype);\naddTransformationMethodsToPrototype(CSG.Connector.prototype);\n\naddTransformationMethodsToPrototype(CAG.prototype);\naddTransformationMethodsToPrototype(CAG.Side.prototype);\naddTransformationMethodsToPrototype(CAG.Vertex.prototype);\n\nCSG.parseOptionAs2DVector = optionsParsers.parseOptionAs3DVector;\nCSG.parseOptionAs3DVector = optionsParsers.parseOptionAs3DVector;\nCSG.parseOptionAs3DVectorList = optionsParsers.parseOptionAs3DVectorList;\nCSG.parseOptionAsBool = optionsParsers.parseOptionAsBool;\nCSG.parseOptionAsFloat = optionsParsers.parseOptionAsFloat;\nCSG.parseOptionAsInt = optionsParsers.parseOptionAsInt;\n// this is needed for now, otherwise there are missing features in Polygon2D\nCSG.Polygon2D.prototype = CAG.prototype;\n\n// utilities\nconst {isCAG, isCSG} = require('./core/utils');\n\nconst globalApi = Object.assign({}, {CSG, CAG}, optionsParsers, {isCAG, isCSG});\n\nmodule.exports = globalApi;\n","const {Connector} = require('./connectors');\nconst Vertex3D = require('./math/Vertex3');\nconst Vector2D = require('./math/Vector2');\nconst Vector3D = require('./math/Vector3');\nconst Polygon = require('./math/Polygon3');\n\nconst {fromPolygons} = require('./CSGFactories');\nconst {fromSides, fromFakeCSG} = require('./CAGFactories');\n\nconst canonicalize = require('./utils/canonicalize');\nconst retesselate = require('./utils/retesellate');\nconst {isCAGValid, isSelfIntersecting, hasPointInside} = require('./utils/cagValidation');\nconst {area, getBounds} = require('./utils/cagMeasurements');\n\n// all of these are good candidates for elimination in this scope, since they are part of a functional api\nconst {overCutInsideCorners} = require('../api/ops-cnc');\nconst {extrudeInOrthonormalBasis, extrudeInPlane, extrude, rotateExtrude} = require('../modifiers/extrusions/');\nconst cagoutlinePaths = require('../api/cagOutlinePaths');\nconst center = require('../api/center');\nconst {expand, contract, expandedShellOfCAG} = require('../api/ops-expandContract');\n/**\n * Class CAG\n * Holds a solid area geometry like CSG but 2D.\n * Each area consists of a number of sides.\n * Each side is a line between 2 points.\n * @constructor\n */\nlet CAG = function () {\n  this.sides = [];\n  this.isCanonicalized = false;\n};\n\nCAG.prototype = {\n  union: function (cag) {\n    let cags;\n    if (cag instanceof Array) {\n      cags = cag;\n    } else {\n      cags = [cag];\n    }\n    let r = this._toCSGWall(-1, 1);\n    r = r.union(\n      cags.map(function (cag) {\n        return cag._toCSGWall(-1, 1).reTesselated();\n      }), false, false);\n    return fromFakeCSG(r).canonicalized();\n  },\n\n  subtract: function (cag) {\n    let cags;\n    if (cag instanceof Array) {\n      cags = cag;\n    } else {\n      cags = [cag];\n    }\n    let r = this._toCSGWall(-1, 1);\n    cags.map(function (cag) {\n      r = r.subtractSub(cag._toCSGWall(-1, 1), false, false);\n    });\n    r = r.reTesselated();\n    r = r.canonicalized();\n    r = fromFakeCSG(r);\n    r = r.canonicalized();\n    return r;\n  },\n\n  intersect: function (cag) {\n    let cags;\n    if (cag instanceof Array) {\n      cags = cag;\n    } else {\n      cags = [cag];\n    }\n    let r = this._toCSGWall(-1, 1);\n    cags.map(function (cag) {\n      r = r.intersectSub(cag._toCSGWall(-1, 1), false, false);\n    });\n    r = r.reTesselated();\n    r = r.canonicalized();\n    r = fromFakeCSG(r);\n    r = r.canonicalized();\n    return r;\n  },\n\n  transform: function (matrix4x4) {\n    let ismirror = matrix4x4.isMirroring();\n    let newsides = this.sides.map(function (side) {\n      return side.transform(matrix4x4);\n    });\n    let result = fromSides(newsides);\n    if (ismirror) {\n      result = result.flipped();\n    }\n    return result;\n  },\n\n  flipped: function () {\n    let newsides = this.sides.map(function (side) {\n      return side.flipped();\n    });\n    newsides.reverse();\n    return fromSides(newsides);\n  },\n\n  // ALIAS !\n  center: function (axes) {\n    return center({axes: axes}, [this]);\n  },\n\n  // ALIAS !\n  expandedShell: function (radius, resolution) {\n    return expandedShellOfCAG(this, radius, resolution);\n  },\n\n  // ALIAS !\n  expand: function (radius, resolution) {\n    return expand(this, radius, resolution);\n  },\n\n  contract: function (radius, resolution) {\n    return contract(this, radius, resolution);\n  },\n\n  // ALIAS !\n  area: function () {\n    return area(this);\n  },\n\n  // ALIAS !\n  getBounds: function () {\n    return getBounds(this);\n  },\n  // ALIAS !\n  isSelfIntersecting: function (debug) {\n    return isSelfIntersecting(this, debug);\n  },\n  // extrusion: all aliases to simple functions\n  extrudeInOrthonormalBasis: function (orthonormalbasis, depth, options) {\n    return extrudeInOrthonormalBasis(this, orthonormalbasis, depth, options);\n  },\n\n  // ALIAS !\n  extrudeInPlane: function (axis1, axis2, depth, options) {\n    return extrudeInPlane(this, axis1, axis2, depth, options);\n  },\n\n  // ALIAS !\n  extrude: function (options) {\n    return extrude(this, options);\n  },\n\n  // ALIAS !\n  rotateExtrude: function (options) { // FIXME options should be optional\n    return rotateExtrude(this, options);\n  },\n\n  // ALIAS !\n  check: function () {\n    return isCAGValid(this);\n  },\n\n  // ALIAS !\n  canonicalized: function () {\n    return canonicalize(this);\n  },\n\n  // ALIAS !\n  reTesselated: function () {\n    return retesselate(this);\n  },\n\n  // ALIAS !\n  getOutlinePaths: function () {\n    return cagoutlinePaths(this);\n  },\n\n  // ALIAS !\n  overCutInsideCorners: function (cutterradius) {\n    return overCutInsideCorners(this, cutterradius);\n  },\n\n  // ALIAS !\n  hasPointInside: function (point) {\n    return hasPointInside(this, point);\n  },\n\n  // All the toXXX functions\n  toString: function () {\n    let result = 'CAG (' + this.sides.length + ' sides):\\n';\n    this.sides.map(function (side) {\n      result += '  ' + side.toString() + '\\n';\n    });\n    return result;\n  },\n\n  _toCSGWall: function (z0, z1) {\n    let polygons = this.sides.map(function (side) {\n      return side.toPolygon3D(z0, z1);\n    });\n    return fromPolygons(polygons);\n  },\n\n  _toVector3DPairs: function (m) {\n    // transform m\n    let pairs = this.sides.map(function (side) {\n      let p0 = side.vertex0.pos;\n      let p1 = side.vertex1.pos;\n      return [Vector3D.Create(p0.x, p0.y, 0),\n        Vector3D.Create(p1.x, p1.y, 0)];\n    });\n    if (typeof m !== 'undefined') {\n      pairs = pairs.map(function (pair) {\n        return pair.map(function (v) {\n          return v.transform(m);\n        });\n      });\n    }\n    return pairs;\n  },\n\n  /*\n    * transform a cag into the polygons of a corresponding 3d plane, positioned per options\n    * Accepts a connector for plane positioning, or optionally\n    * single translation, axisVector, normalVector arguments\n    * (toConnector has precedence over single arguments if provided)\n    */\n  _toPlanePolygons: function (options) {\n    const defaults = {\n      flipped: false\n    };\n    options = Object.assign({}, defaults, options);\n    let {flipped} = options;\n    // reference connector for transformation\n    let origin = [0, 0, 0];\n    let defaultAxis = [0, 0, 1];\n    let defaultNormal = [0, 1, 0];\n    let thisConnector = new Connector(origin, defaultAxis, defaultNormal);\n    // translated connector per options\n    let translation = options.translation || origin;\n    let axisVector = options.axisVector || defaultAxis;\n    let normalVector = options.normalVector || defaultNormal;\n    // will override above if options has toConnector\n    let toConnector = options.toConnector ||\n      new Connector(translation, axisVector, normalVector);\n    // resulting transform\n    let m = thisConnector.getTransformationTo(toConnector, false, 0);\n    // create plane as a (partial non-closed) CSG in XY plane\n    let bounds = this.getBounds();\n    bounds[0] = bounds[0].minus(new Vector2D(1, 1));\n    bounds[1] = bounds[1].plus(new Vector2D(1, 1));\n    let csgshell = this._toCSGWall(-1, 1);\n    let csgplane = fromPolygons([new Polygon([\n      new Vertex3D(new Vector3D(bounds[0].x, bounds[0].y, 0)),\n      new Vertex3D(new Vector3D(bounds[1].x, bounds[0].y, 0)),\n      new Vertex3D(new Vector3D(bounds[1].x, bounds[1].y, 0)),\n      new Vertex3D(new Vector3D(bounds[0].x, bounds[1].y, 0))\n    ])]);\n    if (flipped) {\n      csgplane = csgplane.invert();\n    }\n    // intersectSub -> prevent premature retesselate/canonicalize\n    csgplane = csgplane.intersectSub(csgshell);\n    // only keep the polygons in the z plane:\n    let polys = csgplane.polygons.filter(function (polygon) {\n      return Math.abs(polygon.plane.normal.z) > 0.99;\n    });\n    // add uv vectors, corresponding with the x and y coordinates of the\n    // points defining the original CAG\n    polys.forEach(function (poly) {\n      poly.vertices.forEach(function (vertex) {\n        vertex.uv = new Vector2D(vertex.pos.x, vertex.pos.y);\n      });\n    });\n\n    // finally, position the plane per passed transformations\n    return polys.map(function (poly) {\n      return poly.transform(m);\n    });\n  },\n\n  /*\n    * given 2 connectors, this returns all polygons of a \"wall\" between 2\n    * copies of this cag, positioned in 3d space as \"bottom\" and\n    * \"top\" plane per connectors toConnector1, and toConnector2, respectively\n    */\n  _toWallPolygons: function (options, iteration = 0) {\n    // normals are going to be correct as long as toConn2.point - toConn1.point\n    // points into cag normal direction (check in caller)\n    // arguments: options.toConnector1, options.toConnector2, options.cag\n    //     walls go from toConnector1 to toConnector2\n    //     optionally, target cag to point to - cag needs to have same number of sides as this!\n    let origin = [0, 0, 0];\n    let defaultAxis = [0, 0, 1];\n    let defaultNormal = [0, 1, 0];\n    let thisConnector = new Connector(origin, defaultAxis, defaultNormal);\n    // arguments:\n    let toConnector1 = options.toConnector1;\n    // let toConnector2 = new Connector([0, 0, -30], defaultAxis, defaultNormal);\n    let toConnector2 = options.toConnector2;\n    if (!(toConnector1 instanceof Connector && toConnector2 instanceof Connector)) {\n      throw new Error('could not parse Connector arguments toConnector1 or toConnector2');\n    }\n    if (options.cag) {\n      if (options.cag.sides.length !== this.sides.length) {\n        throw new Error('target cag needs same sides count as start cag');\n      }\n    }\n    // target cag is same as this unless specified\n    let toCag = options.cag || this;\n    let m1 = thisConnector.getTransformationTo(toConnector1, toConnector1.axisvector.z < 0, 0);\n    let m2 = thisConnector.getTransformationTo(toConnector2, toConnector2.axisvector.z < 0, 0);\n    let vps1 = this._toVector3DPairs(m1);\n    let vps2 = toCag._toVector3DPairs(m2);\n    let hasMirroredNormals = toConnector1.axisvector.z < 0;\n\n    // group the Vector3DPairs by 2D polygon in case of multi-array cag\n    let vps1List = [];\n    let vps2List = [];\n    let vps1Temp = [vps1[0]];\n    let vps2Temp = [vps2[0]];\n    let i = 0;\n    for (i = 1; i < vps1.length; ++i) {\n      if (!(vps1[i][1].equals(vps1[i - 1][0]) || vps1[i][0].equals(vps1[i - 1][1]))) {\n        vps1List.push(vps1Temp);\n        vps1Temp = [];\n        vps2List.push(vps2Temp);\n        vps2Temp = [];\n      }\n      vps1Temp.push(vps1[i]);\n      vps2Temp.push(vps2[i]);\n    }\n    vps1List.push(vps1Temp);\n    vps2List.push(vps2Temp);\n\n    // calculate UV coordinates for each extruded side\n    let polygons = [];\n    vps1List.forEach(function (vps1, i) {\n      let xbot0 = 0;\n      let xtop0 = 0;\n      vps2 = vps2List[i];\n      vps1.forEach(function (vp1, j) {\n        let xbot1 = xbot0 + vp1[0].distanceTo(vp1[1]);\n        let xtop1 = xtop0 + vps2[j][0].distanceTo(vps2[j][1]);\n        let y0 = vp1[0].distanceTo(vps2[j][0]);\n        let y1 = vp1[1].distanceTo(vps2[j][1]);\n        let polygon1 = new Polygon(\n          [Vertex3D.fromPosAndUV(vps2[j][1], new Vector2D(xtop1, y1 * (1 + iteration))),\n            Vertex3D.fromPosAndUV(vps2[j][0], new Vector2D(xtop0, y0 * (1 + iteration))),\n            Vertex3D.fromPosAndUV(vp1[0], new Vector2D(xbot0, y0 * iteration))]);\n        let polygon2 = new Polygon(\n          [Vertex3D.fromPosAndUV(vps2[j][1], new Vector2D(xtop1, y1 * (1 + iteration))),\n            Vertex3D.fromPosAndUV(vp1[0], new Vector2D(xbot0, y0 * iteration)),\n            Vertex3D.fromPosAndUV(vp1[1], new Vector2D(xbot1, y1 * iteration))]);\n        if (hasMirroredNormals) {\n          polygon1.plane = polygon1.plane.flipped();\n          polygon2.plane = polygon2.plane.flipped();\n        }\n        polygons.push(polygon1);\n        polygons.push(polygon2);\n        xbot0 = xbot1;\n        xtop0 = xtop1;\n      });\n    });\n    return polygons;\n  },\n\n  /**\n   * Convert to a list of points.\n   * @return {points[]} list of points in 2D space\n   */\n  toPoints: function () {\n    let points = this.sides.map(function (side) {\n      let v0 = side.vertex0;\n      // let v1 = side.vertex1\n      return v0.pos;\n    });\n    // due to the logic of fromPoints()\n    // move the first point to the last\n    if (points.length > 0) {\n      points.push(points.shift());\n    }\n    return points;\n  },\n\n  /** Convert to compact binary form.\n   * See fromCompactBinary.\n   * @return {CompactBinary}\n   */\n  toCompactBinary: function () {\n    let cag = this.canonicalized();\n    let numsides = cag.sides.length;\n    let vertexmap = {};\n    let vertices = [];\n    let numvertices = 0;\n    let sideVertexIndices = new Uint32Array(2 * numsides);\n    let sidevertexindicesindex = 0;\n    cag.sides.map(function (side) {\n      [side.vertex0, side.vertex1].map(function (v) {\n        let vertextag = v.getTag();\n        let vertexindex;\n        if (!(vertextag in vertexmap)) {\n          vertexindex = numvertices++;\n          vertexmap[vertextag] = vertexindex;\n          vertices.push(v);\n        } else {\n          vertexindex = vertexmap[vertextag];\n        }\n        sideVertexIndices[sidevertexindicesindex++] = vertexindex;\n      });\n    });\n    let vertexData = new Float64Array(numvertices * 2);\n    let verticesArrayIndex = 0;\n    vertices.map(function (v) {\n      let pos = v.pos;\n      vertexData[verticesArrayIndex++] = pos._x;\n      vertexData[verticesArrayIndex++] = pos._y;\n    });\n    let result = {\n      'class': 'CAG',\n      sideVertexIndices: sideVertexIndices,\n      vertexData: vertexData\n    };\n    return result;\n  }\n};\n\nmodule.exports = CAG;\n","const Vector3D = require('./Vector3');\nconst Vector2D = require('./Vector2');\nconst OrthoNormalBasis = require('./OrthoNormalBasis');\nconst Plane = require('./Plane');\n\n// # class Matrix4x4:\n// Represents a 4x4 matrix. Elements are specified in row order\nconst Matrix4x4 = function (elements) {\n  if (arguments.length >= 1) {\n    this.elements = elements;\n  } else {\n    // if no arguments passed: create unity matrix\n    this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  }\n};\n\nMatrix4x4.prototype = {\n  plus: function (m) {\n    var r = [];\n    for (var i = 0; i < 16; i++) {\n      r[i] = this.elements[i] + m.elements[i];\n    }\n    return new Matrix4x4(r);\n  },\n\n  minus: function (m) {\n    var r = [];\n    for (var i = 0; i < 16; i++) {\n      r[i] = this.elements[i] - m.elements[i];\n    }\n    return new Matrix4x4(r);\n  },\n\n  // right multiply by another 4x4 matrix:\n  multiply: function (m) {\n    // cache elements in local variables, for speedup:\n    var this0 = this.elements[0];\n    var this1 = this.elements[1];\n    var this2 = this.elements[2];\n    var this3 = this.elements[3];\n    var this4 = this.elements[4];\n    var this5 = this.elements[5];\n    var this6 = this.elements[6];\n    var this7 = this.elements[7];\n    var this8 = this.elements[8];\n    var this9 = this.elements[9];\n    var this10 = this.elements[10];\n    var this11 = this.elements[11];\n    var this12 = this.elements[12];\n    var this13 = this.elements[13];\n    var this14 = this.elements[14];\n    var this15 = this.elements[15];\n    var m0 = m.elements[0];\n    var m1 = m.elements[1];\n    var m2 = m.elements[2];\n    var m3 = m.elements[3];\n    var m4 = m.elements[4];\n    var m5 = m.elements[5];\n    var m6 = m.elements[6];\n    var m7 = m.elements[7];\n    var m8 = m.elements[8];\n    var m9 = m.elements[9];\n    var m10 = m.elements[10];\n    var m11 = m.elements[11];\n    var m12 = m.elements[12];\n    var m13 = m.elements[13];\n    var m14 = m.elements[14];\n    var m15 = m.elements[15];\n\n    var result = [];\n    result[0] = this0 * m0 + this1 * m4 + this2 * m8 + this3 * m12;\n    result[1] = this0 * m1 + this1 * m5 + this2 * m9 + this3 * m13;\n    result[2] = this0 * m2 + this1 * m6 + this2 * m10 + this3 * m14;\n    result[3] = this0 * m3 + this1 * m7 + this2 * m11 + this3 * m15;\n    result[4] = this4 * m0 + this5 * m4 + this6 * m8 + this7 * m12;\n    result[5] = this4 * m1 + this5 * m5 + this6 * m9 + this7 * m13;\n    result[6] = this4 * m2 + this5 * m6 + this6 * m10 + this7 * m14;\n    result[7] = this4 * m3 + this5 * m7 + this6 * m11 + this7 * m15;\n    result[8] = this8 * m0 + this9 * m4 + this10 * m8 + this11 * m12;\n    result[9] = this8 * m1 + this9 * m5 + this10 * m9 + this11 * m13;\n    result[10] = this8 * m2 + this9 * m6 + this10 * m10 + this11 * m14;\n    result[11] = this8 * m3 + this9 * m7 + this10 * m11 + this11 * m15;\n    result[12] = this12 * m0 + this13 * m4 + this14 * m8 + this15 * m12;\n    result[13] = this12 * m1 + this13 * m5 + this14 * m9 + this15 * m13;\n    result[14] = this12 * m2 + this13 * m6 + this14 * m10 + this15 * m14;\n    result[15] = this12 * m3 + this13 * m7 + this14 * m11 + this15 * m15;\n    return new Matrix4x4(result);\n  },\n\n  clone: function () {\n    var elements = this.elements.map(function (p) {\n      return p;\n    });\n    return new Matrix4x4(elements);\n  },\n\n  // Right multiply the matrix by a Vector3D (interpreted as 3 row, 1 column)\n  // (result = M*v)\n  // Fourth element is taken as 1\n  rightMultiply1x3Vector: function (v) {\n    var v0 = v._x;\n    var v1 = v._y;\n    var v2 = v._z;\n    var v3 = 1;\n    var x = v0 * this.elements[0] + v1 * this.elements[1] + v2 * this.elements[2] + v3 * this.elements[3];\n    var y = v0 * this.elements[4] + v1 * this.elements[5] + v2 * this.elements[6] + v3 * this.elements[7];\n    var z = v0 * this.elements[8] + v1 * this.elements[9] + v2 * this.elements[10] + v3 * this.elements[11];\n    var w = v0 * this.elements[12] + v1 * this.elements[13] + v2 * this.elements[14] + v3 * this.elements[15];\n    // scale such that fourth element becomes 1:\n    if (w !== 1) {\n      var invw = 1.0 / w;\n      x *= invw;\n      y *= invw;\n      z *= invw;\n    }\n    return new Vector3D(x, y, z);\n  },\n\n  // Multiply a Vector3D (interpreted as 3 column, 1 row) by this matrix\n  // (result = v*M)\n  // Fourth element is taken as 1\n  leftMultiply1x3Vector: function (v) {\n    var v0 = v._x;\n    var v1 = v._y;\n    var v2 = v._z;\n    var v3 = 1;\n    var x = v0 * this.elements[0] + v1 * this.elements[4] + v2 * this.elements[8] + v3 * this.elements[12];\n    var y = v0 * this.elements[1] + v1 * this.elements[5] + v2 * this.elements[9] + v3 * this.elements[13];\n    var z = v0 * this.elements[2] + v1 * this.elements[6] + v2 * this.elements[10] + v3 * this.elements[14];\n    var w = v0 * this.elements[3] + v1 * this.elements[7] + v2 * this.elements[11] + v3 * this.elements[15];\n    // scale such that fourth element becomes 1:\n    if (w !== 1) {\n      var invw = 1.0 / w;\n      x *= invw;\n      y *= invw;\n      z *= invw;\n    }\n    return new Vector3D(x, y, z);\n  },\n\n  // Right multiply the matrix by a Vector2D (interpreted as 2 row, 1 column)\n  // (result = M*v)\n  // Fourth element is taken as 1\n  rightMultiply1x2Vector: function (v) {\n    var v0 = v.x;\n    var v1 = v.y;\n    var v2 = 0;\n    var v3 = 1;\n    var x = v0 * this.elements[0] + v1 * this.elements[1] + v2 * this.elements[2] + v3 * this.elements[3];\n    var y = v0 * this.elements[4] + v1 * this.elements[5] + v2 * this.elements[6] + v3 * this.elements[7];\n    var z = v0 * this.elements[8] + v1 * this.elements[9] + v2 * this.elements[10] + v3 * this.elements[11];\n    var w = v0 * this.elements[12] + v1 * this.elements[13] + v2 * this.elements[14] + v3 * this.elements[15];\n    // scale such that fourth element becomes 1:\n    if (w !== 1) {\n      var invw = 1.0 / w;\n      x *= invw;\n      y *= invw;\n      z *= invw;\n    }\n    return new Vector2D(x, y);\n  },\n\n  // Multiply a Vector2D (interpreted as 2 column, 1 row) by this matrix\n  // (result = v*M)\n  // Fourth element is taken as 1\n  leftMultiply1x2Vector: function (v) {\n    var v0 = v.x;\n    var v1 = v.y;\n    var v2 = 0;\n    var v3 = 1;\n    var x = v0 * this.elements[0] + v1 * this.elements[4] + v2 * this.elements[8] + v3 * this.elements[12];\n    var y = v0 * this.elements[1] + v1 * this.elements[5] + v2 * this.elements[9] + v3 * this.elements[13];\n    var z = v0 * this.elements[2] + v1 * this.elements[6] + v2 * this.elements[10] + v3 * this.elements[14];\n    var w = v0 * this.elements[3] + v1 * this.elements[7] + v2 * this.elements[11] + v3 * this.elements[15];\n    // scale such that fourth element becomes 1:\n    if (w !== 1) {\n      var invw = 1.0 / w;\n      x *= invw;\n      y *= invw;\n      z *= invw;\n    }\n    return new Vector2D(x, y);\n  },\n\n  // determine whether this matrix is a mirroring transformation\n  isMirroring: function () {\n    var u = new Vector3D(this.elements[0], this.elements[4], this.elements[8]);\n    var v = new Vector3D(this.elements[1], this.elements[5], this.elements[9]);\n    var w = new Vector3D(this.elements[2], this.elements[6], this.elements[10]);\n\n    // for a true orthogonal, non-mirrored base, u.cross(v) == w\n    // If they have an opposite direction then we are mirroring\n    var mirrorvalue = u.cross(v).dot(w);\n    var ismirror = (mirrorvalue < 0);\n    return ismirror;\n  }\n};\n\n// return the unity matrix\nMatrix4x4.unity = function () {\n  return new Matrix4x4();\n};\n\n// Create a rotation matrix for rotating around the x axis\nMatrix4x4.rotationX = function (degrees) {\n  var radians = degrees * Math.PI * (1.0 / 180.0);\n  var cos = Math.cos(radians);\n  var sin = Math.sin(radians);\n  var els = [\n    1, 0, 0, 0, 0, cos, sin, 0, 0, -sin, cos, 0, 0, 0, 0, 1\n  ];\n  return new Matrix4x4(els);\n};\n\n// Create a rotation matrix for rotating around the y axis\nMatrix4x4.rotationY = function (degrees) {\n  var radians = degrees * Math.PI * (1.0 / 180.0);\n  var cos = Math.cos(radians);\n  var sin = Math.sin(radians);\n  var els = [\n    cos, 0, -sin, 0, 0, 1, 0, 0, sin, 0, cos, 0, 0, 0, 0, 1\n  ];\n  return new Matrix4x4(els);\n};\n\n// Create a rotation matrix for rotating around the z axis\nMatrix4x4.rotationZ = function (degrees) {\n  var radians = degrees * Math.PI * (1.0 / 180.0);\n  var cos = Math.cos(radians);\n  var sin = Math.sin(radians);\n  var els = [\n    cos, sin, 0, 0, -sin, cos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1\n  ];\n  return new Matrix4x4(els);\n};\n\n// Matrix for rotation about arbitrary point and axis\nMatrix4x4.rotation = function (rotationCenter, rotationAxis, degrees) {\n  rotationCenter = new Vector3D(rotationCenter);\n  rotationAxis = new Vector3D(rotationAxis);\n  var rotationPlane = Plane.fromNormalAndPoint(rotationAxis, rotationCenter);\n  var orthobasis = new OrthoNormalBasis(rotationPlane);\n  var transformation = Matrix4x4.translation(rotationCenter.negated());\n  transformation = transformation.multiply(orthobasis.getProjectionMatrix());\n  transformation = transformation.multiply(Matrix4x4.rotationZ(degrees));\n  transformation = transformation.multiply(orthobasis.getInverseProjectionMatrix());\n  transformation = transformation.multiply(Matrix4x4.translation(rotationCenter));\n  return transformation;\n};\n\n// Create an affine matrix for translation:\nMatrix4x4.translation = function (v) {\n  // parse as Vector3D, so we can pass an array or a Vector3D\n  var vec = new Vector3D(v);\n  var els = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, vec.x, vec.y, vec.z, 1];\n  return new Matrix4x4(els);\n};\n\n// Create an affine matrix for mirroring into an arbitrary plane:\nMatrix4x4.mirroring = function (plane) {\n  var nx = plane.normal.x;\n  var ny = plane.normal.y;\n  var nz = plane.normal.z;\n  var w = plane.w;\n  var els = [\n    (1.0 - 2.0 * nx * nx), (-2.0 * ny * nx), (-2.0 * nz * nx), 0,\n    (-2.0 * nx * ny), (1.0 - 2.0 * ny * ny), (-2.0 * nz * ny), 0,\n    (-2.0 * nx * nz), (-2.0 * ny * nz), (1.0 - 2.0 * nz * nz), 0,\n    (2.0 * nx * w), (2.0 * ny * w), (2.0 * nz * w), 1\n  ];\n  return new Matrix4x4(els);\n};\n\n// Create an affine matrix for scaling:\nMatrix4x4.scaling = function (v) {\n  // parse as Vector3D, so we can pass an array or a Vector3D\n  var vec = new Vector3D(v);\n  var els = [\n    vec.x, 0, 0, 0, 0, vec.y, 0, 0, 0, 0, vec.z, 0, 0, 0, 0, 1\n  ];\n  return new Matrix4x4(els);\n};\n\nmodule.exports = Matrix4x4;\n","const Vector2D = require('./Vector2');\nconst Vector3D = require('./Vector3');\nconst Line2D = require('./Line2');\nconst Line3D = require('./Line3');\nconst Plane = require('./Plane');\n\n/** class OrthoNormalBasis\n * Reprojects points on a 3D plane onto a 2D plane\n * or from a 2D plane back onto the 3D plane\n * @param  {Plane} plane\n * @param  {Vector3D|Vector2D} rightvector\n */\nconst OrthoNormalBasis = function (plane, rightvector) {\n  if (arguments.length < 2) {\n    // choose an arbitrary right hand vector, making sure it is somewhat orthogonal to the plane normal:\n    rightvector = plane.normal.randomNonParallelVector();\n  } else {\n    rightvector = new Vector3D(rightvector);\n  }\n  this.v = plane.normal.cross(rightvector).unit();\n  this.u = this.v.cross(plane.normal);\n  this.plane = plane;\n  this.planeorigin = plane.normal.times(plane.w);\n};\n\n// Get an orthonormal basis for the standard XYZ planes.\n// Parameters: the names of two 3D axes. The 2d x axis will map to the first given 3D axis, the 2d y\n// axis will map to the second.\n// Prepend the axis with a \"-\" to invert the direction of this axis.\n// For example: OrthoNormalBasis.GetCartesian(\"-Y\",\"Z\")\n//   will return an orthonormal basis where the 2d X axis maps to the 3D inverted Y axis, and\n//   the 2d Y axis maps to the 3D Z axis.\nOrthoNormalBasis.GetCartesian = function (xaxisid, yaxisid) {\n  let axisid = xaxisid + '/' + yaxisid;\n  let planenormal, rightvector;\n  if (axisid === 'X/Y') {\n    planenormal = [0, 0, 1];\n    rightvector = [1, 0, 0];\n  } else if (axisid === 'Y/-X') {\n    planenormal = [0, 0, 1];\n    rightvector = [0, 1, 0];\n  } else if (axisid === '-X/-Y') {\n    planenormal = [0, 0, 1];\n    rightvector = [-1, 0, 0];\n  } else if (axisid === '-Y/X') {\n    planenormal = [0, 0, 1];\n    rightvector = [0, -1, 0];\n  } else if (axisid === '-X/Y') {\n    planenormal = [0, 0, -1];\n    rightvector = [-1, 0, 0];\n  } else if (axisid === '-Y/-X') {\n    planenormal = [0, 0, -1];\n    rightvector = [0, -1, 0];\n  } else if (axisid === 'X/-Y') {\n    planenormal = [0, 0, -1];\n    rightvector = [1, 0, 0];\n  } else if (axisid === 'Y/X') {\n    planenormal = [0, 0, -1];\n    rightvector = [0, 1, 0];\n  } else if (axisid === 'X/Z') {\n    planenormal = [0, -1, 0];\n    rightvector = [1, 0, 0];\n  } else if (axisid === 'Z/-X') {\n    planenormal = [0, -1, 0];\n    rightvector = [0, 0, 1];\n  } else if (axisid === '-X/-Z') {\n    planenormal = [0, -1, 0];\n    rightvector = [-1, 0, 0];\n  } else if (axisid === '-Z/X') {\n    planenormal = [0, -1, 0];\n    rightvector = [0, 0, -1];\n  } else if (axisid === '-X/Z') {\n    planenormal = [0, 1, 0];\n    rightvector = [-1, 0, 0];\n  } else if (axisid === '-Z/-X') {\n    planenormal = [0, 1, 0];\n    rightvector = [0, 0, -1];\n  } else if (axisid === 'X/-Z') {\n    planenormal = [0, 1, 0];\n    rightvector = [1, 0, 0];\n  } else if (axisid === 'Z/X') {\n    planenormal = [0, 1, 0];\n    rightvector = [0, 0, 1];\n  } else if (axisid === 'Y/Z') {\n    planenormal = [1, 0, 0];\n    rightvector = [0, 1, 0];\n  } else if (axisid === 'Z/-Y') {\n    planenormal = [1, 0, 0];\n    rightvector = [0, 0, 1];\n  } else if (axisid === '-Y/-Z') {\n    planenormal = [1, 0, 0];\n    rightvector = [0, -1, 0];\n  } else if (axisid === '-Z/Y') {\n    planenormal = [1, 0, 0];\n    rightvector = [0, 0, -1];\n  } else if (axisid === '-Y/Z') {\n    planenormal = [-1, 0, 0];\n    rightvector = [0, -1, 0];\n  } else if (axisid === '-Z/-Y') {\n    planenormal = [-1, 0, 0];\n    rightvector = [0, 0, -1];\n  } else if (axisid === 'Y/-Z') {\n    planenormal = [-1, 0, 0];\n    rightvector = [0, 1, 0];\n  } else if (axisid === 'Z/Y') {\n    planenormal = [-1, 0, 0];\n    rightvector = [0, 0, 1];\n  } else {\n    throw new Error('OrthoNormalBasis.GetCartesian: invalid combination of axis identifiers. Should pass two string arguments from [X,Y,Z,-X,-Y,-Z], being two different axes.');\n  }\n  return new OrthoNormalBasis(new Plane(new Vector3D(planenormal), 0), new Vector3D(rightvector));\n};\n\n/*\n// test code for OrthoNormalBasis.GetCartesian()\nOrthoNormalBasis.GetCartesian_Test=function() {\n  let axisnames=[\"X\",\"Y\",\"Z\",\"-X\",\"-Y\",\"-Z\"];\n  let axisvectors=[[1,0,0], [0,1,0], [0,0,1], [-1,0,0], [0,-1,0], [0,0,-1]];\n  for(let axis1=0; axis1 < 3; axis1++) {\n    for(let axis1inverted=0; axis1inverted < 2; axis1inverted++) {\n      let axis1name=axisnames[axis1+3*axis1inverted];\n      let axis1vector=axisvectors[axis1+3*axis1inverted];\n      for(let axis2=0; axis2 < 3; axis2++) {\n        if(axis2 != axis1) {\n          for(let axis2inverted=0; axis2inverted < 2; axis2inverted++) {\n            let axis2name=axisnames[axis2+3*axis2inverted];\n            let axis2vector=axisvectors[axis2+3*axis2inverted];\n            let orthobasis=OrthoNormalBasis.GetCartesian(axis1name, axis2name);\n            let test1=orthobasis.to3D(new Vector2D([1,0]));\n            let test2=orthobasis.to3D(new Vector2D([0,1]));\n            let expected1=new Vector3D(axis1vector);\n            let expected2=new Vector3D(axis2vector);\n            let d1=test1.distanceTo(expected1);\n            let d2=test2.distanceTo(expected2);\n            if( (d1 > 0.01) || (d2 > 0.01) ) {\n              throw new Error(\"Wrong!\");\n  }}}}}}\n  throw new Error(\"OK\");\n};\n*/\n\n// The z=0 plane, with the 3D x and y vectors mapped to the 2D x and y vector\nOrthoNormalBasis.Z0Plane = function () {\n  let plane = new Plane(new Vector3D([0, 0, 1]), 0);\n  return new OrthoNormalBasis(plane, new Vector3D([1, 0, 0]));\n};\n\nOrthoNormalBasis.prototype = {\n  getProjectionMatrix: function () {\n    const Matrix4x4 = require('./Matrix4'); // FIXME: circular dependencies Matrix=>OrthoNormalBasis => Matrix\n    return new Matrix4x4([\n      this.u.x, this.v.x, this.plane.normal.x, 0,\n      this.u.y, this.v.y, this.plane.normal.y, 0,\n      this.u.z, this.v.z, this.plane.normal.z, 0,\n      0, 0, -this.plane.w, 1\n    ]);\n  },\n\n  getInverseProjectionMatrix: function () {\n    const Matrix4x4 = require('./Matrix4'); // FIXME: circular dependencies Matrix=>OrthoNormalBasis => Matrix\n    let p = this.plane.normal.times(this.plane.w);\n    return new Matrix4x4([\n      this.u.x, this.u.y, this.u.z, 0,\n      this.v.x, this.v.y, this.v.z, 0,\n      this.plane.normal.x, this.plane.normal.y, this.plane.normal.z, 0,\n      p.x, p.y, p.z, 1\n    ]);\n  },\n\n  to2D: function (vec3) {\n    return new Vector2D(vec3.dot(this.u), vec3.dot(this.v));\n  },\n\n  to3D: function (vec2) {\n    return this.planeorigin.plus(this.u.times(vec2.x)).plus(this.v.times(vec2.y));\n  },\n\n  line3Dto2D: function (line3d) {\n    let a = line3d.point;\n    let b = line3d.direction.plus(a);\n    let a2d = this.to2D(a);\n    let b2d = this.to2D(b);\n    return Line2D.fromPoints(a2d, b2d);\n  },\n\n  line2Dto3D: function (line2d) {\n    let a = line2d.origin();\n    let b = line2d.direction().plus(a);\n    let a3d = this.to3D(a);\n    let b3d = this.to3D(b);\n    return Line3D.fromPoints(a3d, b3d);\n  },\n\n  transform: function (matrix4x4) {\n    // todo: this may not work properly in case of mirroring\n    let newplane = this.plane.transform(matrix4x4);\n    let rightpointTransformed = this.u.transform(matrix4x4);\n    let originTransformed = new Vector3D(0, 0, 0).transform(matrix4x4);\n    let newrighthandvector = rightpointTransformed.minus(originTransformed);\n    let newbasis = new OrthoNormalBasis(newplane, newrighthandvector);\n    return newbasis;\n  }\n};\n\nmodule.exports = OrthoNormalBasis;\n","const Vector3D = require('./math/Vector3');\nconst Line3D = require('./math/Line3');\nconst Matrix4x4 = require('./math/Matrix4');\nconst OrthoNormalBasis = require('./math/OrthoNormalBasis');\nconst Plane = require('./math/Plane');\n\n// # class Connector\n// A connector allows to attach two objects at predefined positions\n// For example a servo motor and a servo horn:\n// Both can have a Connector called 'shaft'\n// The horn can be moved and rotated such that the two connectors match\n// and the horn is attached to the servo motor at the proper position.\n// Connectors are stored in the properties of a CSG solid so they are\n// ge the same transformations applied as the solid\nconst Connector = function (point, axisvector, normalvector) {\n  this.point = new Vector3D(point);\n  this.axisvector = new Vector3D(axisvector).unit();\n  this.normalvector = new Vector3D(normalvector).unit();\n};\n\nConnector.prototype = {\n  normalized: function () {\n    let axisvector = this.axisvector.unit();\n    // make the normal vector truly normal:\n    let n = this.normalvector.cross(axisvector).unit();\n    let normalvector = axisvector.cross(n);\n    return new Connector(this.point, axisvector, normalvector);\n  },\n\n  transform: function (matrix4x4) {\n    let point = this.point.multiply4x4(matrix4x4);\n    let axisvector = this.point.plus(this.axisvector).multiply4x4(matrix4x4).minus(point);\n    let normalvector = this.point.plus(this.normalvector).multiply4x4(matrix4x4).minus(point);\n    return new Connector(point, axisvector, normalvector);\n  },\n\n  // Get the transformation matrix to connect this Connector to another connector\n  //   other: a Connector to which this connector should be connected\n  //   mirror: false: the 'axis' vectors of the connectors should point in the same direction\n  //           true: the 'axis' vectors of the connectors should point in opposite direction\n  //   normalrotation: degrees of rotation between the 'normal' vectors of the two\n  //                   connectors\n  getTransformationTo: function (other, mirror, normalrotation) {\n    mirror = mirror ? true : false;\n    normalrotation = normalrotation ? Number(normalrotation) : 0;\n    let us = this.normalized();\n    other = other.normalized();\n    // shift to the origin:\n    let transformation = Matrix4x4.translation(this.point.negated());\n    // construct the plane crossing through the origin and the two axes:\n    let axesplane = Plane.anyPlaneFromVector3Ds(\n      new Vector3D(0, 0, 0), us.axisvector, other.axisvector);\n    let axesbasis = new OrthoNormalBasis(axesplane);\n    let angle1 = axesbasis.to2D(us.axisvector).angle();\n    let angle2 = axesbasis.to2D(other.axisvector).angle();\n    let rotation = 180.0 * (angle2 - angle1) / Math.PI;\n    if (mirror) rotation += 180.0;\n    transformation = transformation.multiply(axesbasis.getProjectionMatrix());\n    transformation = transformation.multiply(Matrix4x4.rotationZ(rotation));\n    transformation = transformation.multiply(axesbasis.getInverseProjectionMatrix());\n    let usAxesAligned = us.transform(transformation);\n    // Now we have done the transformation for aligning the axes.\n    // We still need to align the normals:\n    let normalsplane = Plane.fromNormalAndPoint(other.axisvector, new Vector3D(0, 0, 0));\n    let normalsbasis = new OrthoNormalBasis(normalsplane);\n    angle1 = normalsbasis.to2D(usAxesAligned.normalvector).angle();\n    angle2 = normalsbasis.to2D(other.normalvector).angle();\n    rotation = 180.0 * (angle2 - angle1) / Math.PI;\n    rotation += normalrotation;\n    transformation = transformation.multiply(normalsbasis.getProjectionMatrix());\n    transformation = transformation.multiply(Matrix4x4.rotationZ(rotation));\n    transformation = transformation.multiply(normalsbasis.getInverseProjectionMatrix());\n    // and translate to the destination point:\n    transformation = transformation.multiply(Matrix4x4.translation(other.point));\n    // let usAligned = us.transform(transformation);\n    return transformation;\n  },\n\n  axisLine: function () {\n    return new Line3D(this.point, this.axisvector);\n  },\n\n  // creates a new Connector, with the connection point moved in the direction of the axisvector\n  extend: function (distance) {\n    let newpoint = this.point.plus(this.axisvector.unit().times(distance));\n    return new Connector(newpoint, this.axisvector, this.normalvector);\n  }\n};\n\nconst ConnectorList = function (connectors) {\n  this.connectors_ = connectors ? connectors.slice() : [];\n};\n\nConnectorList.defaultNormal = [0, 0, 1];\n\nConnectorList.fromPath2D = function (path2D, arg1, arg2) {\n  if (arguments.length === 3) {\n    return ConnectorList._fromPath2DTangents(path2D, arg1, arg2);\n  } else if (arguments.length === 2) {\n    return ConnectorList._fromPath2DExplicit(path2D, arg1);\n  } else {\n    throw new Error('call with path2D and either 2 direction vectors, or a function returning direction vectors');\n  }\n};\n\n/*\n * calculate the connector axisvectors by calculating the \"tangent\" for path2D.\n * This is undefined for start and end points, so axis for these have to be manually\n * provided.\n */\nConnectorList._fromPath2DTangents = function (path2D, start, end) {\n  // path2D\n  let axis;\n  let pathLen = path2D.points.length;\n  let result = new ConnectorList([new Connector(path2D.points[0],\n    start, ConnectorList.defaultNormal)]);\n  // middle points\n  path2D.points.slice(1, pathLen - 1).forEach(function (p2, i) {\n    axis = path2D.points[i + 2].minus(path2D.points[i]).toVector3D(0);\n    result.appendConnector(new Connector(p2.toVector3D(0), axis,\n      ConnectorList.defaultNormal));\n  }, this);\n  result.appendConnector(new Connector(path2D.points[pathLen - 1], end,\n    ConnectorList.defaultNormal));\n  result.closed = path2D.closed;\n  return result;\n};\n\n/*\n * angleIsh: either a static angle, or a function(point) returning an angle\n */\nConnectorList._fromPath2DExplicit = function (path2D, angleIsh) {\n  function getAngle(angleIsh, pt, i) {\n    if (typeof angleIsh === 'function') {\n      angleIsh = angleIsh(pt, i);\n    }\n    return angleIsh;\n  }\n\n  let result = new ConnectorList(\n    path2D.points.map(function (p2, i) {\n      return new Connector(p2.toVector3D(0),\n        Vector3D.Create(1, 0, 0).rotateZ(getAngle(angleIsh, p2, i)),\n        ConnectorList.defaultNormal);\n    }, this)\n  );\n  result.closed = path2D.closed;\n  return result;\n};\n\nConnectorList.prototype = {\n  setClosed: function (closed) {\n    this.closed = !!closed;\n  },\n  appendConnector: function (conn) {\n    this.connectors_.push(conn);\n  },\n  /*\n   * arguments: cagish: a cag or a function(connector) returning a cag\n   *            closed: whether the 3d path defined by connectors location\n   *              should be closed or stay open\n   *              Note: don't duplicate connectors in the path\n   * TODO: consider an option \"maySelfIntersect\" to close & force union all single segments\n   */\n  followWith: function (cagish) {\n    const CSG = require('./CSG'); // FIXME , circular dependency connectors => CSG => connectors\n\n    this.verify();\n\n    function getCag(cagish, connector) {\n      if (typeof cagish === 'function') {\n        cagish = cagish(connector.point, connector.axisvector, connector.normalvector);\n      }\n      return cagish;\n    }\n\n    let polygons = [];\n    let currCag;\n    let prevConnector = this.connectors_[this.connectors_.length - 1];\n    let prevCag = getCag(cagish, prevConnector);\n    // add walls\n    this.connectors_.forEach(function (connector, notFirst) {\n      currCag = getCag(cagish, connector);\n      if (notFirst || this.closed) {\n        polygons.push.apply(polygons, prevCag._toWallPolygons({\n          toConnector1: prevConnector, toConnector2: connector, cag: currCag\n        }));\n      } else {\n        // it is the first, and shape not closed -> build start wall\n        polygons.push.apply(polygons,\n          currCag._toPlanePolygons({toConnector: connector, flipped: true}));\n      }\n      if (notFirst === this.connectors_.length - 1 && !this.closed) {\n        // build end wall\n        polygons.push.apply(polygons,\n          currCag._toPlanePolygons({toConnector: connector}));\n      }\n      prevCag = currCag;\n      prevConnector = connector;\n    }, this);\n    return CSG.fromPolygons(polygons).reTesselated().canonicalized();\n  },\n  /*\n   * general idea behind these checks: connectors need to have smooth transition from one to another\n   * TODO: add a check that 2 follow-on CAGs are not intersecting\n   */\n  verify: function () {\n    let connI;\n    let connI1;\n    for (let i = 0; i < this.connectors_.length - 1; i++) {\n      connI = this.connectors_[i];\n      connI1 = this.connectors_[i + 1];\n      if (connI1.point.minus(connI.point).dot(connI.axisvector) <= 0) {\n        throw new Error('Invalid ConnectorList. Each connectors position needs to be within a <90deg range of previous connectors axisvector');\n      }\n      if (connI.axisvector.dot(connI1.axisvector) <= 0) {\n        throw new Error('invalid ConnectorList. No neighboring connectors axisvectors may span a >=90deg angle');\n      }\n    }\n  }\n};\n\nmodule.exports = {Connector, ConnectorList};\n","const Vector3D = require('../core/math/Vector3');\nconst Vector2D = require('../core/math/Vector2');\n\n// Parse an option from the options object\n// If the option is not present, return the default value\nconst parseOption = function (options, optionname, defaultvalue) {\n  var result = defaultvalue;\n  if (options && optionname in options) {\n    result = options[optionname];\n  }\n  return result;\n};\n\n// Parse an option and force into a Vector3D. If a scalar is passed it is converted\n// into a vector with equal x,y,z\nconst parseOptionAs3DVector = function (options, optionname, defaultvalue) {\n  var result = parseOption(options, optionname, defaultvalue);\n  result = new Vector3D(result);\n  return result;\n};\n\nconst parseOptionAs3DVectorList = function (options, optionname, defaultvalue) {\n  var result = parseOption(options, optionname, defaultvalue);\n  return result.map(function (res) {\n    return new Vector3D(res);\n  });\n};\n\n// Parse an option and force into a Vector2D. If a scalar is passed it is converted\n// into a vector with equal x,y\nconst parseOptionAs2DVector = function (options, optionname, defaultvalue) {\n  var result = parseOption(options, optionname, defaultvalue);\n  result = new Vector2D(result);\n  return result;\n};\n\nconst parseOptionAsFloat = function (options, optionname, defaultvalue) {\n  var result = parseOption(options, optionname, defaultvalue);\n  if (typeof (result) === 'string') {\n    result = Number(result);\n  }\n  if (isNaN(result) || typeof (result) !== 'number') {\n    throw new Error('Parameter ' + optionname + ' should be a number');\n  }\n  return result;\n};\n\nconst parseOptionAsInt = function (options, optionname, defaultvalue) {\n  var result = parseOption(options, optionname, defaultvalue);\n  result = Number(Math.floor(result));\n  if (isNaN(result)) {\n    throw new Error('Parameter ' + optionname + ' should be a number');\n  }\n  return result;\n};\n\nconst parseOptionAsBool = function (options, optionname, defaultvalue) {\n  var result = parseOption(options, optionname, defaultvalue);\n  if (typeof (result) === 'string') {\n    if (result === 'true') result = true;\n    else if (result === 'false') result = false;\n    else if (result === 0) result = false;\n  }\n  result = !!result;\n  return result;\n};\n\nmodule.exports = {\n  parseOption,\n  parseOptionAsInt,\n  parseOptionAsFloat,\n  parseOptionAsBool,\n  parseOptionAs3DVector,\n  parseOptionAs2DVector,\n  parseOptionAs3DVectorList\n};\n","const Tree = require('./trees');\nconst Polygon = require('./math/Polygon3');\nconst Plane = require('./math/Plane');\nconst OrthoNormalBasis = require('./math/OrthoNormalBasis');\n\nconst CAG = require('./CAG'); // FIXME: for some weird reason if CAG is imported AFTER frompolygons, a lot of things break???\n\nconst Properties = require('./Properties');\nconst {fromPolygons} = require('./CSGFactories'); // FIXME: circular dependency !\n\nconst fixTJunctions = require('./utils/fixTJunctions');\nconst canonicalize = require('./utils/canonicalize');\nconst retesselate = require('./utils/retesellate');\nconst {bounds} = require('./utils/csgMeasurements');\nconst {projectToOrthoNormalBasis} = require('./utils/csgProjections');\n\nconst {lieFlat, getTransformationToFlatLying, getTransformationAndInverseTransformationToFlatLying} = require('../api/ops-cnc');\nconst {sectionCut, cutByPlane} = require('../api/ops-cuts');\nconst center = require('../api/center');\nconst {expand, contract, expandedShellOfCCSG} = require('../api/ops-expandContract');\n\n/** Class CSG\n * Holds a binary space partition tree representing a 3D solid. Two solids can\n * be combined using the `union()`, `subtract()`, and `intersect()` methods.\n * @constructor\n */\nlet CSG = function () {\n  this.polygons = [];\n  this.properties = new Properties();\n  this.isCanonicalized = true;\n  this.isRetesselated = true;\n};\n\nCSG.prototype = {\n  /**\n   * Return a new CSG solid representing the space in either this solid or\n   * in the given solids. Neither this solid nor the given solids are modified.\n   * @param {CSG[]} csg - list of CSG objects\n   * @returns {CSG} new CSG object\n   * @example\n   * let C = A.union(B)\n   * @example\n   * +-------+            +-------+\n   * |       |            |       |\n   * |   A   |            |       |\n   * |    +--+----+   =   |       +----+\n   * +----+--+    |       +----+       |\n   *      |   B   |            |       |\n   *      |       |            |       |\n   *      +-------+            +-------+\n   */\n  union: function (csg) {\n    let csgs;\n    if (csg instanceof Array) {\n      csgs = csg.slice(0);\n      csgs.push(this);\n    } else {\n      csgs = [this, csg];\n    }\n\n    let i;\n    // combine csg pairs in a way that forms a balanced binary tree pattern\n    for (i = 1; i < csgs.length; i += 2) {\n      csgs.push(csgs[i - 1].unionSub(csgs[i]));\n    }\n    return csgs[i - 1].reTesselated().canonicalized();\n  },\n\n  unionSub: function (csg, retesselate, canonicalize) {\n    if (!this.mayOverlap(csg)) {\n      return this.unionForNonIntersecting(csg);\n    } else {\n      let a = new Tree(this.polygons);\n      let b = new Tree(csg.polygons);\n      a.clipTo(b, false);\n\n      // b.clipTo(a, true); // ERROR: this doesn't work\n      b.clipTo(a);\n      b.invert();\n      b.clipTo(a);\n      b.invert();\n\n      let newpolygons = a.allPolygons().concat(b.allPolygons());\n      let result = fromPolygons(newpolygons);\n      result.properties = this.properties._merge(csg.properties);\n      if (retesselate) result = result.reTesselated();\n      if (canonicalize) result = result.canonicalized();\n      return result;\n    }\n  },\n\n  // Like union, but when we know that the two solids are not intersecting\n  // Do not use if you are not completely sure that the solids do not intersect!\n  unionForNonIntersecting: function (csg) {\n    let newpolygons = this.polygons.concat(csg.polygons);\n    let result = fromPolygons(newpolygons);\n    result.properties = this.properties._merge(csg.properties);\n    result.isCanonicalized = this.isCanonicalized && csg.isCanonicalized;\n    result.isRetesselated = this.isRetesselated && csg.isRetesselated;\n    return result;\n  },\n\n  /**\n   * Return a new CSG solid representing space in this solid but\n   * not in the given solids. Neither this solid nor the given solids are modified.\n   * @param {CSG[]} csg - list of CSG objects\n   * @returns {CSG} new CSG object\n   * @example\n   * let C = A.subtract(B)\n   * @example\n   * +-------+            +-------+\n   * |       |            |       |\n   * |   A   |            |       |\n   * |    +--+----+   =   |    +--+\n   * +----+--+    |       +----+\n   *      |   B   |\n   *      |       |\n   *      +-------+\n   */\n  subtract: function (csg) {\n    let csgs;\n    if (csg instanceof Array) {\n      csgs = csg;\n    } else {\n      csgs = [csg];\n    }\n    let result = this;\n    for (let i = 0; i < csgs.length; i++) {\n      let islast = (i === (csgs.length - 1));\n      result = result.subtractSub(csgs[i], islast, islast);\n    }\n    return result;\n  },\n\n  subtractSub: function (csg, retesselate, canonicalize) {\n    let a = new Tree(this.polygons);\n    let b = new Tree(csg.polygons);\n    a.invert();\n    a.clipTo(b);\n    b.clipTo(a, true);\n    a.addPolygons(b.allPolygons());\n    a.invert();\n    let result = fromPolygons(a.allPolygons());\n    result.properties = this.properties._merge(csg.properties);\n    if (retesselate) result = result.reTesselated();\n    if (canonicalize) result = result.canonicalized();\n    return result;\n  },\n\n  /**\n   * Return a new CSG solid representing space in both this solid and\n   * in the given solids. Neither this solid nor the given solids are modified.\n   * @param {CSG[]} csg - list of CSG objects\n   * @returns {CSG} new CSG object\n   * @example\n   * let C = A.intersect(B)\n   * @example\n   * +-------+\n   * |       |\n   * |   A   |\n   * |    +--+----+   =   +--+\n   * +----+--+    |       +--+\n   *      |   B   |\n   *      |       |\n   *      +-------+\n   */\n  intersect: function (csg) {\n    let csgs;\n    if (csg instanceof Array) {\n      csgs = csg;\n    } else {\n      csgs = [csg];\n    }\n    let result = this;\n    for (let i = 0; i < csgs.length; i++) {\n      let islast = (i === (csgs.length - 1));\n      result = result.intersectSub(csgs[i], islast, islast);\n    }\n    return result;\n  },\n\n  intersectSub: function (csg, retesselate, canonicalize) {\n    let a = new Tree(this.polygons);\n    let b = new Tree(csg.polygons);\n    a.invert();\n    b.clipTo(a);\n    b.invert();\n    a.clipTo(b);\n    b.clipTo(a);\n    a.addPolygons(b.allPolygons());\n    a.invert();\n    let result = fromPolygons(a.allPolygons());\n    result.properties = this.properties._merge(csg.properties);\n    if (retesselate) result = result.reTesselated();\n    if (canonicalize) result = result.canonicalized();\n    return result;\n  },\n\n  /**\n   * Return a new CSG solid with solid and empty space switched.\n   * This solid is not modified.\n   * @returns {CSG} new CSG object\n   * @example\n   * let B = A.invert()\n   */\n  invert: function () {\n    let flippedpolygons = this.polygons.map(function (p) {\n      return p.flipped();\n    });\n    return fromPolygons(flippedpolygons);\n    // TODO: flip properties?\n  },\n\n  // Affine transformation of CSG object. Returns a new CSG object\n  transform1: function (matrix4x4) {\n    let newpolygons = this.polygons.map(function (p) {\n      return p.transform(matrix4x4);\n    });\n    let result = fromPolygons(newpolygons);\n    result.properties = this.properties._transform(matrix4x4);\n    result.isRetesselated = this.isRetesselated;\n    return result;\n  },\n\n  /**\n   * Return a new CSG solid that is transformed using the given Matrix.\n   * Several matrix transformations can be combined before transforming this solid.\n   * @param {CSG.Matrix4x4} matrix4x4 - matrix to be applied\n   * @returns {CSG} new CSG object\n   * @example\n   * var m = new CSG.Matrix4x4()\n   * m = m.multiply(CSG.Matrix4x4.rotationX(40))\n   * m = m.multiply(CSG.Matrix4x4.translation([-.5, 0, 0]))\n   * let B = A.transform(m)\n   */\n  transform: function (matrix4x4) {\n    let ismirror = matrix4x4.isMirroring();\n    let transformedvertices = {};\n    let transformedplanes = {};\n    let newpolygons = this.polygons.map(function (p) {\n      let newplane;\n      let plane = p.plane;\n      let planetag = plane.getTag();\n      if (planetag in transformedplanes) {\n        newplane = transformedplanes[planetag];\n      } else {\n        newplane = plane.transform(matrix4x4);\n        transformedplanes[planetag] = newplane;\n      }\n      let newvertices = p.vertices.map(function (v) {\n        let newvertex;\n        let vertextag = v.getTag();\n        if (vertextag in transformedvertices) {\n          newvertex = transformedvertices[vertextag];\n        } else {\n          newvertex = v.transform(matrix4x4);\n          transformedvertices[vertextag] = newvertex;\n        }\n        return newvertex;\n      });\n      if (ismirror) newvertices.reverse();\n      return new Polygon(newvertices, p.shared, newplane);\n    });\n    let result = fromPolygons(newpolygons);\n    result.properties = this.properties._transform(matrix4x4);\n    result.isRetesselated = this.isRetesselated;\n    result.isCanonicalized = this.isCanonicalized;\n    return result;\n  },\n\n  // ALIAS !\n  center: function (axes) {\n    return center({axes: axes}, [this]);\n  },\n\n  // ALIAS !\n  expand: function (radius, resolution) {\n    return expand(this, radius, resolution);\n  },\n\n  // ALIAS !\n  contract: function (radius, resolution) {\n    return contract(this, radius, resolution);\n  },\n\n  // ALIAS !\n  expandedShell: function (radius, resolution, unionWithThis) {\n    return expandedShellOfCCSG(this, radius, resolution, unionWithThis);\n  },\n\n  // cut the solid at a plane, and stretch the cross-section found along plane normal\n  // note: only used in roundedCube() internally\n  stretchAtPlane: function (normal, point, length) {\n    let plane = Plane.fromNormalAndPoint(normal, point);\n    let onb = new OrthoNormalBasis(plane);\n    let crosssect = this.sectionCut(onb);\n    let midpiece = crosssect.extrudeInOrthonormalBasis(onb, length);\n    let piece1 = this.cutByPlane(plane);\n    let piece2 = this.cutByPlane(plane.flipped());\n    let result = piece1.union([midpiece, piece2.translate(plane.normal.times(length))]);\n    return result;\n  },\n\n  // ALIAS !\n  canonicalized: function () {\n    return canonicalize(this);\n  },\n\n  // ALIAS !\n  reTesselated: function () {\n    return retesselate(this);\n  },\n\n  // ALIAS !\n  fixTJunctions: function () {\n    return fixTJunctions(fromPolygons, this);\n  },\n\n  // ALIAS !\n  getBounds: function () {\n    return bounds(this);\n  },\n\n  /** returns true if there is a possibility that the two solids overlap\n   * returns false if we can be sure that they do not overlap\n   * NOTE: this is critical as it is used in UNIONs\n   * @param  {CSG} csg\n   */\n  mayOverlap: function (csg) {\n    if ((this.polygons.length === 0) || (csg.polygons.length === 0)) {\n      return false;\n    } else {\n      let mybounds = bounds(this);\n      let otherbounds = bounds(csg);\n      if (mybounds[1].x < otherbounds[0].x) return false;\n      if (mybounds[0].x > otherbounds[1].x) return false;\n      if (mybounds[1].y < otherbounds[0].y) return false;\n      if (mybounds[0].y > otherbounds[1].y) return false;\n      if (mybounds[1].z < otherbounds[0].z) return false;\n      if (mybounds[0].z > otherbounds[1].z) return false;\n      return true;\n    }\n  },\n\n  // ALIAS !\n  cutByPlane: function (plane) {\n    return cutByPlane(this, plane);\n  },\n\n  /**\n   * Connect a solid to another solid, such that two Connectors become connected\n   * @param  {Connector} myConnector a Connector of this solid\n   * @param  {Connector} otherConnector a Connector to which myConnector should be connected\n   * @param  {Boolean} mirror false: the 'axis' vectors of the connectors should point in the same direction\n   * true: the 'axis' vectors of the connectors should point in opposite direction\n   * @param  {Float} normalrotation degrees of rotation between the 'normal' vectors of the two\n   * connectors\n   * @returns {CSG} this csg, tranformed accordingly\n   */\n  connectTo: function (myConnector, otherConnector, mirror, normalrotation) {\n    let matrix = myConnector.getTransformationTo(otherConnector, mirror, normalrotation);\n    return this.transform(matrix);\n  },\n\n  /**\n   * set the .shared property of all polygons\n   * @param  {Object} shared\n   * @returns {CSG} Returns a new CSG solid, the original is unmodified!\n   */\n  setShared: function (shared) {\n    let polygons = this.polygons.map(function (p) {\n      return new Polygon(p.vertices, shared, p.plane);\n    });\n    let result = fromPolygons(polygons);\n    result.properties = this.properties; // keep original properties\n    result.isRetesselated = this.isRetesselated;\n    result.isCanonicalized = this.isCanonicalized;\n    return result;\n  },\n\n  /** sets the color of this csg: non mutating, returns a new CSG\n   * @param  {Object} args\n   * @returns {CSG} a copy of this CSG, with the given color\n   */\n  setColor: function (args) {\n    let newshared = Polygon.Shared.fromColor.apply(this, arguments);\n    return this.setShared(newshared);\n  },\n\n  // ALIAS !\n  getTransformationAndInverseTransformationToFlatLying: function () {\n    return getTransformationAndInverseTransformationToFlatLying(this);\n  },\n\n  // ALIAS !\n  getTransformationToFlatLying: function () {\n    return getTransformationToFlatLying(this);\n  },\n\n  // ALIAS !\n  lieFlat: function () {\n    return lieFlat(this);\n  },\n\n  // project the 3D CSG onto a plane\n  // This returns a 2D CAG with the 'shadow' shape of the 3D solid when projected onto the\n  // plane represented by the orthonormal basis\n  projectToOrthoNormalBasis: function (orthobasis) {\n    // FIXME:  DEPENDS ON CAG !!\n    return projectToOrthoNormalBasis(this, orthobasis);\n  },\n\n  // FIXME: not finding any uses within our code ?\n  sectionCut: function (orthobasis) {\n    return sectionCut(this, orthobasis);\n  },\n\n  /**\n   * Returns an array of values for the requested features of this solid.\n   * Supported Features: 'volume', 'area'\n   * @param {String[]} features - list of features to calculate\n   * @returns {Float[]} values\n   * @example\n   * let volume = A.getFeatures('volume')\n   * let values = A.getFeatures('area','volume')\n   */\n  getFeatures: function (features) {\n    if (!(features instanceof Array)) {\n      features = [features];\n    }\n    let result = this.toTriangles().map(function (triPoly) {\n      return triPoly.getTetraFeatures(features);\n    })\n      .reduce(function (pv, v) {\n        return v.map(function (feat, i) {\n          return feat + (pv === 0 ? 0 : pv[i]);\n        });\n      }, 0);\n    return (result.length === 1) ? result[0] : result;\n  },\n  /** @return {Polygon[]} The list of polygons. */\n  toPolygons: function () {\n    return this.polygons;\n  },\n\n  toString: function () {\n    let result = 'CSG solid:\\n';\n    this.polygons.map(function (p) {\n      result += p.toString();\n    });\n    return result;\n  },\n\n  /** returns a compact binary representation of this csg\n   * usually used to transfer CSG objects to/from webworkes\n   * NOTE: very interesting compact format, with a lot of reusable ideas\n   * @returns {Object} compact binary representation of a CSG\n   */\n  toCompactBinary: function () {\n    let csg = this.canonicalized();\n    let numpolygons = csg.polygons.length;\n    let numpolygonvertices = 0;\n\n    let numvertices = 0;\n    let vertexmap = {};\n    let vertices = [];\n\n    let numplanes = 0;\n    let planemap = {};\n    let planes = [];\n\n    let shareds = [];\n    let sharedmap = {};\n    let numshared = 0;\n    // for (let i = 0, iMax = csg.polygons.length; i < iMax; i++) {\n    //  let p = csg.polygons[i];\n    //  for (let j = 0, jMax = p.length; j < jMax; j++) {\n    //      ++numpolygonvertices;\n    //      let vertextag = p[j].getTag();\n    //      if(!(vertextag in vertexmap)) {\n    //          vertexmap[vertextag] = numvertices++;\n    //          vertices.push(p[j]);\n    //      }\n    //  }\n    csg.polygons.map(function (polygon) {\n      // FIXME: why use map if we do not return anything ?\n      // either for... or forEach\n      polygon.vertices.map(function (vertex) {\n        ++numpolygonvertices;\n        let vertextag = vertex.getTag();\n        if (!(vertextag in vertexmap)) {\n          vertexmap[vertextag] = numvertices++;\n          vertices.push(vertex);\n        }\n      });\n\n      let planetag = polygon.plane.getTag();\n      if (!(planetag in planemap)) {\n        planemap[planetag] = numplanes++;\n        planes.push(polygon.plane);\n      }\n      let sharedtag = polygon.shared.getTag();\n      if (!(sharedtag in sharedmap)) {\n        sharedmap[sharedtag] = numshared++;\n        shareds.push(polygon.shared);\n      }\n    });\n\n    let numVerticesPerPolygon = new Uint32Array(numpolygons);\n    let polygonSharedIndexes = new Uint32Array(numpolygons);\n    let polygonVertices = new Uint32Array(numpolygonvertices);\n    let polygonPlaneIndexes = new Uint32Array(numpolygons);\n    let vertexData = new Float64Array(numvertices * 3);\n    let planeData = new Float64Array(numplanes * 4);\n    let polygonVerticesIndex = 0;\n\n    // FIXME: doublecheck : why does it go through the whole polygons again?\n    // can we optimise that ? (perhap due to needing size to init buffers above)\n    for (let polygonindex = 0; polygonindex < numpolygons; ++polygonindex) {\n      let polygon = csg.polygons[polygonindex];\n      numVerticesPerPolygon[polygonindex] = polygon.vertices.length;\n      polygon.vertices.map(function (vertex) {\n        let vertextag = vertex.getTag();\n        let vertexindex = vertexmap[vertextag];\n        polygonVertices[polygonVerticesIndex++] = vertexindex;\n      });\n      let planetag = polygon.plane.getTag();\n      let planeindex = planemap[planetag];\n      polygonPlaneIndexes[polygonindex] = planeindex;\n      let sharedtag = polygon.shared.getTag();\n      let sharedindex = sharedmap[sharedtag];\n      polygonSharedIndexes[polygonindex] = sharedindex;\n    }\n    let verticesArrayIndex = 0;\n    vertices.map(function (vertex) {\n      const pos = vertex.pos;\n      vertexData[verticesArrayIndex++] = pos._x;\n      vertexData[verticesArrayIndex++] = pos._y;\n      vertexData[verticesArrayIndex++] = pos._z;\n    });\n    let planesArrayIndex = 0;\n    planes.map(function (plane) {\n      const normal = plane.normal;\n      planeData[planesArrayIndex++] = normal._x;\n      planeData[planesArrayIndex++] = normal._y;\n      planeData[planesArrayIndex++] = normal._z;\n      planeData[planesArrayIndex++] = plane.w;\n    });\n\n    let result = {\n      'class': 'CSG',\n      numPolygons: numpolygons,\n      numVerticesPerPolygon: numVerticesPerPolygon,\n      polygonPlaneIndexes: polygonPlaneIndexes,\n      polygonSharedIndexes: polygonSharedIndexes,\n      polygonVertices: polygonVertices,\n      vertexData: vertexData,\n      planeData: planeData,\n      shared: shareds\n    };\n    return result;\n  },\n\n  /** returns the triangles of this csg\n   * @returns {Polygons} triangulated polygons\n   */\n  toTriangles: function () {\n    let polygons = [];\n    this.polygons.forEach(function (poly) {\n      let firstVertex = poly.vertices[0];\n      for (let i = poly.vertices.length - 3; i >= 0; i--) {\n        polygons.push(new Polygon(\n          [\n            firstVertex,\n            poly.vertices[i + 1],\n            poly.vertices[i + 2]\n          ],\n          poly.shared,\n          poly.plane));\n      }\n    });\n    return polygons;\n  }\n};\n\nmodule.exports = CSG;\n","// -- 3D transformations (OpenSCAD like notion)\n\nexport {translate} from './translate';\nexport {scale} from './scale';\nexport {rotate} from './rotate';\nexport {transform} from './transform';\nexport {center} from './center';\nexport {mirror} from './mirror';\nexport {expand} from './expand';\nexport {contract} from './contract';\nexport {minkowski} from './minkowski';\nexport {hull} from './hull';\nexport {chain_hull} from './chain_hull';\n","const Vector3D = require('./Vector3');\nconst {EPS} = require('../constants');\nconst {solve2Linear} = require('../utils');\n\n// # class Line3D\n// Represents a line in 3D space\n// direction must be a unit vector\n// point is a random point on the line\nconst Line3D = function (point, direction) {\n  point = new Vector3D(point);\n  direction = new Vector3D(direction);\n  this.point = point;\n  this.direction = direction.unit();\n};\n\nLine3D.fromPoints = function (p1, p2) {\n  p1 = new Vector3D(p1);\n  p2 = new Vector3D(p2);\n  let direction = p2.minus(p1);\n  return new Line3D(p1, direction);\n};\n\nLine3D.fromPlanes = function (p1, p2) {\n  let direction = p1.normal.cross(p2.normal);\n  let l = direction.length();\n  if (l < EPS) {\n    throw new Error('Parallel planes');\n  }\n  direction = direction.times(1.0 / l);\n\n  let mabsx = Math.abs(direction.x);\n  let mabsy = Math.abs(direction.y);\n  let mabsz = Math.abs(direction.z);\n  let origin;\n  if ((mabsx >= mabsy) && (mabsx >= mabsz)) {\n    // direction vector is mostly pointing towards x\n    // find a point p for which x is zero:\n    let r = solve2Linear(p1.normal.y, p1.normal.z, p2.normal.y, p2.normal.z, p1.w, p2.w);\n    origin = new Vector3D(0, r[0], r[1]);\n  } else if ((mabsy >= mabsx) && (mabsy >= mabsz)) {\n    // find a point p for which y is zero:\n    let r = solve2Linear(p1.normal.x, p1.normal.z, p2.normal.x, p2.normal.z, p1.w, p2.w);\n    origin = new Vector3D(r[0], 0, r[1]);\n  } else {\n    // find a point p for which z is zero:\n    let r = solve2Linear(p1.normal.x, p1.normal.y, p2.normal.x, p2.normal.y, p1.w, p2.w);\n    origin = new Vector3D(r[0], r[1], 0);\n  }\n  return new Line3D(origin, direction);\n};\n\nLine3D.prototype = {\n  intersectWithPlane: function (plane) {\n    // plane: plane.normal * p = plane.w\n    // line: p=line.point + labda * line.direction\n    let labda = (plane.w - plane.normal.dot(this.point)) / plane.normal.dot(this.direction);\n    let point = this.point.plus(this.direction.times(labda));\n    return point;\n  },\n\n  clone: function (line) {\n    return new Line3D(this.point.clone(), this.direction.clone());\n  },\n\n  reverse: function () {\n    return new Line3D(this.point.clone(), this.direction.negated());\n  },\n\n  transform: function (matrix4x4) {\n    let newpoint = this.point.multiply4x4(matrix4x4);\n    let pointPlusDirection = this.point.plus(this.direction);\n    let newPointPlusDirection = pointPlusDirection.multiply4x4(matrix4x4);\n    let newdirection = newPointPlusDirection.minus(newpoint);\n    return new Line3D(newpoint, newdirection);\n  },\n\n  closestPointOnLine: function (point) {\n    point = new Vector3D(point);\n    let t = point.minus(this.point).dot(this.direction) / this.direction.dot(this.direction);\n    let closestpoint = this.point.plus(this.direction.times(t));\n    return closestpoint;\n  },\n\n  distanceToPoint: function (point) {\n    point = new Vector3D(point);\n    let closestpoint = this.closestPointOnLine(point);\n    let distancevector = point.minus(closestpoint);\n    let distance = distancevector.length();\n    return distance;\n  },\n\n  equals: function (line3d) {\n    if (!this.direction.equals(line3d.direction)) return false;\n    let distance = this.distanceToPoint(line3d.point);\n    if (distance > EPS) return false;\n    return true;\n  }\n};\n\nmodule.exports = Line3D;\n","const Vector2D = require('./Vector2');\nconst Vertex = require('./Vertex2');\nconst Vertex3 = require('./Vertex3');\nconst Polygon = require('./Polygon3');\nconst {getTag} = require('../constants');\n\nconst Side = function (vertex0, vertex1) {\n  if (!(vertex0 instanceof Vertex)) throw new Error('Assertion failed');\n  if (!(vertex1 instanceof Vertex)) throw new Error('Assertion failed');\n  this.vertex0 = vertex0;\n  this.vertex1 = vertex1;\n};\n\nSide.fromObject = function (obj) {\n  var vertex0 = Vertex.fromObject(obj.vertex0);\n  var vertex1 = Vertex.fromObject(obj.vertex1);\n  return new Side(vertex0, vertex1);\n};\n\nSide._fromFakePolygon = function (polygon) {\n  // this can happen based on union, seems to be residuals -\n  // return null and handle in caller\n  if (polygon.vertices.length < 4) {\n    return null;\n  }\n  var vert1Indices = [];\n  var pts2d = polygon.vertices.filter(function (v, i) {\n    if (v.pos.z > 0) {\n      vert1Indices.push(i);\n      return true;\n    }\n    return false;\n  })\n    .map(function (v) {\n      return new Vector2D(v.pos.x, v.pos.y);\n    });\n  if (pts2d.length !== 2) {\n    throw new Error('Assertion failed: _fromFakePolygon: not enough points found');\n  }\n  var d = vert1Indices[1] - vert1Indices[0];\n  if (d === 1 || d === 3) {\n    if (d === 1) {\n      pts2d.reverse();\n    }\n  } else {\n    throw new Error('Assertion failed: _fromFakePolygon: unknown index ordering');\n  }\n  var result = new Side(new Vertex(pts2d[0]), new Vertex(pts2d[1]));\n  return result;\n};\n\nSide.prototype = {\n  toString: function () {\n    return this.vertex0 + ' -> ' + this.vertex1;\n  },\n\n  toPolygon3D: function (z0, z1) {\n    // console.log(this.vertex0.pos)\n    const vertices = [\n      new Vertex3(this.vertex0.pos.toVector3D(z0)),\n      new Vertex3(this.vertex1.pos.toVector3D(z0)),\n      new Vertex3(this.vertex1.pos.toVector3D(z1)),\n      new Vertex3(this.vertex0.pos.toVector3D(z1))\n    ];\n    return new Polygon(vertices);\n  },\n\n  transform: function (matrix4x4) {\n    var newp1 = this.vertex0.pos.transform(matrix4x4);\n    var newp2 = this.vertex1.pos.transform(matrix4x4);\n    return new Side(new Vertex(newp1), new Vertex(newp2));\n  },\n\n  flipped: function () {\n    return new Side(this.vertex1, this.vertex0);\n  },\n\n  direction: function () {\n    return this.vertex1.pos.minus(this.vertex0.pos);\n  },\n\n  getTag: function () {\n    var result = this.tag;\n    if (!result) {\n      result = getTag();\n      this.tag = result;\n    }\n    return result;\n  },\n\n  lengthSquared: function () {\n    let x = this.vertex1.pos.x - this.vertex0.pos.x;\n    let y = this.vertex1.pos.y - this.vertex0.pos.y;\n    return x * x + y * y;\n  },\n\n  length: function () {\n    return Math.sqrt(this.lengthSquared());\n  }\n};\n\nmodule.exports = Side;\n","const Vector2D = require('./Vector2');\nconst {getTag} = require('../constants');\n\nconst Vertex = function (pos) {\n  this.pos = pos;\n};\n\nVertex.fromObject = function (obj) {\n  return new Vertex(new Vector2D(obj.pos._x, obj.pos._y));\n};\n\nVertex.prototype = {\n  toString: function () {\n    return '(' + this.pos.x.toFixed(5) + ',' + this.pos.y.toFixed(5) + ')';\n  },\n  getTag: function () {\n    var result = this.tag;\n    if (!result) {\n      result = getTag();\n      this.tag = result;\n    }\n    return result;\n  }\n};\n\nmodule.exports = Vertex;\n","const Vector2D = require('./Vector2');\nconst {EPS, angleEPS} = require('../constants');\nconst {parseOptionAs2DVector, parseOptionAsFloat, parseOptionAsInt, parseOptionAsBool} = require('../../api/optionParsers');\nconst {defaultResolution2D} = require('../constants');\nconst Vertex = require('./Vertex2');\nconst Side = require('./Side');\n\n/** Class Path2D\n * Represents a series of points, connected by infinitely thin lines.\n * A path can be open or closed, i.e. additional line between first and last points.\n * The difference between Path2D and CAG is that a path is a 'thin' line, whereas a CAG is an enclosed area.\n * @constructor\n * @param {Vector2D[]} [points=[]] - list of points\n * @param {boolean} [closed=false] - closer of path\n *\n * @example\n * new CSG.Path2D()\n * new CSG.Path2D([[10,10], [-10,10], [-10,-10], [10,-10]], true) // closed\n */\nconst Path2D = function (points, closed) {\n  closed = !!closed;\n  points = points || [];\n  // re-parse the points into Vector2D\n  // and remove any duplicate points\n  let prevpoint = null;\n  if (closed && (points.length > 0)) {\n    prevpoint = new Vector2D(points[points.length - 1]);\n  }\n  let newpoints = [];\n  points.map(function (point) {\n    point = new Vector2D(point);\n    let skip = false;\n    if (prevpoint !== null) {\n      let distance = point.distanceTo(prevpoint);\n      skip = distance < EPS;\n    }\n    if (!skip) newpoints.push(point);\n    prevpoint = point;\n  });\n  this.points = newpoints;\n  this.closed = closed;\n};\n\n/** Construct an arc.\n * @param {Object} [options] - options for construction\n * @param {Vector2D} [options.center=[0,0]] - center of circle\n * @param {Number} [options.radius=1] - radius of circle\n * @param {Number} [options.startangle=0] - starting angle of the arc, in degrees\n * @param {Number} [options.endangle=360] - ending angle of the arc, in degrees\n * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\n * @param {Boolean} [options.maketangent=false] - adds line segments at both ends of the arc to ensure that the gradients at the edges are tangent\n * @returns {Path2D} new Path2D object (not closed)\n *\n * @example\n * let path = CSG.Path2D.arc({\n *   center: [5, 5],\n *   radius: 10,\n *   startangle: 90,\n *   endangle: 180,\n *   resolution: 36,\n *   maketangent: true\n * });\n */\nPath2D.arc = function (options) {\n  let center = parseOptionAs2DVector(options, 'center', 0);\n  let radius = parseOptionAsFloat(options, 'radius', 1);\n  let startangle = parseOptionAsFloat(options, 'startangle', 0);\n  let endangle = parseOptionAsFloat(options, 'endangle', 360);\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D);\n  let maketangent = parseOptionAsBool(options, 'maketangent', false);\n  // no need to make multiple turns:\n  while (endangle - startangle >= 720) {\n    endangle -= 360;\n  }\n  while (endangle - startangle <= -720) {\n    endangle += 360;\n  }\n  let points = [];\n  let point;\n  let absangledif = Math.abs(endangle - startangle);\n  if (absangledif < angleEPS) {\n    point = Vector2D.fromAngle(startangle / 180.0 * Math.PI).times(radius);\n    points.push(point.plus(center));\n  } else {\n    let numsteps = Math.floor(resolution * absangledif / 360) + 1;\n    let edgestepsize = numsteps * 0.5 / absangledif; // step size for half a degree\n    if (edgestepsize > 0.25) edgestepsize = 0.25;\n    let numstepsMod = maketangent ? (numsteps + 2) : numsteps;\n    for (let i = 0; i <= numstepsMod; i++) {\n      let step = i;\n      if (maketangent) {\n        step = (i - 1) * (numsteps - 2 * edgestepsize) / numsteps + edgestepsize;\n        if (step < 0) step = 0;\n        if (step > numsteps) step = numsteps;\n      }\n      let angle = startangle + step * (endangle - startangle) / numsteps;\n      point = Vector2D.fromAngle(angle / 180.0 * Math.PI).times(radius);\n      points.push(point.plus(center));\n    }\n  }\n  return new Path2D(points, false);\n};\n\nPath2D.prototype = {\n  concat: function (otherpath) {\n    if (this.closed || otherpath.closed) {\n      throw new Error('Paths must not be closed');\n    }\n    let newpoints = this.points.concat(otherpath.points);\n    return new Path2D(newpoints);\n  },\n\n  /**\n   * Get the points that make up the path.\n   * note that this is current internal list of points, not an immutable copy.\n   * @returns {Vector2[]} array of points the make up the path\n   */\n  getPoints: function () {\n    return this.points;\n  },\n\n  /**\n   * Append an point to the end of the path.\n   * @param {Vector2D} point - point to append\n   * @returns {Path2D} new Path2D object (not closed)\n   */\n  appendPoint: function (point) {\n    if (this.closed) {\n      throw new Error('Path must not be closed');\n    }\n    point = new Vector2D(point); // cast to Vector2D\n    let newpoints = this.points.concat([point]);\n    return new Path2D(newpoints);\n  },\n\n  /**\n   * Append a list of points to the end of the path.\n   * @param {Vector2D[]} points - points to append\n   * @returns {Path2D} new Path2D object (not closed)\n   */\n  appendPoints: function (points) {\n    if (this.closed) {\n      throw new Error('Path must not be closed');\n    }\n    let newpoints = this.points;\n    points.forEach(function (point) {\n      newpoints.push(new Vector2D(point)); // cast to Vector2D\n    });\n    return new Path2D(newpoints);\n  },\n\n  close: function () {\n    return new Path2D(this.points, true);\n  },\n\n  /**\n   * Determine if the path is a closed or not.\n   * @returns {Boolean} true when the path is closed, otherwise false\n   */\n  isClosed: function () {\n    return this.closed;\n  },\n\n  /**\n   * Determine the overall clockwise or anti-clockwise turn of a path.\n   * See: http://mathworld.wolfram.com/PolygonArea.html\n   * @returns {String} One of ['clockwise', 'counter-clockwise', 'straight'].\n   */\n  getTurn: function () {\n    const points = this.points;\n    let twice_area = 0;\n    let last = points.length - 1;\n    for (let current = 0; current < points.length; last = current++) {\n      twice_area += points[last].x * points[current].y - points[last].y * points[current].x;\n    }\n    if (twice_area > 0) {\n      return 'clockwise';\n    } else if (twice_area < 0) {\n      return 'counter-clockwise';\n    } else {\n      return 'straight';\n    }\n  },\n\n  // Extrude the path by following it with a rectangle (upright, perpendicular to the path direction)\n  // Returns a CSG solid\n  //   width: width of the extrusion, in the z=0 plane\n  //   height: height of the extrusion in the z direction\n  //   resolution: number of segments per 360 degrees for the curve in a corner\n  rectangularExtrude: function (width, height, resolution) {\n    let cag = this.expandToCAG(width / 2, resolution);\n    let result = cag.extrude({\n      offset: [0, 0, height]\n    });\n    return result;\n  },\n\n  // Expand the path to a CAG\n  // This traces the path with a circle with radius pathradius\n  expandToCAG: function (pathradius, resolution) {\n    const CAG = require('../CAG'); // FIXME: cyclic dependencies CAG => PATH2 => CAG\n    let sides = [];\n    let numpoints = this.points.length;\n    let startindex = 0;\n    if (this.closed && (numpoints > 2)) startindex = -1;\n    let prevvertex;\n    for (let i = startindex; i < numpoints; i++) {\n      let pointindex = i;\n      if (pointindex < 0) pointindex = numpoints - 1;\n      let point = this.points[pointindex];\n      let vertex = new Vertex(point);\n      if (i > startindex) {\n        let side = new Side(prevvertex, vertex);\n        sides.push(side);\n      }\n      prevvertex = vertex;\n    }\n    let shellcag = CAG.fromSides(sides);\n    let expanded = shellcag.expandedShell(pathradius, resolution);\n    return expanded;\n  },\n\n  innerToCAG: function () {\n    const CAG = require('../CAG'); // FIXME: cyclic dependencies CAG => PATH2 => CAG\n    if (!this.closed) throw new Error('The path should be closed!');\n    return CAG.fromPoints(this.points);\n  },\n\n  transform: function (matrix4x4) {\n    let newpoints = this.points.map(function (point) {\n      return point.multiply4x4(matrix4x4);\n    });\n    return new Path2D(newpoints, this.closed);\n  },\n\n  /**\n   * Append a Bezier curve to the end of the path, using the control points to transition the curve through start and end points.\n   * <br>\n   * The Bézier curve starts at the last point in the path,\n   * and ends at the last given control point. Other control points are intermediate control points.\n   * <br>\n   * The first control point may be null to ensure a smooth transition occurs. In this case,\n   * the second to last control point of the path is mirrored into the control points of the Bezier curve.\n   * In other words, the trailing gradient of the path matches the new gradient of the curve.\n   * @param {Vector2D[]} controlpoints - list of control points\n   * @param {Object} [options] - options for construction\n   * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\n   * @returns {Path2D} new Path2D object (not closed)\n   *\n   * @example\n   * let p5 = new CSG.Path2D([[10,-20]],false);\n   * p5 = p5.appendBezier([[10,-10],[25,-10],[25,-20]]);\n   * p5 = p5.appendBezier([[25,-30],[40,-30],[40,-20]]);\n   */\n  appendBezier: function (controlpoints, options) {\n    if (arguments.length < 2) {\n      options = {};\n    }\n    if (this.closed) {\n      throw new Error('Path must not be closed');\n    }\n    if (!(controlpoints instanceof Array)) {\n      throw new Error('appendBezier: should pass an array of control points');\n    }\n    if (controlpoints.length < 1) {\n      throw new Error('appendBezier: need at least 1 control point');\n    }\n    if (this.points.length < 1) {\n      throw new Error('appendBezier: path must already contain a point (the endpoint of the path is used as the starting point for the bezier curve)');\n    }\n    let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D);\n    if (resolution < 4) resolution = 4;\n    let factorials = [];\n    let controlpointsParsed = [];\n    controlpointsParsed.push(this.points[this.points.length - 1]); // start at the previous end point\n    for (let i = 0; i < controlpoints.length; ++i) {\n      let p = controlpoints[i];\n      if (p === null) {\n        // we can pass null as the first control point. In that case a smooth gradient is ensured:\n        if (i !== 0) {\n          throw new Error('appendBezier: null can only be passed as the first control point');\n        }\n        if (controlpoints.length < 2) {\n          throw new Error('appendBezier: null can only be passed if there is at least one more control point');\n        }\n        let lastBezierControlPoint;\n        if ('lastBezierControlPoint' in this) {\n          lastBezierControlPoint = this.lastBezierControlPoint;\n        } else {\n          if (this.points.length < 2) {\n            throw new Error('appendBezier: null is passed as a control point but this requires a previous bezier curve or at least two points in the existing path');\n          }\n          lastBezierControlPoint = this.points[this.points.length - 2];\n        }\n        // mirror the last bezier control point:\n        p = this.points[this.points.length - 1].times(2).minus(lastBezierControlPoint);\n      } else {\n        p = new Vector2D(p); // cast to Vector2D\n      }\n      controlpointsParsed.push(p);\n    }\n    let bezierOrder = controlpointsParsed.length - 1;\n    let fact = 1;\n    for (let i = 0; i <= bezierOrder; ++i) {\n      if (i > 0) fact *= i;\n      factorials.push(fact);\n    }\n    let binomials = [];\n    for (let i = 0; i <= bezierOrder; ++i) {\n      let binomial = factorials[bezierOrder] / (factorials[i] * factorials[bezierOrder - i]);\n      binomials.push(binomial);\n    }\n    let getPointForT = function (t) {\n      let t_k = 1; // = pow(t,k)\n      let one_minus_t_n_minus_k = Math.pow(1 - t, bezierOrder); // = pow( 1-t, bezierOrder - k)\n      let inv_1_minus_t = (t !== 1) ? (1 / (1 - t)) : 1;\n      let point = new Vector2D(0, 0);\n      for (let k = 0; k <= bezierOrder; ++k) {\n        if (k === bezierOrder) one_minus_t_n_minus_k = 1;\n        let bernstein_coefficient = binomials[k] * t_k * one_minus_t_n_minus_k;\n        point = point.plus(controlpointsParsed[k].times(bernstein_coefficient));\n        t_k *= t;\n        one_minus_t_n_minus_k *= inv_1_minus_t;\n      }\n      return point;\n    };\n    let newpoints = [];\n    let newpoints_t = [];\n    let numsteps = bezierOrder + 1;\n    for (let i = 0; i < numsteps; ++i) {\n      let t = i / (numsteps - 1);\n      let point = getPointForT(t);\n      newpoints.push(point);\n      newpoints_t.push(t);\n    }\n    // subdivide each segment until the angle at each vertex becomes small enough:\n    let subdivideBase = 1;\n    let maxangle = Math.PI * 2 / resolution; // segments may have differ no more in angle than this\n    let maxsinangle = Math.sin(maxangle);\n    while (subdivideBase < newpoints.length - 1) {\n      let dir1 = newpoints[subdivideBase].minus(newpoints[subdivideBase - 1]).unit();\n      let dir2 = newpoints[subdivideBase + 1].minus(newpoints[subdivideBase]).unit();\n      let sinangle = dir1.cross(dir2); // this is the sine of the angle\n      if (Math.abs(sinangle) > maxsinangle) {\n        // angle is too big, we need to subdivide\n        let t0 = newpoints_t[subdivideBase - 1];\n        let t1 = newpoints_t[subdivideBase + 1];\n        let t0_new = t0 + (t1 - t0) * 1 / 3;\n        let t1_new = t0 + (t1 - t0) * 2 / 3;\n        let point0_new = getPointForT(t0_new);\n        let point1_new = getPointForT(t1_new);\n        // remove the point at subdivideBase and replace with 2 new points:\n        newpoints.splice(subdivideBase, 1, point0_new, point1_new);\n        newpoints_t.splice(subdivideBase, 1, t0_new, t1_new);\n        // re - evaluate the angles, starting at the previous junction since it has changed:\n        subdivideBase--;\n        if (subdivideBase < 1) subdivideBase = 1;\n      } else {\n        ++subdivideBase;\n      }\n    }\n    // append to the previous points, but skip the first new point because it is identical to the last point:\n    newpoints = this.points.concat(newpoints.slice(1));\n    let result = new Path2D(newpoints);\n    result.lastBezierControlPoint = controlpointsParsed[controlpointsParsed.length - 2];\n    return result;\n  },\n\n  /**\n   * Append an arc to the end of the path.\n   * This implementation follows the SVG arc specs. For the details see\n   * http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands\n   * @param {Vector2D} endpoint - end point of arc\n   * @param {Object} [options] - options for construction\n   * @param {Number} [options.radius=0] - radius of arc (X and Y), see also xradius and yradius\n   * @param {Number} [options.xradius=0] - X radius of arc, see also radius\n   * @param {Number} [options.yradius=0] - Y radius of arc, see also radius\n   * @param {Number} [options.xaxisrotation=0] -  rotation (in degrees) of the X axis of the arc with respect to the X axis of the coordinate system\n   * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\n   * @param {Boolean} [options.clockwise=false] - draw an arc clockwise with respect to the center point\n   * @param {Boolean} [options.large=false] - draw an arc longer than 180 degrees\n   * @returns {Path2D} new Path2D object (not closed)\n   *\n   * @example\n   * let p1 = new CSG.Path2D([[27.5,-22.96875]],false);\n   * p1 = p1.appendPoint([27.5,-3.28125]);\n   * p1 = p1.appendArc([12.5,-22.96875],{xradius: 15,yradius: -19.6875,xaxisrotation: 0,clockwise: false,large: false});\n   * p1 = p1.close();\n   */\n  appendArc: function (endpoint, options) {\n    let decimals = 100000;\n    if (arguments.length < 2) {\n      options = {};\n    }\n    if (this.closed) {\n      throw new Error('Path must not be closed');\n    }\n    if (this.points.length < 1) {\n      throw new Error('appendArc: path must already contain a point (the endpoint of the path is used as the starting point for the arc)');\n    }\n    let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D);\n    if (resolution < 4) resolution = 4;\n    let xradius, yradius;\n    if (('xradius' in options) || ('yradius' in options)) {\n      if ('radius' in options) {\n        throw new Error('Should either give an xradius and yradius parameter, or a radius parameter');\n      }\n      xradius = parseOptionAsFloat(options, 'xradius', 0);\n      yradius = parseOptionAsFloat(options, 'yradius', 0);\n    } else {\n      xradius = parseOptionAsFloat(options, 'radius', 0);\n      yradius = xradius;\n    }\n    let xaxisrotation = parseOptionAsFloat(options, 'xaxisrotation', 0);\n    let clockwise = parseOptionAsBool(options, 'clockwise', false);\n    let largearc = parseOptionAsBool(options, 'large', false);\n    let startpoint = this.points[this.points.length - 1];\n    endpoint = new Vector2D(endpoint);\n    // round to precision in order to have determinate calculations\n    xradius = Math.round(xradius * decimals) / decimals;\n    yradius = Math.round(yradius * decimals) / decimals;\n    endpoint = new Vector2D(Math.round(endpoint.x * decimals) / decimals, Math.round(endpoint.y * decimals) / decimals);\n\n    let sweepFlag = !clockwise;\n    let newpoints = [];\n    if ((xradius === 0) || (yradius === 0)) {\n      // http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes:\n      // If rx = 0 or ry = 0, then treat this as a straight line from (x1, y1) to (x2, y2) and stop\n      newpoints.push(endpoint);\n    } else {\n      xradius = Math.abs(xradius);\n      yradius = Math.abs(yradius);\n\n      // see http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes :\n      let phi = xaxisrotation * Math.PI / 180.0;\n      let cosphi = Math.cos(phi);\n      let sinphi = Math.sin(phi);\n      let minushalfdistance = startpoint.minus(endpoint).times(0.5);\n      // F.6.5.1:\n      // round to precision in order to have determinate calculations\n      let x = Math.round((cosphi * minushalfdistance.x + sinphi * minushalfdistance.y) * decimals) / decimals;\n      let y = Math.round((-sinphi * minushalfdistance.x + cosphi * minushalfdistance.y) * decimals) / decimals;\n      let startTranslated = new Vector2D(x, y);\n      // F.6.6.2:\n      let biglambda = (startTranslated.x * startTranslated.x) / (xradius * xradius) + (startTranslated.y * startTranslated.y) / (yradius * yradius);\n      if (biglambda > 1.0) {\n        // F.6.6.3:\n        let sqrtbiglambda = Math.sqrt(biglambda);\n        xradius *= sqrtbiglambda;\n        yradius *= sqrtbiglambda;\n        // round to precision in order to have determinate calculations\n        xradius = Math.round(xradius * decimals) / decimals;\n        yradius = Math.round(yradius * decimals) / decimals;\n      }\n      // F.6.5.2:\n      let multiplier1 = Math.sqrt((xradius * xradius * yradius * yradius - xradius * xradius * startTranslated.y * startTranslated.y - yradius * yradius * startTranslated.x * startTranslated.x) / (xradius * xradius * startTranslated.y * startTranslated.y + yradius * yradius * startTranslated.x * startTranslated.x));\n      if (sweepFlag === largearc) multiplier1 = -multiplier1;\n      let centerTranslated = new Vector2D(xradius * startTranslated.y / yradius, -yradius * startTranslated.x / xradius).times(multiplier1);\n      // F.6.5.3:\n      let center = new Vector2D(cosphi * centerTranslated.x - sinphi * centerTranslated.y, sinphi * centerTranslated.x + cosphi * centerTranslated.y).plus((startpoint.plus(endpoint)).times(0.5));\n      // F.6.5.5:\n      let vec1 = new Vector2D((startTranslated.x - centerTranslated.x) / xradius, (startTranslated.y - centerTranslated.y) / yradius);\n      let vec2 = new Vector2D((-startTranslated.x - centerTranslated.x) / xradius, (-startTranslated.y - centerTranslated.y) / yradius);\n      let theta1 = vec1.angleRadians();\n      let theta2 = vec2.angleRadians();\n      let deltatheta = theta2 - theta1;\n      deltatheta = deltatheta % (2 * Math.PI);\n      if ((!sweepFlag) && (deltatheta > 0)) {\n        deltatheta -= 2 * Math.PI;\n      } else if ((sweepFlag) && (deltatheta < 0)) {\n        deltatheta += 2 * Math.PI;\n      }\n\n      // Ok, we have the center point and angle range (from theta1, deltatheta radians) so we can create the ellipse\n      let numsteps = Math.ceil(Math.abs(deltatheta) / (2 * Math.PI) * resolution) + 1;\n      if (numsteps < 1) numsteps = 1;\n      for (let step = 1; step <= numsteps; step++) {\n        let theta = theta1 + step / numsteps * deltatheta;\n        let costheta = Math.cos(theta);\n        let sintheta = Math.sin(theta);\n        // F.6.3.1:\n        let point = new Vector2D(cosphi * xradius * costheta - sinphi * yradius * sintheta, sinphi * xradius * costheta + cosphi * yradius * sintheta).plus(center);\n        newpoints.push(point);\n      }\n    }\n    newpoints = this.points.concat(newpoints);\n    let result = new Path2D(newpoints);\n    return result;\n  }\n};\n\nmodule.exports = Path2D;\n","const Vector2D = require('./Vector2');\nconst {solve2Linear} = require('../utils');\n\n/**  class Line2D\n * Represents a directional line in 2D space\n * A line is parametrized by its normal vector (perpendicular to the line, rotated 90 degrees counter clockwise)\n * and w. The line passes through the point <normal>.times(w).\n * Equation: p is on line if normal.dot(p)==w\n * @param {Vector2D} normal normal must be a unit vector!\n * @returns {Line2D}\n */\nconst Line2D = function (normal, w) {\n  normal = new Vector2D(normal);\n  w = parseFloat(w);\n  let l = normal.length();\n  // normalize:\n  w *= l;\n  normal = normal.times(1.0 / l);\n  this.normal = normal;\n  this.w = w;\n};\n\nLine2D.fromPoints = function (p1, p2) {\n  p1 = new Vector2D(p1);\n  p2 = new Vector2D(p2);\n  let direction = p2.minus(p1);\n  let normal = direction.normal().negated().unit();\n  let w = p1.dot(normal);\n  return new Line2D(normal, w);\n};\n\nLine2D.prototype = {\n  // same line but opposite direction:\n  reverse: function () {\n    return new Line2D(this.normal.negated(), -this.w);\n  },\n\n  equals: function (l) {\n    return (l.normal.equals(this.normal) && (l.w === this.w));\n  },\n\n  origin: function () {\n    return this.normal.times(this.w);\n  },\n\n  direction: function () {\n    return this.normal.normal();\n  },\n\n  xAtY: function (y) {\n    // (py == y) && (normal * p == w)\n    // -> px = (w - normal._y * y) / normal.x\n    let x = (this.w - this.normal._y * y) / this.normal.x;\n    return x;\n  },\n\n  absDistanceToPoint: function (point) {\n    point = new Vector2D(point);\n    let pointProjected = point.dot(this.normal);\n    let distance = Math.abs(pointProjected - this.w);\n    return distance;\n  },\n  /* FIXME: has error - origin is not defined, the method is never used\n   closestPoint: function(point) {\n       point = new Vector2D(point);\n       let vector = point.dot(this.direction());\n       return origin.plus(vector);\n   },\n   */\n\n  // intersection between two lines, returns point as Vector2D\n  intersectWithLine: function (line2d) {\n    let point = solve2Linear(this.normal.x, this.normal.y, line2d.normal.x, line2d.normal.y, this.w, line2d.w);\n    point = new Vector2D(point); // make  vector2d\n    return point;\n  },\n\n  transform: function (matrix4x4) {\n    let origin = new Vector2D(0, 0);\n    let pointOnPlane = this.normal.times(this.w);\n    let neworigin = origin.multiply4x4(matrix4x4);\n    let neworiginPlusNormal = this.normal.multiply4x4(matrix4x4);\n    let newnormal = neworiginPlusNormal.minus(neworigin);\n    let newpointOnPlane = pointOnPlane.multiply4x4(matrix4x4);\n    let neww = newnormal.dot(newpointOnPlane);\n    return new Line2D(newnormal, neww);\n  }\n};\n\nmodule.exports = Line2D;\n","// boolean operations\n\n// FIXME should this be lazy ? in which case, how do we deal with 2D/3D combined\n// TODO we should have an option to set behaviour as first parameter\n\nexport {union} from './union';\nexport {difference} from './difference';\nexport {intersection} from './intersection';\n","\nexport {extrudeInOrthonormalBasis} from './extrudeInOrthonormalBasis';\nexport {extrudeInPlane} from './extrudeInPlane';\nexport {extrude} from './extrude';\nexport {rotateExtrude} from './rotateExtrude';\nexport {linear_extrude} from './linear_extrude';\nexport {rotate_extrude} from './rotate_extrude';\nexport {rectangular_extrude} from './rectangular_extrude';\n","// ////////////////////////////////////\n// # Class Properties\n// This class is used to store properties of a solid\n// A property can for example be a Vertex, a Plane or a Line3D\n// Whenever an affine transform is applied to the CSG solid, all its properties are\n// transformed as well.\n// The properties can be stored in a complex nested structure (using arrays and objects)\nconst Properties = function () {\n};\n\nProperties.prototype = {\n  _transform: function (matrix4x4) {\n    let result = new Properties();\n    Properties.transformObj(this, result, matrix4x4);\n    return result;\n  },\n  _merge: function (otherproperties) {\n    let result = new Properties();\n    Properties.cloneObj(this, result);\n    Properties.addFrom(result, otherproperties);\n    return result;\n  }\n};\n\nProperties.transformObj = function (source, result, matrix4x4) {\n  for (let propertyname in source) {\n    if (propertyname === '_transform') continue;\n    if (propertyname === '_merge') continue;\n    let propertyvalue = source[propertyname];\n    let transformed = propertyvalue;\n    if (typeof (propertyvalue) === 'object') {\n      if (('transform' in propertyvalue) && (typeof (propertyvalue.transform) === 'function')) {\n        transformed = propertyvalue.transform(matrix4x4);\n      } else if (propertyvalue instanceof Array) {\n        transformed = [];\n        Properties.transformObj(propertyvalue, transformed, matrix4x4);\n      } else if (propertyvalue instanceof Properties) {\n        transformed = new Properties();\n        Properties.transformObj(propertyvalue, transformed, matrix4x4);\n      }\n    }\n    result[propertyname] = transformed;\n  }\n};\n\nProperties.cloneObj = function (source, result) {\n  for (let propertyname in source) {\n    if (propertyname === '_transform') continue;\n    if (propertyname === '_merge') continue;\n    let propertyvalue = source[propertyname];\n    let cloned = propertyvalue;\n    if (typeof (propertyvalue) === 'object') {\n      if (propertyvalue instanceof Array) {\n        cloned = [];\n        for (let i = 0; i < propertyvalue.length; i++) {\n          cloned.push(propertyvalue[i]);\n        }\n      } else if (propertyvalue instanceof Properties) {\n        cloned = new Properties();\n        Properties.cloneObj(propertyvalue, cloned);\n      }\n    }\n    result[propertyname] = cloned;\n  }\n};\n\nProperties.addFrom = function (result, otherproperties) {\n  for (let propertyname in otherproperties) {\n    if (propertyname === '_transform') continue;\n    if (propertyname === '_merge') continue;\n    if ((propertyname in result) &&\n      (typeof (result[propertyname]) === 'object') &&\n      (result[propertyname] instanceof Properties) &&\n      (typeof (otherproperties[propertyname]) === 'object') &&\n      (otherproperties[propertyname] instanceof Properties)) {\n      Properties.addFrom(result[propertyname], otherproperties[propertyname]);\n    } else if (!(propertyname in result)) {\n      result[propertyname] = otherproperties[propertyname];\n    }\n  }\n};\n\nmodule.exports = Properties;\n","// Primitives 2D\nexport {square} from './square';\nexport {circle} from './circle';\nexport {polygon} from './polygon';\nexport {triangle} from './triangle';\n\n// Primitives 3D\nexport {cube} from './cube';\nexport {sphere} from './sphere';\nexport {geodesicSphere} from './geodesicSphere';\nexport {cylinder} from './cylinder';\nexport {torus} from './torus';\nexport {polyhedron} from './polyhedron';\n","const CAG = require('../CAG');\nconst {fromPoints} = require('../CAGFactories');\n\n/*\n2D polygons are now supported through the CAG class.\nWith many improvements (see documentation):\n  - shapes do no longer have to be convex\n  - union/intersect/subtract is supported\n  - expand / contract are supported\n\nBut we'll keep CSG.Polygon2D as a stub for backwards compatibility\n*/\nfunction Polygon2D(points) {\n  const cag = fromPoints(points);\n  this.sides = cag.sides;\n}\n\nPolygon2D.prototype = CAG.prototype;\n\nmodule.exports = Polygon2D;\n","const {areaEPS} = require('../constants');\nconst {linesIntersect} = require('../math/lineUtils');\n\n// check if we are a valid CAG (for debugging)\n// NOTE(bebbi) uneven side count doesn't work because rounding with EPS isn't taken into account\nconst isCAGValid = function (CAG) {\n  let errors = [];\n  if (CAG.isSelfIntersecting(true)) {\n    errors.push('Self intersects');\n  }\n  let pointcount = {};\n  CAG.sides.map(function (side) {\n    function mappoint(p) {\n      let tag = p.x + ' ' + p.y;\n      if (!(tag in pointcount)) pointcount[tag] = 0;\n      pointcount[tag]++;\n    }\n\n    mappoint(side.vertex0.pos);\n    mappoint(side.vertex1.pos);\n  });\n  for (let tag in pointcount) {\n    let count = pointcount[tag];\n    if (count & 1) {\n      errors.push('Uneven number of sides (' + count + ') for point ' + tag);\n    }\n  }\n  let area = CAG.area();\n  if (area < areaEPS) {\n    errors.push('Area is ' + area);\n  }\n  if (errors.length > 0) {\n    let ertxt = '';\n    errors.map(function (err) {\n      ertxt += err + '\\n';\n    });\n    throw new Error(ertxt);\n  }\n};\n\nconst isSelfIntersecting = function (cag, debug) {\n  let numsides = cag.sides.length;\n  for (let i = 0; i < numsides; i++) {\n    let side0 = cag.sides[i];\n    for (let ii = i + 1; ii < numsides; ii++) {\n      let side1 = cag.sides[ii];\n      if (linesIntersect(side0.vertex0.pos, side0.vertex1.pos, side1.vertex0.pos, side1.vertex1.pos)) {\n        if (debug) {\n          console.log('side ' + i + ': ' + side0);\n          console.log('side ' + ii + ': ' + side1);\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/** Check if the point stay inside the CAG shape\n * ray-casting algorithm based on :\n * https://github.com/substack/point-in-polygon/blob/master/index.js\n * http://www.ecse.rp1.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n * originaly writed for https://github.com/lautr3k/SLAcer.js/blob/dev/js/slacer/slicer.js#L82\n * @param {CAG} cag - CAG object\n * @param {Object} p0 - Vertex2 like object\n * @returns {Boolean}\n */\nconst hasPointInside = function (cag, p0) {\n  let p1 = null;\n  let p2 = null;\n  let inside = false;\n  cag.sides.forEach(side => {\n    p1 = side.vertex0.pos;\n    p2 = side.vertex1.pos;\n    if (hasPointInside.c1(p0, p1, p2) && hasPointInside.c2(p0, p1, p2)) {\n      inside = !inside;\n    }\n  });\n  return inside;\n};\n\nhasPointInside.c1 = (p0, p1, p2) => (p1.y > p0.y) !== (p2.y > p0.y);\nhasPointInside.c2 = (p0, p1, p2) => (p0.x < (p2.x - p1.x) * (p0.y - p1.y) / (p2.y - p1.y) + p1.x);\n\n/** Check if all points from one CAG stay inside another CAG\n * @param {CAG} cag1 - CAG object\n * @param {Object} cag2 - CAG object\n * @returns {Boolean}\n */\nconst contains = function (cag1, cag2) {\n  for (let i = 0, il = cag2.sides.length; i < il; i++) {\n    if (!hasPointInside(cag1, cag2.sides[i].vertex0.pos)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  isCAGValid,\n  isSelfIntersecting,\n  hasPointInside,\n  contains\n};\n","const {EPS} = require('../constants');\nconst FuzzyCSGFactory = require('../FuzzyFactory3d');\nconst FuzzyCAGFactory = require('../FuzzyFactory2d');\nconst {fromPolygons} = require('../CSGFactories');\nconst {fromSides} = require('../CAGFactories');\n\n/**\n * Returns a cannoicalized version of the input csg/cag : ie every very close\n * points get deduplicated\n * @returns {CSG|CAG}\n * @example\n * let rawInput = someCSGORCAGMakingFunction()\n * let canonicalized= canonicalize(rawInput)\n */\nconst canonicalize = function (csgOrCAG, options) {\n  if (csgOrCAG.isCanonicalized) {\n    return csgOrCAG;\n  } else {\n    if ('sides' in csgOrCAG) {\n      return canonicalizeCAG(csgOrCAG, options);\n    } else {\n      return canonicalizeCSG(csgOrCAG, options);\n    }\n  }\n};\n\n/**\n * Returns a cannoicalized version of the input csg : ie every very close\n * points get deduplicated\n * @returns {CSG}\n * @example\n * let rawCSG = someCSGMakingFunction()\n * let canonicalizedCSG = canonicalize(rawCSG)\n */\nconst canonicalizeCSG = function (csg, options) {\n  if (csg.isCanonicalized) {\n    return csg;\n  } else {\n    const factory = new FuzzyCSGFactory();\n    let result = CSGFromCSGFuzzyFactory(factory, csg);\n    result.isCanonicalized = true;\n    result.isRetesselated = csg.isRetesselated;\n    result.properties = csg.properties; // keep original properties\n    return result;\n  }\n};\n\nconst canonicalizeCAG = function (cag, options) {\n  if (cag.isCanonicalized) {\n    return cag;\n  } else {\n    let factory = new FuzzyCAGFactory();\n    let result = CAGFromCAGFuzzyFactory(factory, cag);\n    result.isCanonicalized = true;\n    return result;\n  }\n};\n\nconst CSGFromCSGFuzzyFactory = function (factory, sourcecsg) {\n  let _this = factory;\n  let newpolygons = [];\n  sourcecsg.polygons.forEach(function (polygon) {\n    let newpolygon = _this.getPolygon(polygon);\n    // see getPolygon above: we may get a polygon with no vertices, discard it:\n    if (newpolygon.vertices.length >= 3) {\n      newpolygons.push(newpolygon);\n    }\n  });\n  return fromPolygons(newpolygons);\n};\n\nconst CAGFromCAGFuzzyFactory = function (factory, sourcecag) {\n  let _this = factory;\n  let newsides = sourcecag.sides.map(function (side) {\n    return _this.getSide(side);\n  })\n    // remove bad sides (mostly a user input issue)\n    .filter(function (side) {\n      return side.length() > EPS;\n    });\n  return fromSides(newsides);\n};\n\nmodule.exports = canonicalize;\n","const {EPS} = require('./constants');\nconst Polygon = require('./math/Polygon3');\nconst FuzzyFactory = require('./FuzzyFactory');\n\n// ////////////////////////////////////\nconst FuzzyCSGFactory = function () {\n  this.vertexfactory = new FuzzyFactory(5, EPS);\n  this.planefactory = new FuzzyFactory(4, EPS);\n  this.polygonsharedfactory = {};\n};\n\nFuzzyCSGFactory.prototype = {\n  getPolygonShared: function (sourceshared) {\n    let hash = sourceshared.getHash();\n    if (hash in this.polygonsharedfactory) {\n      return this.polygonsharedfactory[hash];\n    } else {\n      this.polygonsharedfactory[hash] = sourceshared;\n      return sourceshared;\n    }\n  },\n\n  getVertex: function (sourcevertex) {\n    let elements = [sourcevertex.pos._x, sourcevertex.pos._y, sourcevertex.pos._z,\n      sourcevertex.uv._x, sourcevertex.uv._y];\n    let result = this.vertexfactory.lookupOrCreate(elements, function (els) {\n      return sourcevertex;\n    });\n    return result;\n  },\n\n  getPlane: function (sourceplane) {\n    let elements = [sourceplane.normal._x, sourceplane.normal._y, sourceplane.normal._z, sourceplane.w];\n    let result = this.planefactory.lookupOrCreate(elements, function (els) {\n      return sourceplane;\n    });\n    return result;\n  },\n\n  getPolygon: function (sourcepolygon) {\n    let newplane = this.getPlane(sourcepolygon.plane);\n    let newshared = this.getPolygonShared(sourcepolygon.shared);\n    let _this = this;\n    let newvertices = sourcepolygon.vertices.map(function (vertex) {\n      return _this.getVertex(vertex);\n    });\n    // two vertices that were originally very close may now have become\n    // truly identical (referring to the same Vertex object).\n    // Remove duplicate vertices:\n    let newverticesDedup = [];\n    if (newvertices.length > 0) {\n      let prevvertextag = newvertices[newvertices.length - 1].getTag();\n      newvertices.forEach(function (vertex) {\n        let vertextag = vertex.getTag();\n        if (vertextag !== prevvertextag) {\n          newverticesDedup.push(vertex);\n        }\n        prevvertextag = vertextag;\n      });\n    }\n    // If it's degenerate, remove all vertices:\n    if (newverticesDedup.length < 3) {\n      newverticesDedup = [];\n    }\n    return new Polygon(newverticesDedup, newshared, newplane);\n  }\n};\n\nmodule.exports = FuzzyCSGFactory;\n","// //////////////////////////////\n// ## class fuzzyFactory\n// This class acts as a factory for objects. We can search for an object with approximately\n// the desired properties (say a rectangle with width 2 and height 1)\n// The lookupOrCreate() method looks for an existing object (for example it may find an existing rectangle\n// with width 2.0001 and height 0.999. If no object is found, the user supplied callback is\n// called, which should generate a new object. The new object is inserted into the database\n// so it can be found by future lookupOrCreate() calls.\n// Constructor:\n//   numdimensions: the number of parameters for each object\n//     for example for a 2D rectangle this would be 2\n//   tolerance: The maximum difference for each parameter allowed to be considered a match\nconst FuzzyFactory = function (numdimensions, tolerance) {\n  this.lookuptable = {};\n  this.multiplier = 1.0 / tolerance;\n};\n\nFuzzyFactory.prototype = {\n  // let obj = f.lookupOrCreate([el1, el2, el3], function(elements) {/* create the new object */});\n  // Performs a fuzzy lookup of the object with the specified elements.\n  // If found, returns the existing object\n  // If not found, calls the supplied callback function which should create a new object with\n  // the specified properties. This object is inserted in the lookup database.\n  lookupOrCreate: function (els, creatorCallback) {\n    let hash = '';\n    let multiplier = this.multiplier;\n    els.forEach(function (el) {\n      let valueQuantized = Math.round(el * multiplier);\n      hash += valueQuantized + '/';\n    });\n    if (hash in this.lookuptable) {\n      return this.lookuptable[hash];\n    } else {\n      let object = creatorCallback(els);\n      let hashparts = els.map(function (el) {\n        let q0 = Math.floor(el * multiplier);\n        let q1 = q0 + 1;\n        return ['' + q0 + '/', '' + q1 + '/'];\n      });\n      let numelements = els.length;\n      let numhashes = 1 << numelements;\n      for (let hashmask = 0; hashmask < numhashes; ++hashmask) {\n        let hashmaskShifted = hashmask;\n        hash = '';\n        hashparts.forEach(function (hashpart) {\n          hash += hashpart[hashmaskShifted & 1];\n          hashmaskShifted >>= 1;\n        });\n        this.lookuptable[hash] = object;\n      }\n      return object;\n    }\n  }\n};\n\nmodule.exports = FuzzyFactory;\n","const FuzzyCSGFactory = require('../FuzzyFactory3d');\nconst reTesselateCoplanarPolygons = require('../math/reTesselateCoplanarPolygons');\nconst {fromPolygons} = require('../CSGFactories');\n\nconst reTesselate = function (csg) {\n  if (csg.isRetesselated) {\n    return csg;\n  } else {\n    let polygonsPerPlane = {};\n    let isCanonicalized = csg.isCanonicalized;\n    let fuzzyfactory = new FuzzyCSGFactory();\n    csg.polygons.map(function (polygon) {\n      let plane = polygon.plane;\n      let shared = polygon.shared;\n      if (!isCanonicalized) {\n        // in order to identify polygons having the same plane, we need to canonicalize the planes\n        // We don't have to do a full canonizalization (including vertices), to save time only do the planes and the shared data:\n        plane = fuzzyfactory.getPlane(plane);\n        shared = fuzzyfactory.getPolygonShared(shared);\n      }\n      let tag = plane.getTag() + '/' + shared.getTag();\n      if (!(tag in polygonsPerPlane)) {\n        polygonsPerPlane[tag] = [polygon];\n      } else {\n        polygonsPerPlane[tag].push(polygon);\n      }\n    });\n    let destpolygons = [];\n    for (let planetag in polygonsPerPlane) {\n      let sourcepolygons = polygonsPerPlane[planetag];\n      if (sourcepolygons.length < 2) {\n        destpolygons = destpolygons.concat(sourcepolygons);\n      } else {\n        let retesselayedpolygons = [];\n        reTesselateCoplanarPolygons(sourcepolygons, retesselayedpolygons);\n        destpolygons = destpolygons.concat(retesselayedpolygons);\n      }\n    }\n    let result = fromPolygons(destpolygons);\n    result.isRetesselated = true;\n    // result = result.canonicalized();\n    result.properties = csg.properties; // keep original properties\n    return result;\n  }\n};\n\nmodule.exports = reTesselate;\n","const Matrix4x4 = require('../core/math/Matrix4.js');\nconst Vector3D = require('../core/math/Vector3.js');\nconst {Connector} = require('../core/connectors.js');\nconst {fromPoints} = require('../core/CAGFactories');\nconst Vector2D = require('../core/math/Vector2');\n\n// Get the transformation that transforms this CSG such that it is lying on the z=0 plane,\n// as flat as possible (i.e. the least z-height).\n// So that it is in an orientation suitable for CNC milling\nconst getTransformationAndInverseTransformationToFlatLying = function (_csg) {\n  if (_csg.polygons.length === 0) {\n    let m = new Matrix4x4(); // unity\n    return [m, m];\n  } else {\n    // get a list of unique planes in the CSG:\n    let csg = _csg.canonicalized();\n    let planemap = {};\n    csg.polygons.map(function (polygon) {\n      planemap[polygon.plane.getTag()] = polygon.plane;\n    });\n    // try each plane in the CSG and find the plane that, when we align it flat onto z=0,\n    // gives the least height in z-direction.\n    // If two planes give the same height, pick the plane that originally had a normal closest\n    // to [0,0,-1].\n    let xvector = new Vector3D(1, 0, 0);\n    let yvector = new Vector3D(0, 1, 0);\n    let zvector = new Vector3D(0, 0, 1);\n    let z0connectorx = new Connector([0, 0, 0], [0, 0, -1], xvector);\n    let z0connectory = new Connector([0, 0, 0], [0, 0, -1], yvector);\n    let isfirst = true;\n    let minheight = 0;\n    let maxdotz = 0;\n    let besttransformation, bestinversetransformation;\n    for (let planetag in planemap) {\n      let plane = planemap[planetag];\n      let pointonplane = plane.normal.times(plane.w);\n      let transformation, inversetransformation;\n      // We need a normal vecrtor for the transformation\n      // determine which is more perpendicular to the plane normal: x or y?\n      // we will align this as much as possible to the x or y axis vector\n      let xorthogonality = plane.normal.cross(xvector).length();\n      let yorthogonality = plane.normal.cross(yvector).length();\n      if (xorthogonality > yorthogonality) {\n        // x is better:\n        let planeconnector = new Connector(pointonplane, plane.normal, xvector);\n        transformation = planeconnector.getTransformationTo(z0connectorx, false, 0);\n        inversetransformation = z0connectorx.getTransformationTo(planeconnector, false, 0);\n      } else {\n        // y is better:\n        let planeconnector = new Connector(pointonplane, plane.normal, yvector);\n        transformation = planeconnector.getTransformationTo(z0connectory, false, 0);\n        inversetransformation = z0connectory.getTransformationTo(planeconnector, false, 0);\n      }\n      let transformedcsg = csg.transform(transformation);\n      let dotz = -plane.normal.dot(zvector);\n      let bounds = transformedcsg.getBounds();\n      let zheight = bounds[1].z - bounds[0].z;\n      let isbetter = isfirst;\n      if (!isbetter) {\n        if (zheight < minheight) {\n          isbetter = true;\n        } else if (zheight === minheight) {\n          if (dotz > maxdotz) isbetter = true;\n        }\n      }\n      if (isbetter) {\n        // translate the transformation around the z-axis and onto the z plane:\n        let translation = new Vector3D([-0.5 * (bounds[1].x + bounds[0].x), -0.5 * (bounds[1].y + bounds[0].y), -bounds[0].z]);\n        transformation = transformation.multiply(Matrix4x4.translation(translation));\n        inversetransformation = Matrix4x4.translation(translation.negated()).multiply(inversetransformation);\n        minheight = zheight;\n        maxdotz = dotz;\n        besttransformation = transformation;\n        bestinversetransformation = inversetransformation;\n      }\n      isfirst = false;\n    }\n    return [besttransformation, bestinversetransformation];\n  }\n};\n\nconst getTransformationToFlatLying = function (csg) {\n  let result = csg.getTransformationAndInverseTransformationToFlatLying();\n  return result[0];\n};\n\nconst lieFlat = function (csg) {\n  let transformation = csg.getTransformationToFlatLying();\n  return csg.transform(transformation);\n};\n\n/** cag = cag.overCutInsideCorners(cutterradius);\n * Using a CNC router it's impossible to cut out a true sharp inside corner. The inside corner\n * will be rounded due to the radius of the cutter. This function compensates for this by creating\n * an extra cutout at each inner corner so that the actual cut out shape will be at least as large\n * as needed.\n * @param {Object} _cag - input cag\n * @param {Float} cutterradius - radius to cut inside corners by\n * @returns {CAG} cag with overcutInsideCorners\n */\nconst overCutInsideCorners = function (_cag, cutterradius) {\n  let cag = _cag.canonicalized();\n  // for each vertex determine the 'incoming' side and 'outgoing' side:\n  let pointmap = {}; // tag => {pos: coord, from: [], to: []}\n  cag.sides.map(function (side) {\n    if (!(side.vertex0.getTag() in pointmap)) {\n      pointmap[side.vertex0.getTag()] = {\n        pos: side.vertex0.pos,\n        from: [],\n        to: []\n      };\n    }\n    pointmap[side.vertex0.getTag()].to.push(side.vertex1.pos);\n    if (!(side.vertex1.getTag() in pointmap)) {\n      pointmap[side.vertex1.getTag()] = {\n        pos: side.vertex1.pos,\n        from: [],\n        to: []\n      };\n    }\n    pointmap[side.vertex1.getTag()].from.push(side.vertex0.pos);\n  });\n  // overcut all sharp corners:\n  let cutouts = [];\n  for (let pointtag in pointmap) {\n    let pointobj = pointmap[pointtag];\n    if ((pointobj.from.length === 1) && (pointobj.to.length === 1)) {\n      // ok, 1 incoming side and 1 outgoing side:\n      let fromcoord = pointobj.from[0];\n      let pointcoord = pointobj.pos;\n      let tocoord = pointobj.to[0];\n      let v1 = pointcoord.minus(fromcoord).unit();\n      let v2 = tocoord.minus(pointcoord).unit();\n      let crossproduct = v1.cross(v2);\n      let isInnerCorner = (crossproduct < 0.001);\n      if (isInnerCorner) {\n        // yes it's a sharp corner:\n        let alpha = v2.angleRadians() - v1.angleRadians() + Math.PI;\n        if (alpha < 0) {\n          alpha += 2 * Math.PI;\n        } else if (alpha >= 2 * Math.PI) {\n          alpha -= 2 * Math.PI;\n        }\n        let midvector = v2.minus(v1).unit();\n        let circlesegmentangle = 30 / 180 * Math.PI; // resolution of the circle: segments of 30 degrees\n        // we need to increase the radius slightly so that our imperfect circle will contain a perfect circle of cutterradius\n        let radiuscorrected = cutterradius / Math.cos(circlesegmentangle / 2);\n        let circlecenter = pointcoord.plus(midvector.times(radiuscorrected));\n        // we don't need to create a full circle; a pie is enough. Find the angles for the pie:\n        let startangle = alpha + midvector.angleRadians();\n        let deltaangle = 2 * (Math.PI - alpha);\n        let numsteps = 2 * Math.ceil(deltaangle / circlesegmentangle / 2); // should be even\n        // build the pie:\n        let points = [circlecenter];\n        for (let i = 0; i <= numsteps; i++) {\n          let angle = startangle + i / numsteps * deltaangle;\n          let p = Vector2D.fromAngleRadians(angle).times(radiuscorrected).plus(circlecenter);\n          points.push(p);\n        }\n        cutouts.push(fromPoints(points));\n      }\n    }\n  }\n  return cag.subtract(cutouts);\n};\n\nmodule.exports = {lieFlat, getTransformationToFlatLying, getTransformationAndInverseTransformationToFlatLying, overCutInsideCorners};\n","const OrthoNormalBasis = require('../../core/math/OrthoNormalBasis');\nconst {parseOptionAsBool} = require('../../api/optionParsers');\n\n/** extrude the CAG in a certain plane.\n * Giving just a plane is not enough, multiple different extrusions in the same plane would be possible\n * by rotating around the plane's origin. An additional right-hand vector should be specified as well,\n * and this is exactly a OrthoNormalBasis.\n * @param  {CAG} cag the cag to extrude\n * @param  {Orthonormalbasis} orthonormalbasis characterizes the plane in which to extrude\n * @param  {Float} depth thickness of the extruded shape. Extrusion is done upwards from the plane\n *  (unless symmetrical option is set, see below)\n * @param  {Object} [options] - options for construction\n * @param {Boolean} [options.symmetrical=true] - extrude symmetrically in two directions about the plane\n */\nexport const extrudeInOrthonormalBasis = (cag: any, orthonormalbasis: any, depth: number, options: any) => {\n  // first extrude in the regular Z plane:\n  if (!(orthonormalbasis instanceof OrthoNormalBasis)) {\n    throw new Error('extrudeInPlane: the first parameter should be a OrthoNormalBasis');\n  }\n  let extruded = cag.extrude({\n    offset: [0, 0, depth],\n  });\n  if (parseOptionAsBool(options, 'symmetrical', false)) {\n    extruded = extruded.translate([0, 0, -depth / 2]);\n  }\n  const matrix = orthonormalbasis.getInverseProjectionMatrix();\n  extruded = extruded.transform(matrix);\n  return extruded;\n};\n","const toArray = require('../core/utils/toArray');\n\n/**\n * Centers the given object(s) using the given options (if any)\n * @param {Object} [options] - options for centering\n * @param {Array} [options.axes=[true,true,true]] - axis of which to center, true or false\n * @param {Array} [options.center=[0,0,0]] - point of which to center the object upon\n * @param {Object|Array} objects - the shape(s) to center\n * @return {Object|Array} objects\n *\n * @example\n * let csg = center({axes: [true,false,false]}, sphere()) // center about the X axis\n */\nconst center = function (options, objects) {\n  const defaults = {\n    axes: [true, true, true],\n    center: [0, 0, 0]\n    // TODO : Add addition 'methods' of centering; midpoint, centeriod\n  };\n  options = Object.assign({}, defaults, options);\n  const {axes, center} = options;\n  objects = toArray(objects);\n\n  const results = objects.map(function (object) {\n    let bounds = object.getBounds();\n    let offset = [0, 0, 0];\n    if (axes[0]) offset[0] = center[0] - (bounds[0].x + ((bounds[1].x - bounds[0].x) / 2));\n    if (axes[1]) offset[1] = center[1] - (bounds[0].y + ((bounds[1].y - bounds[0].y) / 2));\n    if (axes[2]) offset[2] = center[2] - (bounds[0].z + ((bounds[1].z - bounds[0].z) / 2));\n    return object.translate(offset);\n  });\n  // if there is more than one result, return them all , otherwise a single one\n  return results.length === 1 ? results[0] : results;\n};\n\nmodule.exports = center;\n","const {EPS, angleEPS} = require('../core/constants');\nconst Vertex = require('../core/math/Vertex3');\nconst Vector2D = require('../core/math/Vector2');\nconst Polygon = require('../core/math/Polygon3');\nconst {fnNumberSort, isCSG} = require('../core/utils');\nconst {fromPoints, fromPointsNoCheck} = require('../core/CAGFactories');\n\nconst expand = function (shape, radius, resolution) {\n  let result;\n  if (isCSG(shape)) {\n    result = shape.union(expandedShellOfCCSG(shape, radius, resolution));\n    result = result.reTesselated();\n    result.properties = shape.properties; // keep original properties\n  } else {\n    result = shape.union(expandedShellOfCAG(shape, radius, resolution));\n  }\n  return result;\n};\n\nconst contract = function (shape, radius, resolution) {\n  let result;\n  if (isCSG(shape)) {\n    result = shape.subtract(expandedShellOfCCSG(shape, radius, resolution));\n    result = result.reTesselated();\n    result.properties = shape.properties; // keep original properties\n  } else {\n    result = shape.subtract(expandedShellOfCAG(shape, radius, resolution));\n  }\n  return result;\n};\n\nconst expandedShellOfCAG = function (_cag, radius, resolution) {\n  const CAG = require('../core/CAG'); // FIXME, circular dependency !!\n  resolution = resolution || 8;\n  if (resolution < 4) resolution = 4;\n  let cags = [];\n  let pointmap = {};\n  let cag = _cag.canonicalized();\n  cag.sides.map(function (side) {\n    let d = side.vertex1.pos.minus(side.vertex0.pos);\n    let dl = d.length();\n    if (dl > EPS) {\n      d = d.times(1.0 / dl);\n      let normal = d.normal().times(radius);\n      let shellpoints = [\n        side.vertex1.pos.plus(normal),\n        side.vertex1.pos.minus(normal),\n        side.vertex0.pos.minus(normal),\n        side.vertex0.pos.plus(normal)\n      ];\n      //      let newcag = fromPointsNoCheck(shellpoints);\n      let newcag = fromPoints(shellpoints);\n      cags.push(newcag);\n      for (let step = 0; step < 2; step++) {\n        let p1 = (step === 0) ? side.vertex0.pos : side.vertex1.pos;\n        let p2 = (step === 0) ? side.vertex1.pos : side.vertex0.pos;\n        let tag = p1.x + ' ' + p1.y;\n        if (!(tag in pointmap)) {\n          pointmap[tag] = [];\n        }\n        pointmap[tag].push({\n          'p1': p1,\n          'p2': p2\n        });\n      }\n    }\n  });\n  for (let tag in pointmap) {\n    let m = pointmap[tag];\n    let angle1, angle2;\n    let pcenter = m[0].p1;\n    if (m.length === 2) {\n      let end1 = m[0].p2;\n      let end2 = m[1].p2;\n      angle1 = end1.minus(pcenter).angleDegrees();\n      angle2 = end2.minus(pcenter).angleDegrees();\n      if (angle2 < angle1) angle2 += 360;\n      if (angle2 >= (angle1 + 360)) angle2 -= 360;\n      if (angle2 < angle1 + 180) {\n        let t = angle2;\n        angle2 = angle1 + 360;\n        angle1 = t;\n      }\n      angle1 += 90;\n      angle2 -= 90;\n    } else {\n      angle1 = 0;\n      angle2 = 360;\n    }\n    let fullcircle = (angle2 > angle1 + 359.999);\n    if (fullcircle) {\n      angle1 = 0;\n      angle2 = 360;\n    }\n    if (angle2 > (angle1 + angleEPS)) {\n      let points = [];\n      if (!fullcircle) {\n        points.push(pcenter);\n      }\n      let numsteps = Math.round(resolution * (angle2 - angle1) / 360);\n      if (numsteps < 1) numsteps = 1;\n      for (let step = 0; step <= numsteps; step++) {\n        let angle = angle1 + step / numsteps * (angle2 - angle1);\n        if (step === numsteps) angle = angle2; // prevent rounding errors\n        let point = pcenter.plus(Vector2D.fromAngleDegrees(angle).times(radius));\n        if ((!fullcircle) || (step > 0)) {\n          points.push(point);\n        }\n      }\n      let newcag = fromPointsNoCheck(points);\n      cags.push(newcag);\n    }\n  }\n  let result = new CAG();\n  result = result.union(cags);\n  return result;\n};\n\n/**\n * Create the expanded shell of the solid:\n * All faces are extruded to get a thickness of 2*radius\n * Cylinders are constructed around every side\n * Spheres are placed on every vertex\n * unionWithThis: if true, the resulting solid will be united with 'this' solid;\n * the result is a true expansion of the solid\n * If false, returns only the shell\n * @param  {Float} radius\n * @param  {Integer} resolution\n * @param  {Boolean} unionWithThis\n */\nconst expandedShellOfCCSG = function (_csg, radius, resolution, unionWithThis) {\n  const CSG = require('../core/CSG'); // FIXME: circular dependency ! CSG => this => CSG\n  const {fromPolygons} = require('../core/CSGFactories'); // FIXME: circular dependency !\n  // const {sphere} = require('./primitives3d') // FIXME: circular dependency !\n  let csg = _csg.reTesselated();\n  let result;\n  if (unionWithThis) {\n    result = csg;\n  } else {\n    result = new CSG();\n  }\n\n  // first extrude all polygons:\n  csg.polygons.map(function (polygon) {\n    let extrudevector = polygon.plane.normal.unit().times(2 * radius);\n    let translatedpolygon = polygon.translate(extrudevector.times(-0.5));\n    let extrudedface = translatedpolygon.extrude(extrudevector);\n    result = result.unionSub(extrudedface, false, false);\n  });\n\n  // Make a list of all unique vertex pairs (i.e. all sides of the solid)\n  // For each vertex pair we collect the following:\n  //   v1: first coordinate\n  //   v2: second coordinate\n  //   planenormals: array of normal vectors of all planes touching this side\n  let vertexpairs = {}; // map of 'vertex pair tag' to {v1, v2, planenormals}\n  csg.polygons.map(function (polygon) {\n    let numvertices = polygon.vertices.length;\n    let prevvertex = polygon.vertices[numvertices - 1];\n    let prevvertextag = prevvertex.getTag();\n    for (let i = 0; i < numvertices; i++) {\n      let vertex = polygon.vertices[i];\n      let vertextag = vertex.getTag();\n      let vertextagpair;\n      if (vertextag < prevvertextag) {\n        vertextagpair = vertextag + '-' + prevvertextag;\n      } else {\n        vertextagpair = prevvertextag + '-' + vertextag;\n      }\n      let obj;\n      if (vertextagpair in vertexpairs) {\n        obj = vertexpairs[vertextagpair];\n      } else {\n        obj = {\n          v1: prevvertex,\n          v2: vertex,\n          planenormals: []\n        };\n        vertexpairs[vertextagpair] = obj;\n      }\n      obj.planenormals.push(polygon.plane.normal);\n\n      prevvertextag = vertextag;\n      prevvertex = vertex;\n    }\n  });\n\n  // now construct a cylinder on every side\n  // The cylinder is always an approximation of a true cylinder: it will have <resolution> polygons\n  // around the sides. We will make sure though that the cylinder will have an edge at every\n  // face that touches this side. This ensures that we will get a smooth fill even\n  // if two edges are at, say, 10 degrees and the resolution is low.\n  // Note: the result is not retesselated yet but it really should be!\n  for (let vertextagpair in vertexpairs) {\n    let vertexpair = vertexpairs[vertextagpair];\n    let startpoint = vertexpair.v1.pos;\n    let endpoint = vertexpair.v2.pos;\n    // our x,y and z vectors:\n    let zbase = endpoint.minus(startpoint).unit();\n    let xbase = vertexpair.planenormals[0].unit();\n    let ybase = xbase.cross(zbase);\n\n    // make a list of angles that the cylinder should traverse:\n    let angles = [];\n\n    // first of all equally spaced around the cylinder:\n    for (let i = 0; i < resolution; i++) {\n      angles.push(i * Math.PI * 2 / resolution);\n    }\n\n    // and also at every normal of all touching planes:\n    for (let i = 0, iMax = vertexpair.planenormals.length; i < iMax; i++) {\n      let planenormal = vertexpair.planenormals[i];\n      let si = ybase.dot(planenormal);\n      let co = xbase.dot(planenormal);\n      let angle = Math.atan2(si, co);\n\n      if (angle < 0) angle += Math.PI * 2;\n      angles.push(angle);\n      angle = Math.atan2(-si, -co);\n      if (angle < 0) angle += Math.PI * 2;\n      angles.push(angle);\n    }\n\n    // this will result in some duplicate angles but we will get rid of those later.\n    // Sort:\n    angles = angles.sort(fnNumberSort);\n\n    // Now construct the cylinder by traversing all angles:\n    let numangles = angles.length;\n    let prevp1;\n    let prevp2;\n    let startfacevertices = [];\n    let endfacevertices = [];\n    let polygons = [];\n    for (let i = -1; i < numangles; i++) {\n      let angle = angles[(i < 0) ? (i + numangles) : i];\n      let si = Math.sin(angle);\n      let co = Math.cos(angle);\n      let p = xbase.times(co * radius).plus(ybase.times(si * radius));\n      let p1 = startpoint.plus(p);\n      let p2 = endpoint.plus(p);\n      let skip = false;\n      if (i >= 0) {\n        if (p1.distanceTo(prevp1) < EPS) {\n          skip = true;\n        }\n      }\n      if (!skip) {\n        if (i >= 0) {\n          startfacevertices.push(new Vertex(p1));\n          endfacevertices.push(new Vertex(p2));\n          let polygonvertices = [\n            new Vertex(prevp2),\n            new Vertex(p2),\n            new Vertex(p1),\n            new Vertex(prevp1)\n          ];\n          let polygon = new Polygon(polygonvertices);\n          polygons.push(polygon);\n        }\n        prevp1 = p1;\n        prevp2 = p2;\n      }\n    }\n    endfacevertices.reverse();\n    polygons.push(new Polygon(startfacevertices));\n    polygons.push(new Polygon(endfacevertices));\n    let cylinder = fromPolygons(polygons);\n    result = result.unionSub(cylinder, false, false);\n  }\n\n  // make a list of all unique vertices\n  // For each vertex we also collect the list of normals of the planes touching the vertices\n  let vertexmap = {};\n  csg.polygons.map(function (polygon) {\n    polygon.vertices.map(function (vertex) {\n      let vertextag = vertex.getTag();\n      let obj;\n      if (vertextag in vertexmap) {\n        obj = vertexmap[vertextag];\n      } else {\n        obj = {\n          pos: vertex.pos,\n          normals: []\n        };\n        vertexmap[vertextag] = obj;\n      }\n      obj.normals.push(polygon.plane.normal);\n    });\n  });\n\n  // and build spheres at each vertex\n  // We will try to set the x and z axis to the normals of 2 planes\n  // This will ensure that our sphere tesselation somewhat matches 2 planes\n  for (let vertextag in vertexmap) {\n    let vertexobj = vertexmap[vertextag];\n    // use the first normal to be the x axis of our sphere:\n    let xaxis = vertexobj.normals[0].unit();\n    // and find a suitable z axis. We will use the normal which is most perpendicular to the x axis:\n    let bestzaxis = null;\n    let bestzaxisorthogonality = 0;\n    for (let i = 1; i < vertexobj.normals.length; i++) {\n      let normal = vertexobj.normals[i].unit();\n      let cross = xaxis.cross(normal);\n      let crosslength = cross.length();\n      if (crosslength > 0.05) {\n        if (crosslength > bestzaxisorthogonality) {\n          bestzaxisorthogonality = crosslength;\n          bestzaxis = normal;\n        }\n      }\n    }\n    if (!bestzaxis) {\n      bestzaxis = xaxis.randomNonParallelVector();\n    }\n    let yaxis = xaxis.cross(bestzaxis).unit();\n    let zaxis = yaxis.cross(xaxis);\n    let _sphere = CSG.sphere({\n      center: vertexobj.pos,\n      radius: radius,\n      resolution: resolution,\n      axes: [xaxis, yaxis, zaxis]\n    });\n    result = result.unionSub(_sphere, false, false);\n  }\n\n  return result;\n};\n\nmodule.exports = {\n  expand,\n  contract,\n  expandedShellOfCAG,\n  expandedShellOfCCSG\n};\n","import {ConvexHull} from './helpers/ConvexHull';\n\nconst {fromPoints} = require('../../core/CAGFactories');\nconst {isCAG} = require('../../core/utils');\n\n/** create a convex hull of the given shapes\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to create a hull around\n * @returns {CSG} new CSG object , a hull around the given shapes\n *\n * @example\n * let hulled = hull(rect(), circle())\n */\nexport function hull(...objects: any[]) {\n  const pts = [];\n\n  let a = objects;\n  if (a[0].length) a = a[0];\n\n  const done: {\n    [hash: string]: number\n  } = {};\n\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < a.length; i++) {              // extract all points of the CAG in the argument list\n    const cag = a[i];\n    if (!isCAG(cag)) {\n      throw new Error('ERROR: hull() accepts only 2D forms / CAG');\n    }\n\n    // tslint:disable-next-line:prefer-for-of\n    for (let j = 0; j < cag.sides.length; j++) {\n      const x = cag.sides[j].vertex0.pos.x;\n      const y = cag.sides[j].vertex0.pos.y;\n      // avoid some coord to appear multiple times\n      if (done['' + x + ',' + y]) {\n        continue;\n      }\n      pts.push({x, y});\n      done['' + x + ',' + y]++;\n      // echo(x,y);\n    }\n  }\n  // echo(pts.length+\" points in\",pts);\n  const convexHull = new ConvexHull();\n\n  convexHull.compute(pts);\n  const indices = convexHull.getIndices();\n\n  if (indices && indices.length > 0) {\n    const ch = [];\n\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < indices.length; i++) {\n      ch.push(pts[indices[i]]);\n    }\n    return fromPoints(ch);\n  }\n}\n","import {polyhedron} from './polyhedron';\nconst {scale} = require('../modifiers/transforms');\n\n/**\n * Geodesic Sphere\n * @param params\n */\nexport function geodesicSphere(params: any) {\n  const defaults = {\n    r: 1,\n    fn: 5,\n  };\n\n  // tslint:disable-next-line:prefer-const\n  let {r, fn} = Object.assign({}, defaults, params);\n\n  const ci = [ // hard-coded data of icosahedron (20 faces, all triangles)\n    [0.850651, 0.000000, -0.525731],\n    [0.850651, -0.000000, 0.525731],\n    [-0.850651, -0.000000, 0.525731],\n    [-0.850651, 0.000000, -0.525731],\n    [0.000000, -0.525731, 0.850651],\n    [0.000000, 0.525731, 0.850651],\n    [0.000000, 0.525731, -0.850651],\n    [0.000000, -0.525731, -0.850651],\n    [-0.525731, -0.850651, -0.000000],\n    [0.525731, -0.850651, -0.000000],\n    [0.525731, 0.850651, 0.000000],\n    [-0.525731, 0.850651, 0.000000]];\n\n  const ti = [[0, 9, 1], [1, 10, 0], [6, 7, 0], [10, 6, 0], [7, 9, 0], [5, 1, 4], [4, 1, 9], [5, 10, 1], [2, 8, 3], [3, 11, 2], [2, 5, 4],\n    [4, 8, 2], [2, 11, 5], [3, 7, 6], [6, 11, 3], [8, 7, 3], [9, 8, 4], [11, 10, 5], [10, 11, 6], [8, 9, 7]];\n\n  // tslint:disable-next-line:no-shadowed-variable\n  const geodesicSubDivide = (p: any, fn: any, offset: any) => {\n    const p1 = p[0];\n    const p2 = p[1];\n    const p3 = p[2];\n    let n = offset;\n\n    // tslint:disable-next-line:no-shadowed-variable\n    const c: any = [];\n\n    // tslint:disable-next-line:no-shadowed-variable\n    const f: any = [];\n\n    //           p3\n    //           /\\\n    //          /__\\     fn = 3\n    //      i  /\\  /\\\n    //        /__\\/__\\       total triangles = 9 (fn*fn)\n    //       /\\  /\\  /\\\n    //     0/__\\/__\\/__\\\n    //    p1 0   j      p2\n\n    for (let i = 0; i < fn; i++) {\n      for (let j = 0; j < fn - i; j++) {\n        const t0 = i / fn;\n        const t1 = (i + 1) / fn;\n        const s0 = j / (fn - i);\n        const s1 = (j + 1) / (fn - i);\n        const s2 = fn - i - 1 ? j / (fn - i - 1) : 1;\n        const q = [];\n\n        q[0] = mix3(mix3(p1, p2, s0), p3, t0);\n        q[1] = mix3(mix3(p1, p2, s1), p3, t0);\n        q[2] = mix3(mix3(p1, p2, s2), p3, t1);\n\n        // -- normalize\n        for (let k = 0; k < 3; k++) {\n          const rv = Math.sqrt(q[k][0] * q[k][0] + q[k][1] * q[k][1] + q[k][2] * q[k][2]);\n          for (let l = 0; l < 3; l++) {\n            q[k][l] /= rv;\n          }\n        }\n        c.push(q[0], q[1], q[2]);\n        f.push([n, n + 1, n + 2]);\n        n += 3;\n\n        if (j < fn - i - 1) {\n          const s3 = fn - i - 1 ? (j + 1) / (fn - i - 1) : 1;\n          q[0] = mix3(mix3(p1, p2, s1), p3, t0);\n          q[1] = mix3(mix3(p1, p2, s3), p3, t1);\n          q[2] = mix3(mix3(p1, p2, s2), p3, t1);\n\n          // -- normalize\n          for (let k = 0; k < 3; k++) {\n            const rv = Math.sqrt(q[k][0] * q[k][0] + q[k][1] * q[k][1] + q[k][2] * q[k][2]);\n            for (let l = 0; l < 3; l++) {\n              q[k][l] /= rv;\n            }\n          }\n          c.push(q[0], q[1], q[2]);\n          f.push([n, n + 1, n + 2]);\n          n += 3;\n        }\n      }\n    }\n    return {points: c, triangles: f, offset: n};\n  };\n\n  const mix3 = (a: any, b: any, fv: any) => {\n    const _f = 1 - fv;\n    const cv: any = [];\n    for (let i = 0; i < 3; i++) {\n      cv[i] = a[i] * _f + b[i] * fv;\n    }\n    return cv;\n  };\n\n  if (params) {\n    if (params.fn) fn = Math.floor(params.fn / 6);\n  }\n\n  if (fn <= 0) fn = 1;\n\n  let c: any[] = [];\n  let f: any[] = [];\n  let offset = 0;\n\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < ti.length; i++) {\n    const g = geodesicSubDivide([ci[ti[i][0]], ci[ti[i][1]], ci[ti[i][2]]], fn, offset);\n    c = c.concat(g.points);\n    f = f.concat(g.triangles);\n    offset = g.offset;\n  }\n  return scale(r, polyhedron({points: c, triangles: f}));\n}\n","const {CSG} = require('../csg');\nconst Polygon3 = require('../core/math/Polygon3');\nconst Vector3 = require('../core/math/Vector3');\nconst Vertex3 = require('../core/math/Vertex3');\n\n/** Construct a polyhedron from the given triangles/ polygons/points\n * @param {Object} [options] - options for construction\n * @param {Array} [options.triangles] - triangles to build the polyhedron from\n * @param {Array} [options.polygons] - polygons to build the polyhedron from\n * @param {Array} [options.points] - points to build the polyhedron from\n * @param {Array} [options.colors] - colors to apply to the polyhedron\n * @returns {CSG} new polyhedron\n *\n * @example\n * let torus1 = polyhedron({\n *   points: [...]\n * })\n */\nexport function polyhedron(params: any) {\n  const pgs = [];\n  const ref = params.triangles || params.polygons;\n  const colors = params.colors || null;\n\n  for (let i = 0; i < ref.length; i++) {\n    const pp = [];\n    for (let j = 0; j < ref[i].length; j++) {\n      pp[j] = params.points[ref[i][j]];\n    }\n\n    const v = [];\n    for (let j = ref[i].length - 1; j >= 0; j--) { // --- we reverse order for examples of OpenSCAD work\n      v.push(new Vertex3(new Vector3(pp[j][0], pp[j][1], pp[j][2])));\n    }\n    let s = Polygon3.defaultShared;\n    if (colors && colors[i]) {\n      s = Polygon3.Shared.fromColor(colors[i]);\n    }\n    pgs.push(new Polygon3(v, s));\n  }\n\n  // forced to import here, otherwise out of order imports mess things up\n  const {fromPolygons} = require('../core/CSGFactories');\n  return fromPolygons(pgs);\n}\n","import {cssColors3ub, TCssColorNames} from './colorTable/cssColors';\n\n/**\n * Converts an CSS color name to RGB color.\n *\n * @param   colorName       The CSS color name\n * @return  Array           The RGB representation, or [0,0,0] default\n */\nexport function css2rgb(colorName: TCssColorNames | string) {\n  const [r, g, b] = cssColors3ub[colorName.toLowerCase() as TCssColorNames];\n  return [r / 255, g / 255, b / 255];\n}\n","/**\n * Hue To RGB\n * @param p\n * @param q\n * @param t\n */\nexport function hue2rgb(p: number, q: number, t: number) {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\n  if (t < 1 / 2) return q;\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n  return p;\n}\n","import {circle, cube, cylinder, geodesicSphere, polygon, polyhedron, sphere, square, torus, triangle} from './primitives';\n\nexport * as color from './color';\n\nexport const primitives2d = {circle, square, polygon, triangle};\nexport const primitives3d = {cube, sphere, geodesicSphere, cylinder, torus, polyhedron};\n\nexport * as booleanOps from './modifiers/booleans';\nexport * as transformations from './modifiers/transforms';\nexport * as extrusions from './modifiers/extrusions';\n\nexport const maths = require('./api/maths');\nexport const text = require('./api/text');\n\n// these are 'external' to this api and we basically just re-export for old api compatibility\n// ...needs to be reviewed\nexport const {CAG, CSG, isCAG, isCSG} = require('./csg');\n","const {CAG} = require('../csg');// we have to import from top level otherwise prototypes are not complete..\n\n/** Construct a square/rectangle\n * @param {Object} [options] - options for construction\n * @param {Float} [options.size=1] - size of the square, either as array or scalar\n * @param {Boolean} [options.center=true] - wether to center the square/rectangle or not\n * @returns {CAG} new square\n *\n * @example\n * let square1 = square({\n *   size: 10\n * })\n */\nexport function square() {\n  let v = [1, 1];\n  let off;\n  const a = arguments;\n  let params = a[0];\n\n  if (params && Number.isFinite(params)) v = [params, params];\n  if (params && params.length) {\n    v = a[0];\n    params = a[1];\n  }\n  if (params && params.size && params.size.length) v = params.size;\n\n  off = [v[0] / 2, v[1] / 2];\n  if (params && params.center === true) off = [0, 0];\n\n  return CAG.rectangle({center: off, radius: [v[0] / 2, v[1] / 2]});\n}\n","const Matrix4x4 = require('./math/Matrix4');\nconst Vector3D = require('./math/Vector3');\nconst Plane = require('./math/Plane');\n\n// Add several convenience methods to the classes that support a transform() method:\nconst addTransformationMethodsToPrototype = function (prot) {\n  prot.mirrored = function (plane) {\n    return this.transform(Matrix4x4.mirroring(plane));\n  };\n\n  prot.mirroredX = function () {\n    let plane = new Plane(Vector3D.Create(1, 0, 0), 0);\n    return this.mirrored(plane);\n  };\n\n  prot.mirroredY = function () {\n    let plane = new Plane(Vector3D.Create(0, 1, 0), 0);\n    return this.mirrored(plane);\n  };\n\n  prot.mirroredZ = function () {\n    let plane = new Plane(Vector3D.Create(0, 0, 1), 0);\n    return this.mirrored(plane);\n  };\n\n  prot.translate = function (v) {\n    return this.transform(Matrix4x4.translation(v));\n  };\n\n  prot.scale = function (f) {\n    return this.transform(Matrix4x4.scaling(f));\n  };\n\n  prot.rotateX = function (deg) {\n    return this.transform(Matrix4x4.rotationX(deg));\n  };\n\n  prot.rotateY = function (deg) {\n    return this.transform(Matrix4x4.rotationY(deg));\n  };\n\n  prot.rotateZ = function (deg) {\n    return this.transform(Matrix4x4.rotationZ(deg));\n  };\n\n  prot.rotate = function (rotationCenter, rotationAxis, degrees) {\n    return this.transform(Matrix4x4.rotation(rotationCenter, rotationAxis, degrees));\n  };\n\n  prot.rotateEulerAngles = function (alpha, beta, gamma, position) {\n    position = position || [0, 0, 0];\n\n    let Rz1 = Matrix4x4.rotationZ(alpha);\n    let Rx = Matrix4x4.rotationX(beta);\n    let Rz2 = Matrix4x4.rotationZ(gamma);\n    let T = Matrix4x4.translation(new Vector3D(position));\n\n    return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T));\n  };\n\n  prot.rotateEulerXYZ = function (alpha, beta, gamma, position) {\n    position = position || [0, 0, 0];\n\n    let Rx = Matrix4x4.rotationX(alpha);\n    let Ry = Matrix4x4.rotationY(beta);\n    let Rz = Matrix4x4.rotationZ(gamma);\n    let T = Matrix4x4.translation(new Vector3D(position));\n\n    return this.transform(Rz.multiply(Ry).multiply(Rx).multiply(T));\n  };\n};\n\n// TODO: consider generalization and adding to addTransformationMethodsToPrototype\nconst addCenteringToPrototype = function (prot, axes) {\n  prot.center = function (cAxes) {\n    cAxes = Array.prototype.map.call(arguments, function (a) {\n      return a; // .toLowerCase();\n    });\n    // no args: center on all axes\n    if (!cAxes.length) {\n      cAxes = axes.slice();\n    }\n    let b = this.getBounds();\n    return this.translate(axes.map(function (a) {\n      return cAxes.indexOf(a) > -1 ? -(b[0][a] + b[1][a]) / 2 : 0;\n    }));\n  };\n};\nmodule.exports = {\n  addTransformationMethodsToPrototype,\n  addCenteringToPrototype\n};\n","const {_CSGDEBUG, EPS} = require('./constants');\nconst Vertex = require('./math/Vertex3');\nconst Polygon = require('./math/Polygon3');\n\nfunction calcInterpolationFactor(pointa, pointb, intermediatePoint) {\n  return pointa.distanceTo(intermediatePoint) / pointa.distanceTo(pointb);\n}\n\n// Returns object:\n// .type:\n//   0: coplanar-front\n//   1: coplanar-back\n//   2: front\n//   3: back\n//   4: spanning\n// In case the polygon is spanning, returns:\n// .front: a Polygon of the front part\n// .back: a Polygon of the back part\nfunction splitPolygonByPlane(plane, polygon) {\n  let result = {\n    type: null,\n    front: null,\n    back: null\n  };\n  // cache in local lets (speedup):\n  let planenormal = plane.normal;\n  let vertices = polygon.vertices;\n  let numvertices = vertices.length;\n  if (polygon.plane.equals(plane)) {\n    result.type = 0;\n  } else {\n    let thisw = plane.w;\n    let hasfront = false;\n    let hasback = false;\n    let vertexIsBack = [];\n    let MINEPS = -EPS;\n    for (let i = 0; i < numvertices; i++) {\n      let t = planenormal.dot(vertices[i].pos) - thisw;\n      let isback = (t < 0);\n      vertexIsBack.push(isback);\n      if (t > EPS) hasfront = true;\n      if (t < MINEPS) hasback = true;\n    }\n    if ((!hasfront) && (!hasback)) {\n      // all points coplanar\n      let t = planenormal.dot(polygon.plane.normal);\n      result.type = (t >= 0) ? 0 : 1;\n    } else if (!hasback) {\n      result.type = 2;\n    } else if (!hasfront) {\n      result.type = 3;\n    } else {\n      // spanning\n      result.type = 4;\n      let frontvertices = [];\n      let backvertices = [];\n      let isback = vertexIsBack[0];\n      for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\n        let vertex = vertices[vertexindex];\n        let nextvertexindex = vertexindex + 1;\n        if (nextvertexindex >= numvertices) nextvertexindex = 0;\n        let nextisback = vertexIsBack[nextvertexindex];\n        if (isback === nextisback) {\n          // line segment is on one side of the plane:\n          if (isback) {\n            backvertices.push(vertex);\n          } else {\n            frontvertices.push(vertex);\n          }\n        } else {\n          // line segment intersects plane:\n          let point = vertex.pos;\n          let nextpoint = vertices[nextvertexindex].pos;\n          let interpolationFactor =\n            calcInterpolationFactor(point, nextpoint, plane.splitLineBetweenPoints(point, nextpoint));\n          let intersectionvertex = vertex.interpolate(vertices[nextvertexindex], interpolationFactor);\n          if (isback) {\n            backvertices.push(vertex);\n            backvertices.push(intersectionvertex);\n            frontvertices.push(intersectionvertex);\n          } else {\n            frontvertices.push(vertex);\n            frontvertices.push(intersectionvertex);\n            backvertices.push(intersectionvertex);\n          }\n        }\n        isback = nextisback;\n      } // for vertexindex\n      // remove duplicate vertices:\n      let EPS_SQUARED = EPS * EPS;\n      if (backvertices.length >= 3) {\n        let prevvertex = backvertices[backvertices.length - 1];\n        for (let vertexindex = 0; vertexindex < backvertices.length; vertexindex++) {\n          let vertex = backvertices[vertexindex];\n          if (vertex.pos.distanceToSquared(prevvertex.pos) < EPS_SQUARED) {\n            backvertices.splice(vertexindex, 1);\n            vertexindex--;\n          }\n          prevvertex = vertex;\n        }\n      }\n      if (frontvertices.length >= 3) {\n        let prevvertex = frontvertices[frontvertices.length - 1];\n        for (let vertexindex = 0; vertexindex < frontvertices.length; vertexindex++) {\n          let vertex = frontvertices[vertexindex];\n          if (vertex.pos.distanceToSquared(prevvertex.pos) < EPS_SQUARED) {\n            frontvertices.splice(vertexindex, 1);\n            vertexindex--;\n          }\n          prevvertex = vertex;\n        }\n      }\n      if (frontvertices.length >= 3) {\n        result.front = new Polygon(frontvertices, polygon.shared, polygon.plane);\n      }\n      if (backvertices.length >= 3) {\n        result.back = new Polygon(backvertices, polygon.shared, polygon.plane);\n      }\n    }\n  }\n  return result;\n}\n\n// # class PolygonTreeNode\n// This class manages hierarchical splits of polygons\n// At the top is a root node which doesn hold a polygon, only child PolygonTreeNodes\n// Below that are zero or more 'top' nodes; each holds a polygon. The polygons can be in different planes\n// splitByPlane() splits a node by a plane. If the plane intersects the polygon, two new child nodes\n// are created holding the splitted polygon.\n// getPolygons() retrieves the polygon from the tree. If for PolygonTreeNode the polygon is split but\n// the two split parts (child nodes) are still intact, then the unsplit polygon is returned.\n// This ensures that we can safely split a polygon into many fragments. If the fragments are untouched,\n//  getPolygons() will return the original unsplit polygon instead of the fragments.\n// remove() removes a polygon from the tree. Once a polygon is removed, the parent polygons are invalidated\n// since they are no longer intact.\n// constructor creates the root node:\nconst PolygonTreeNode = function () {\n  this.parent = null;\n  this.children = [];\n  this.polygon = null;\n  this.removed = false;\n};\n\nPolygonTreeNode.prototype = {\n  // fill the tree with polygons. Should be called on the root node only; child nodes must\n  // always be a derivate (split) of the parent node.\n  addPolygons: function (polygons) {\n    // new polygons can only be added to root node; children can only be splitted polygons\n    if (!this.isRootNode()) {\n      throw new Error('Assertion failed');\n    }\n    let _this = this;\n    polygons.map(function (polygon) {\n      _this.addChild(polygon);\n    });\n  },\n\n  // remove a node\n  // - the siblings become toplevel nodes\n  // - the parent is removed recursively\n  remove: function () {\n    if (!this.removed) {\n      this.removed = true;\n\n      if (_CSGDEBUG) {\n        if (this.isRootNode()) throw new Error('Assertion failed'); // can't remove root node\n        if (this.children.length) throw new Error('Assertion failed'); // we shouldn't remove nodes with children\n      }\n\n      // remove ourselves from the parent's children list:\n      let parentschildren = this.parent.children;\n      let i = parentschildren.indexOf(this);\n      if (i < 0) throw new Error('Assertion failed');\n      parentschildren.splice(i, 1);\n\n      // invalidate the parent's polygon, and of all parents above it:\n      this.parent.recursivelyInvalidatePolygon();\n    }\n  },\n\n  isRemoved: function () {\n    return this.removed;\n  },\n\n  isRootNode: function () {\n    return !this.parent;\n  },\n\n  // invert all polygons in the tree. Call on the root node\n  invert: function () {\n    if (!this.isRootNode()) throw new Error('Assertion failed'); // can only call this on the root node\n    this.invertSub();\n  },\n\n  getPolygon: function () {\n    if (!this.polygon) throw new Error('Assertion failed'); // doesn't have a polygon, which means that it has been broken down\n    return this.polygon;\n  },\n\n  getPolygons: function (result) {\n    let children = [this];\n    let queue = [children];\n    let i, j, l, node;\n    for (i = 0; i < queue.length; ++i) { // queue size can change in loop, don't cache length\n      children = queue[i];\n      for (j = 0, l = children.length; j < l; j++) { // ok to cache length\n        node = children[j];\n        if (node.polygon) {\n          // the polygon hasn't been broken yet. We can ignore the children and return our polygon:\n          result.push(node.polygon);\n        } else {\n          // our polygon has been split up and broken, so gather all subpolygons from the children\n          queue.push(node.children);\n        }\n      }\n    }\n  },\n\n  // split the node by a plane; add the resulting nodes to the frontnodes and backnodes array\n  // If the plane doesn't intersect the polygon, the 'this' object is added to one of the arrays\n  // If the plane does intersect the polygon, two new child nodes are created for the front and back fragments,\n  //  and added to both arrays.\n  splitByPlane: function (plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes) {\n    if (this.children.length) {\n      let queue = [this.children];\n      let i;\n      let j;\n      let l;\n      let node;\n      let nodes;\n      for (i = 0; i < queue.length; i++) { // queue.length can increase, do not cache\n        nodes = queue[i];\n        for (j = 0, l = nodes.length; j < l; j++) { // ok to cache length\n          node = nodes[j];\n          if (node.children.length) {\n            queue.push(node.children);\n          } else {\n            // no children. Split the polygon:\n            node._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes);\n          }\n        }\n      }\n    } else {\n      this._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes);\n    }\n  },\n\n  // only to be called for nodes with no children\n  _splitByPlane: function (plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes) {\n    let polygon = this.polygon;\n    if (polygon) {\n      let bound = polygon.boundingSphere();\n      let sphereradius = bound[1] + EPS; // FIXME Why add imprecision?\n      let planenormal = plane.normal;\n      let spherecenter = bound[0];\n      let d = planenormal.dot(spherecenter) - plane.w;\n      if (d > sphereradius) {\n        frontnodes.push(this);\n      } else if (d < -sphereradius) {\n        backnodes.push(this);\n      } else {\n        let splitresult = splitPolygonByPlane(plane, polygon);\n        switch (splitresult.type) {\n          case 0:\n            // coplanar front:\n            coplanarfrontnodes.push(this);\n            break;\n\n          case 1:\n            // coplanar back:\n            coplanarbacknodes.push(this);\n            break;\n\n          case 2:\n            // front:\n            frontnodes.push(this);\n            break;\n\n          case 3:\n            // back:\n            backnodes.push(this);\n            break;\n\n          case 4:\n            // spanning:\n            if (splitresult.front) {\n              let frontnode = this.addChild(splitresult.front);\n              frontnodes.push(frontnode);\n            }\n            if (splitresult.back) {\n              let backnode = this.addChild(splitresult.back);\n              backnodes.push(backnode);\n            }\n            break;\n        }\n      }\n    }\n  },\n\n  // PRIVATE methods from here:\n  // add child to a node\n  // this should be called whenever the polygon is split\n  // a child should be created for every fragment of the split polygon\n  // returns the newly created child\n  addChild: function (polygon) {\n    let newchild = new PolygonTreeNode();\n    newchild.parent = this;\n    newchild.polygon = polygon;\n    this.children.push(newchild);\n    return newchild;\n  },\n\n  invertSub: function () {\n    let children = [this];\n    let queue = [children];\n    let i, j, l, node;\n    for (i = 0; i < queue.length; i++) {\n      children = queue[i];\n      for (j = 0, l = children.length; j < l; j++) {\n        node = children[j];\n        if (node.polygon) {\n          node.polygon = node.polygon.flipped();\n        }\n        queue.push(node.children);\n      }\n    }\n  },\n\n  recursivelyInvalidatePolygon: function () {\n    let node = this;\n    while (node.polygon) {\n      node.polygon = null;\n      if (node.parent) {\n        node = node.parent;\n      }\n    }\n  }\n};\n\n// # class Tree\n// This is the root of a BSP tree\n// We are using this separate class for the root of the tree, to hold the PolygonTreeNode root\n// The actual tree is kept in this.rootnode\nconst Tree = function (polygons) {\n  this.polygonTree = new PolygonTreeNode();\n  this.rootnode = new Node(null);\n  if (polygons) this.addPolygons(polygons);\n};\n\nTree.prototype = {\n  invert: function () {\n    this.polygonTree.invert();\n    this.rootnode.invert();\n  },\n\n  // Remove all polygons in this BSP tree that are inside the other BSP tree\n  // `tree`.\n  clipTo: function (tree, alsoRemovecoplanarFront) {\n    alsoRemovecoplanarFront = !!alsoRemovecoplanarFront;\n    this.rootnode.clipTo(tree, alsoRemovecoplanarFront);\n  },\n\n  allPolygons: function () {\n    let result = [];\n    this.polygonTree.getPolygons(result);\n    return result;\n  },\n\n  addPolygons: function (polygons) {\n    let _this = this;\n    let polygontreenodes = polygons.map(function (p) {\n      return _this.polygonTree.addChild(p);\n    });\n    this.rootnode.addPolygonTreeNodes(polygontreenodes);\n  }\n};\n\n// # class Node\n// Holds a node in a BSP tree. A BSP tree is built from a collection of polygons\n// by picking a polygon to split along.\n// Polygons are not stored directly in the tree, but in PolygonTreeNodes, stored in\n// this.polygontreenodes. Those PolygonTreeNodes are children of the owning\n// Tree.polygonTree\n// This is not a leafy BSP tree since there is\n// no distinction between internal and leaf nodes.\nconst Node = function (parent) {\n  this.plane = null;\n  this.front = null;\n  this.back = null;\n  this.polygontreenodes = [];\n  this.parent = parent;\n};\n\nNode.prototype = {\n  // Convert solid space to empty space and empty space to solid space.\n  invert: function () {\n    let queue = [this];\n    let node;\n    for (let i = 0; i < queue.length; i++) {\n      node = queue[i];\n      if (node.plane) node.plane = node.plane.flipped();\n      if (node.front) queue.push(node.front);\n      if (node.back) queue.push(node.back);\n      let temp = node.front;\n      node.front = node.back;\n      node.back = temp;\n    }\n  },\n\n  // clip polygontreenodes to our plane\n  // calls remove() for all clipped PolygonTreeNodes\n  clipPolygons: function (polygontreenodes, alsoRemovecoplanarFront) {\n    let args = {'node': this, 'polygontreenodes': polygontreenodes};\n    let node;\n    let stack = [];\n\n    do {\n      node = args.node;\n      polygontreenodes = args.polygontreenodes;\n\n      // begin \"function\"\n      if (node.plane) {\n        let backnodes = [];\n        let frontnodes = [];\n        let coplanarfrontnodes = alsoRemovecoplanarFront ? backnodes : frontnodes;\n        let plane = node.plane;\n        let numpolygontreenodes = polygontreenodes.length;\n        for (let i = 0; i < numpolygontreenodes; i++) {\n          let node1 = polygontreenodes[i];\n          if (!node1.isRemoved()) {\n            node1.splitByPlane(plane, coplanarfrontnodes, backnodes, frontnodes, backnodes);\n          }\n        }\n\n        if (node.front && (frontnodes.length > 0)) {\n          stack.push({'node': node.front, 'polygontreenodes': frontnodes});\n        }\n        let numbacknodes = backnodes.length;\n        if (node.back && (numbacknodes > 0)) {\n          stack.push({'node': node.back, 'polygontreenodes': backnodes});\n        } else {\n          // there's nothing behind this plane. Delete the nodes behind this plane:\n          for (let i = 0; i < numbacknodes; i++) {\n            backnodes[i].remove();\n          }\n        }\n      }\n      args = stack.pop();\n    } while (typeof (args) !== 'undefined');\n  },\n\n  // Remove all polygons in this BSP tree that are inside the other BSP tree\n  // `tree`.\n  clipTo: function (tree, alsoRemovecoplanarFront) {\n    let node = this;\n    let stack = [];\n    do {\n      if (node.polygontreenodes.length > 0) {\n        tree.rootnode.clipPolygons(node.polygontreenodes, alsoRemovecoplanarFront);\n      }\n      if (node.front) stack.push(node.front);\n      if (node.back) stack.push(node.back);\n      node = stack.pop();\n    } while (typeof (node) !== 'undefined');\n  },\n\n  addPolygonTreeNodes: function (polygontreenodes) {\n    let args = {'node': this, 'polygontreenodes': polygontreenodes};\n    let node;\n    let stack = [];\n    do {\n      node = args.node;\n      polygontreenodes = args.polygontreenodes;\n\n      if (polygontreenodes.length === 0) {\n        args = stack.pop();\n        continue;\n      }\n      let _this = node;\n      if (!node.plane) {\n        let bestplane = polygontreenodes[0].getPolygon().plane;\n        node.plane = bestplane;\n      }\n      let frontnodes = [];\n      let backnodes = [];\n\n      for (let i = 0, n = polygontreenodes.length; i < n; ++i) {\n        polygontreenodes[i].splitByPlane(_this.plane, _this.polygontreenodes, backnodes, frontnodes, backnodes);\n      }\n\n      if (frontnodes.length > 0) {\n        if (!node.front) node.front = new Node(node);\n        stack.push({'node': node.front, 'polygontreenodes': frontnodes});\n      }\n      if (backnodes.length > 0) {\n        if (!node.back) node.back = new Node(node);\n        stack.push({'node': node.back, 'polygontreenodes': backnodes});\n      }\n\n      args = stack.pop();\n    } while (typeof (args) !== 'undefined');\n  },\n\n  getParentPlaneNormals: function (normals, maxdepth) {\n    if (maxdepth > 0) {\n      if (this.parent) {\n        normals.push(this.parent.plane.normal);\n        this.parent.getParentPlaneNormals(normals, maxdepth - 1);\n      }\n    }\n  }\n};\n\nmodule.exports = Tree;\n","const {EPS} = require('../constants');\nconst {solve2Linear} = require('../utils');\n\n// see if the line between p0start and p0end intersects with the line between p1start and p1end\n// returns true if the lines strictly intersect, the end points are not counted!\nconst linesIntersect = function (p0start, p0end, p1start, p1end) {\n  if (p0end.equals(p1start) || p1end.equals(p0start)) {\n    let d = p1end.minus(p1start).unit().plus(p0end.minus(p0start).unit()).length();\n    if (d < EPS) {\n      return true;\n    }\n  } else {\n    let d0 = p0end.minus(p0start);\n    let d1 = p1end.minus(p1start);\n    // FIXME These epsilons need review and testing\n    if (Math.abs(d0.cross(d1)) < 1e-9) return false; // lines are parallel\n    let alphas = solve2Linear(-d0.x, d1.x, -d0.y, d1.y, p0start.x - p1start.x, p0start.y - p1start.y);\n    if ((alphas[0] > 1e-6) && (alphas[0] < 0.999999) && (alphas[1] > 1e-5) && (alphas[1] < 0.999999)) return true;\n    // if( (alphas[0] >= 0) && (alphas[0] <= 1) && (alphas[1] >= 0) && (alphas[1] <= 1) ) return true;\n  }\n  return false;\n};\n\nmodule.exports = {linesIntersect};\n","const {isCAG} = require('../../core/utils');\n\n/** union/ combine the given shapes\n * @param {Object(s)|Array} objects - objects to combine : can be given\n * - one by one: union(a,b,c) or\n * - as an array: union([a,b,c])\n * @returns {CSG} new CSG object, the union of all input shapes\n *\n * @example\n * let unionOfSphereAndCube = union(sphere(), cube())\n */\nexport const union = (...objects: any[]) => {\n  const defaults = {\n    extrude2d: false,\n  };\n\n  let options = {...defaults};\n  let o;\n  let i = 0;\n  let a = objects;\n\n  if (a[0].length) a = a[0];\n\n  if ('extrude2d' in a[0]) { // first parameter is options\n    options = Object.assign({}, defaults, a[0]);\n    o = a[i++];\n  }\n\n  o = a[i++];\n\n  // TODO: add option to be able to set this?\n  if ((typeof (a[i]) === 'object') && isCAG(a[i]) && options.extrude2d) {\n    o = a[i].extrude({offset: [0, 0, 0.1]}); // -- convert a 2D shape to a thin solid, note: do not a[i] = a[i].extrude()\n  }\n  for (; i < a.length; i++) {\n    let obj = a[i];\n\n    if ((typeof (a[i]) === 'object') && isCAG(a[i]) && options.extrude2d) {\n      obj = a[i].extrude({offset: [0, 0, 0.1]}); // -- convert a 2D shape to a thin solid:\n    }\n    o = o.union(obj);\n  }\n  return o;\n}\n","const {isCAG} = require('../../core/utils');\n\n/** difference/ subtraction of the given shapes ie:\n * cut out C From B From A ie : a - b - c etc\n * @param {Object(s)|Array} objects - objects to subtract\n * can be given\n * - one by one: difference(a,b,c) or\n * - as an array: difference([a,b,c])\n * @returns {CSG} new CSG object, the difference of all input shapes\n *\n * @example\n * let differenceOfSphereAndCube = difference(sphere(), cube())\n */\nexport const difference = (...objects: any[]) => {\n  let object;\n  let i = 0;\n  let a = objects;\n  if (a[0].length) a = a[0];\n  for (object = a[i++]; i < a.length; i++) {\n    if (isCAG(a[i])) {\n      object = object.subtract(a[i]);\n    } else {\n      object = object.subtract(a[i].setColor(1, 1, 0)); // -- color the cuts\n    }\n  }\n  return object;\n};\n","const {isCAG} = require('../../core/utils');\n\n/** intersection of the given shapes: ie keep only the common parts between the given shapes\n * @param {Object(s)|Array} objects - objects to intersect\n * can be given\n * - one by one: intersection(a,b,c) or\n * - as an array: intersection([a,b,c])\n * @returns {CSG} new CSG object, the intersection of all input shapes\n *\n * @example\n * let intersectionOfSphereAndCube = intersection(sphere(), cube())\n */\nexport const intersection = (...objects: any[]) => {\n  let object;\n  let i = 0;\n  let a = objects;\n  if (a[0].length) a = a[0];\n  for (object = a[i++]; i < a.length; i++) {\n    if (isCAG(a[i])) {\n      object = object.intersect(a[i]);\n    } else {\n      object = object.intersect(a[i].setColor(1, 1, 0)); // -- color the cuts\n    }\n  }\n  return object;\n}\n","const FuzzyFactory = require('./FuzzyFactory');\nconst {EPS} = require('./constants');\nconst Side = require('./math/Side');\n\nconst FuzzyCAGFactory = function () {\n  this.vertexfactory = new FuzzyFactory(2, EPS);\n};\n\nFuzzyCAGFactory.prototype = {\n  getVertex: function (sourcevertex) {\n    let elements = [sourcevertex.pos._x, sourcevertex.pos._y];\n    let result = this.vertexfactory.lookupOrCreate(elements, function (els) {\n      return sourcevertex;\n    });\n    return result;\n  },\n\n  getSide: function (sourceside) {\n    let vertex0 = this.getVertex(sourceside.vertex0);\n    let vertex1 = this.getVertex(sourceside.vertex1);\n    return new Side(vertex0, vertex1);\n  }\n};\n\nmodule.exports = FuzzyCAGFactory;\n","const {EPS} = require('../constants');\nconst OrthoNormalBasis = require('./OrthoNormalBasis');\nconst {interpolateBetween2DPointsForY, insertSorted, fnNumberSort} = require('../utils');\nconst Vertex = require('./Vertex3');\nconst Vector2D = require('./Vector2');\nconst Line2D = require('./Line2');\nconst Polygon = require('./Polygon3');\n\n\nconst calcInterpolationFactor = function (pointa, pointb, intermediatePoint) {\n  return pointa.distanceTo(intermediatePoint) / pointa.distanceTo(pointb);\n};\n\n// Retesselation function for a set of coplanar polygons. See the introduction at the top of\n// this file.\nconst reTesselateCoplanarPolygons = function (sourcepolygons, destpolygons) {\n  let numpolygons = sourcepolygons.length;\n  if (numpolygons > 0) {\n    let plane = sourcepolygons[0].plane;\n    let shared = sourcepolygons[0].shared;\n    let orthobasis = new OrthoNormalBasis(plane);\n    let polygonvertices2d = []; // array of array of Vector2D\n    let polygonuvcoordinates = []; // array of array of Vector2D\n    let polygontopvertexindexes = []; // array of indexes of topmost vertex per polygon\n    let topy2polygonindexes = {};\n    let ycoordinatetopolygonindexes = {};\n\n    let xcoordinatebins = {};\n    let ycoordinatebins = {};\n\n    // convert all polygon vertices to 2D\n    // Make a list of all encountered y coordinates\n    // And build a map of all polygons that have a vertex at a certain y coordinate:\n    let ycoordinateBinningFactor = 1.0 / EPS * 10;\n    for (let polygonindex = 0; polygonindex < numpolygons; polygonindex++) {\n      let poly3d = sourcepolygons[polygonindex];\n      let vertices2d = [];\n      let uvcoordinates = [];\n      let numvertices = poly3d.vertices.length;\n      let minindex = -1;\n      if (numvertices > 0) {\n        let miny, maxy, maxindex;\n        for (let i = 0; i < numvertices; i++) {\n          let pos2d = orthobasis.to2D(poly3d.vertices[i].pos);\n          let uvcoordinate = poly3d.vertices[i].uv;\n          // perform binning of y coordinates: If we have multiple vertices very\n          // close to each other, give them the same y coordinate:\n          let ycoordinatebin = Math.floor(pos2d.y * ycoordinateBinningFactor);\n          let newy;\n          if (ycoordinatebin in ycoordinatebins) {\n            newy = ycoordinatebins[ycoordinatebin];\n          } else if (ycoordinatebin + 1 in ycoordinatebins) {\n            newy = ycoordinatebins[ycoordinatebin + 1];\n          } else if (ycoordinatebin - 1 in ycoordinatebins) {\n            newy = ycoordinatebins[ycoordinatebin - 1];\n          } else {\n            newy = pos2d.y;\n            ycoordinatebins[ycoordinatebin] = pos2d.y;\n          }\n          pos2d = Vector2D.Create(pos2d.x, newy);\n          vertices2d.push(pos2d);\n          uvcoordinates.push(uvcoordinate);\n          let y = pos2d.y;\n          if ((i === 0) || (y < miny)) {\n            miny = y;\n            minindex = i;\n          }\n          if ((i === 0) || (y > maxy)) {\n            maxy = y;\n            maxindex = i;\n          }\n          if (!(y in ycoordinatetopolygonindexes)) {\n            ycoordinatetopolygonindexes[y] = {};\n          }\n          ycoordinatetopolygonindexes[y][polygonindex] = true;\n        }\n        if (miny >= maxy) {\n          // degenerate polygon, all vertices have same y coordinate. Just ignore it from now:\n          vertices2d = [];\n          uvcoordinates = [];\n          numvertices = 0;\n          minindex = -1;\n        } else {\n          if (!(miny in topy2polygonindexes)) {\n            topy2polygonindexes[miny] = [];\n          }\n          topy2polygonindexes[miny].push(polygonindex);\n        }\n      } // if(numvertices > 0)\n      // reverse the vertex order:\n      vertices2d.reverse();\n      uvcoordinates.reverse();\n      minindex = numvertices - minindex - 1;\n      polygonvertices2d.push(vertices2d);\n      polygonuvcoordinates.push(uvcoordinates);\n      polygontopvertexindexes.push(minindex);\n    }\n    let ycoordinates = [];\n    for (let ycoordinate in ycoordinatetopolygonindexes) ycoordinates.push(ycoordinate);\n    ycoordinates.sort(fnNumberSort);\n\n    // Now we will iterate over all y coordinates, from lowest to highest y coordinate\n    // activepolygons: source polygons that are 'active', i.e. intersect with our y coordinate\n    //   Is sorted so the polygons are in left to right order\n    // Each element in activepolygons has these properties:\n    //        polygonindex: the index of the source polygon (i.e. an index into the sourcepolygons\n    //                      and polygonvertices2d arrays)\n    //        leftvertexindex: the index of the vertex at the left side of the polygon (lowest x)\n    //                         that is at or just above the current y coordinate\n    //        rightvertexindex: dito at right hand side of polygon\n    //        topleft, bottomleft: coordinates of the left side of the polygon crossing the current y coordinate\n    //        topright, bottomright: coordinates of the right hand side of the polygon crossing the current y coordinate\n    let activepolygons = [];\n    let prevoutpolygonrow = [];\n    for (let yindex = 0; yindex < ycoordinates.length; yindex++) {\n      let newoutpolygonrow = [];\n      let ycoordinate_as_string = ycoordinates[yindex];\n      let ycoordinate = Number(ycoordinate_as_string);\n\n      // update activepolygons for this y coordinate:\n      // - Remove any polygons that end at this y coordinate\n      // - update leftvertexindex and rightvertexindex (which point to the current vertex index\n      //   at the the left and right side of the polygon\n      // Iterate over all polygons that have a corner at this y coordinate:\n      let polygonindexeswithcorner = ycoordinatetopolygonindexes[ycoordinate_as_string];\n      for (let activepolygonindex = 0; activepolygonindex < activepolygons.length; ++activepolygonindex) {\n        let activepolygon = activepolygons[activepolygonindex];\n        let polygonindex = activepolygon.polygonindex;\n        if (polygonindexeswithcorner[polygonindex]) {\n          // this active polygon has a corner at this y coordinate:\n          let vertices2d = polygonvertices2d[polygonindex];\n          let uvcoordinates = polygonuvcoordinates[polygonindex];\n          let numvertices = vertices2d.length;\n          let newleftvertexindex = activepolygon.leftvertexindex;\n          let newrightvertexindex = activepolygon.rightvertexindex;\n          // See if we need to increase leftvertexindex or decrease rightvertexindex:\n          while (true) {\n            let nextleftvertexindex = newleftvertexindex + 1;\n            if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0;\n            if (vertices2d[nextleftvertexindex].y !== ycoordinate) break;\n            newleftvertexindex = nextleftvertexindex;\n          }\n          let nextrightvertexindex = newrightvertexindex - 1;\n          if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1;\n          if (vertices2d[nextrightvertexindex].y === ycoordinate) {\n            newrightvertexindex = nextrightvertexindex;\n          }\n          if ((newleftvertexindex !== activepolygon.leftvertexindex) && (newleftvertexindex === newrightvertexindex)) {\n            // We have increased leftvertexindex or decreased rightvertexindex, and now they point to the same vertex\n            // This means that this is the bottom point of the polygon. We'll remove it:\n            activepolygons.splice(activepolygonindex, 1);\n            --activepolygonindex;\n          } else {\n            activepolygon.leftvertexindex = newleftvertexindex;\n            activepolygon.rightvertexindex = newrightvertexindex;\n            activepolygon.topleft = vertices2d[newleftvertexindex];\n            activepolygon.topleftuv = uvcoordinates[newleftvertexindex];\n            activepolygon.topright = vertices2d[newrightvertexindex];\n            activepolygon.toprightuv = uvcoordinates[newrightvertexindex];\n            let nextleftvertexindex = newleftvertexindex + 1;\n            if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0;\n            activepolygon.bottomleft = vertices2d[nextleftvertexindex];\n            activepolygon.bottomleftuv = uvcoordinates[nextleftvertexindex];\n            let nextrightvertexindex = newrightvertexindex - 1;\n            if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1;\n            activepolygon.bottomright = vertices2d[nextrightvertexindex];\n            activepolygon.bottomrightuv = uvcoordinates[nextrightvertexindex];\n          }\n        } // if polygon has corner here\n      } // for activepolygonindex\n      let nextycoordinate;\n      if (yindex >= ycoordinates.length - 1) {\n        // last row, all polygons must be finished here:\n        activepolygons = [];\n        nextycoordinate = null;\n      } else // yindex < ycoordinates.length-1\n      {\n        nextycoordinate = Number(ycoordinates[yindex + 1]);\n        let middleycoordinate = 0.5 * (ycoordinate + nextycoordinate);\n        // update activepolygons by adding any polygons that start here:\n        let startingpolygonindexes = topy2polygonindexes[ycoordinate_as_string];\n        for (let polygonindex_key in startingpolygonindexes) {\n          let polygonindex = startingpolygonindexes[polygonindex_key];\n          let vertices2d = polygonvertices2d[polygonindex];\n          let uvcoordinates = polygonuvcoordinates[polygonindex];\n          let numvertices = vertices2d.length;\n          let topvertexindex = polygontopvertexindexes[polygonindex];\n          // the top of the polygon may be a horizontal line. In that case topvertexindex can point to any point on this line.\n          // Find the left and right topmost vertices which have the current y coordinate:\n          let topleftvertexindex = topvertexindex;\n          while (true) {\n            let i = topleftvertexindex + 1;\n            if (i >= numvertices) i = 0;\n            if (vertices2d[i].y !== ycoordinate) break;\n            if (i === topvertexindex) break; // should not happen, but just to prevent endless loops\n            topleftvertexindex = i;\n          }\n          let toprightvertexindex = topvertexindex;\n          while (true) {\n            let i = toprightvertexindex - 1;\n            if (i < 0) i = numvertices - 1;\n            if (vertices2d[i].y !== ycoordinate) break;\n            if (i === topleftvertexindex) break; // should not happen, but just to prevent endless loops\n            toprightvertexindex = i;\n          }\n          let nextleftvertexindex = topleftvertexindex + 1;\n          if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0;\n          let nextrightvertexindex = toprightvertexindex - 1;\n          if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1;\n          let newactivepolygon = {\n            polygonindex: polygonindex,\n            leftvertexindex: topleftvertexindex,\n            rightvertexindex: toprightvertexindex,\n            topleft: vertices2d[topleftvertexindex],\n            topleftuv: uvcoordinates[topleftvertexindex],\n            topright: vertices2d[toprightvertexindex],\n            toprightuv: uvcoordinates[toprightvertexindex],\n            bottomleft: vertices2d[nextleftvertexindex],\n            bottomleftuv: uvcoordinates[nextleftvertexindex],\n            bottomright: vertices2d[nextrightvertexindex],\n            bottomrightuv: uvcoordinates[nextrightvertexindex]\n          };\n          insertSorted(activepolygons, newactivepolygon, function (el1, el2) {\n            let x1 = interpolateBetween2DPointsForY(\n              el1.topleft, el1.bottomleft, middleycoordinate);\n            let x2 = interpolateBetween2DPointsForY(\n              el2.topleft, el2.bottomleft, middleycoordinate);\n            if (x1 > x2) return 1;\n            if (x1 < x2) return -1;\n            return 0;\n          });\n        } // for(let polygonindex in startingpolygonindexes)\n      } //  yindex < ycoordinates.length-1\n      // if( (yindex === ycoordinates.length-1) || (nextycoordinate - ycoordinate > EPS) )\n      if (true) {\n        // Now activepolygons is up to date\n        // Build the output polygons for the next row in newoutpolygonrow:\n        for (let activepolygonKey in activepolygons) {\n          let activepolygon = activepolygons[activepolygonKey];\n          let polygonindex = activepolygon.polygonindex;\n          let vertices2d = polygonvertices2d[polygonindex];\n          let numvertices = vertices2d.length;\n\n          let x = interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, ycoordinate);\n          let topleft = Vector2D.Create(x, ycoordinate);\n          let topleftuv = activepolygon.topleftuv.lerp(activepolygon.bottomleftuv,\n            calcInterpolationFactor(activepolygon.topleft,\n              activepolygon.bottomleft,\n              topleft));\n          x = interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, ycoordinate);\n          let topright = Vector2D.Create(x, ycoordinate);\n          let toprightuv = activepolygon.toprightuv.lerp(activepolygon.bottomrightuv,\n            calcInterpolationFactor(activepolygon.topright,\n              activepolygon.bottomright,\n              topright));\n          x = interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, nextycoordinate);\n          let bottomleft = Vector2D.Create(x, nextycoordinate);\n          let bottomleftuv = activepolygon.topleftuv.lerp(activepolygon.bottomleftuv,\n            calcInterpolationFactor(activepolygon.topleft,\n              activepolygon.bottomleft,\n              bottomleft));\n          x = interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, nextycoordinate);\n          let bottomright = Vector2D.Create(x, nextycoordinate);\n          let bottomrightuv = activepolygon.toprightuv.lerp(activepolygon.bottomrightuv,\n            calcInterpolationFactor(activepolygon.topright,\n              activepolygon.bottomright,\n              bottomright));\n          let outpolygon = {\n            topleft: topleft,\n            topleftuv: topleftuv,\n            topright: topright,\n            toprightuv: toprightuv,\n            bottomleft: bottomleft,\n            bottomleftuv: bottomleftuv,\n            bottomright: bottomright,\n            bottomrightuv: bottomrightuv,\n            leftline: Line2D.fromPoints(topleft, bottomleft),\n            rightline: Line2D.fromPoints(bottomright, topright)\n          };\n          if (newoutpolygonrow.length > 0) {\n            let prevoutpolygon = newoutpolygonrow[newoutpolygonrow.length - 1];\n            let d1 = outpolygon.topleft.distanceTo(prevoutpolygon.topright);\n            let d2 = outpolygon.bottomleft.distanceTo(prevoutpolygon.bottomright);\n            if ((d1 < EPS) && (d2 < EPS)) {\n              // we can join this polygon with the one to the left:\n              outpolygon.topleft = prevoutpolygon.topleft;\n              outpolygon.topleftuv = prevoutpolygon.topleftuv;\n              outpolygon.leftline = prevoutpolygon.leftline;\n              outpolygon.bottomleft = prevoutpolygon.bottomleft;\n              outpolygon.bottomleftuv = prevoutpolygon.bottomleftuv;\n              newoutpolygonrow.splice(newoutpolygonrow.length - 1, 1);\n            }\n          }\n          newoutpolygonrow.push(outpolygon);\n        } // for(activepolygon in activepolygons)\n        if (yindex > 0) {\n          // try to match the new polygons against the previous row:\n          let prevcontinuedindexes = {};\n          let matchedindexes = {};\n          for (let i = 0; i < newoutpolygonrow.length; i++) {\n            let thispolygon = newoutpolygonrow[i];\n            for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {\n              if (!matchedindexes[ii]) // not already processed?\n              {\n                // We have a match if the sidelines are equal or if the top coordinates\n                // are on the sidelines of the previous polygon\n                let prevpolygon = prevoutpolygonrow[ii];\n                if (prevpolygon.bottomleft.distanceTo(thispolygon.topleft) < EPS) {\n                  if (prevpolygon.bottomright.distanceTo(thispolygon.topright) < EPS) {\n                    // Yes, the top of this polygon matches the bottom of the previous:\n                    matchedindexes[ii] = true;\n                    // Now check if the joined polygon would remain convex:\n                    let d1 = thispolygon.leftline.direction().x - prevpolygon.leftline.direction().x;\n                    let d2 = thispolygon.rightline.direction().x - prevpolygon.rightline.direction().x;\n                    let leftlinecontinues = Math.abs(d1) < EPS;\n                    let rightlinecontinues = Math.abs(d2) < EPS;\n                    let leftlineisconvex = leftlinecontinues || (d1 >= 0);\n                    let rightlineisconvex = rightlinecontinues || (d2 >= 0);\n                    if (leftlineisconvex && rightlineisconvex) {\n                      // yes, both sides have convex corners:\n                      // This polygon will continue the previous polygon\n                      thispolygon.outpolygon = prevpolygon.outpolygon;\n                      thispolygon.leftlinecontinues = leftlinecontinues;\n                      thispolygon.rightlinecontinues = rightlinecontinues;\n                      prevcontinuedindexes[ii] = true;\n                    }\n                    break;\n                  }\n                }\n              } // if(!prevcontinuedindexes[ii])\n            } // for ii\n          } // for i\n          for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {\n            if (!prevcontinuedindexes[ii]) {\n              // polygon ends here\n              // Finish the polygon with the last point(s):\n              let prevpolygon = prevoutpolygonrow[ii];\n              prevpolygon.outpolygon.rightpoints.push(prevpolygon.bottomright);\n              prevpolygon.outpolygon.rightuvcoordinates.push(prevpolygon.bottomrightuv);\n              if (prevpolygon.bottomright.distanceTo(prevpolygon.bottomleft) > EPS) {\n                // polygon ends with a horizontal line:\n                prevpolygon.outpolygon.leftpoints.push(prevpolygon.bottomleft);\n                prevpolygon.outpolygon.leftuvcoordinates.push(prevpolygon.bottomleftuv);\n              }\n              // reverse the left half so we get a counterclockwise circle:\n              prevpolygon.outpolygon.leftpoints.reverse();\n              prevpolygon.outpolygon.leftuvcoordinates.reverse();\n              let points2d = prevpolygon.outpolygon.rightpoints.concat(prevpolygon.outpolygon.leftpoints);\n              let uvcoordinates = prevpolygon.outpolygon.rightuvcoordinates.concat(prevpolygon.outpolygon.leftuvcoordinates);\n              let vertices3d = [];\n              points2d.map(function (point2d, i) {\n                let point3d = orthobasis.to3D(point2d);\n                let vertex3d = Vertex.fromPosAndUV(point3d, uvcoordinates[i]);\n                vertices3d.push(vertex3d);\n              });\n              let polygon = new Polygon(vertices3d, shared, plane);\n              destpolygons.push(polygon);\n            }\n          }\n        } // if(yindex > 0)\n        for (let i = 0; i < newoutpolygonrow.length; i++) {\n          let thispolygon = newoutpolygonrow[i];\n          if (!thispolygon.outpolygon) {\n            // polygon starts here:\n            thispolygon.outpolygon = {\n              leftpoints: [],\n              leftuvcoordinates: [],\n              rightpoints: [],\n              rightuvcoordinates: []\n            };\n            thispolygon.outpolygon.leftpoints.push(thispolygon.topleft);\n            thispolygon.outpolygon.leftuvcoordinates.push(thispolygon.topleftuv);\n            if (thispolygon.topleft.distanceTo(thispolygon.topright) > EPS) {\n              // we have a horizontal line at the top:\n              thispolygon.outpolygon.rightpoints.push(thispolygon.topright);\n              thispolygon.outpolygon.rightuvcoordinates.push(thispolygon.toprightuv);\n            }\n          } else {\n            // continuation of a previous row\n            if (!thispolygon.leftlinecontinues) {\n              thispolygon.outpolygon.leftpoints.push(thispolygon.topleft);\n              thispolygon.outpolygon.leftuvcoordinates.push(thispolygon.topleftuv);\n            }\n            if (!thispolygon.rightlinecontinues) {\n              thispolygon.outpolygon.rightpoints.push(thispolygon.topright);\n              thispolygon.outpolygon.rightuvcoordinates.push(thispolygon.toprightuv);\n            }\n          }\n        }\n        prevoutpolygonrow = newoutpolygonrow;\n      }\n    } // for yindex\n  } // if(numpolygons > 0)\n};\n\nmodule.exports = reTesselateCoplanarPolygons;\n","const Vector2D = require('../math/Vector2');\n\n// see http://local.wasp.uwa.edu.au/~pbourke/geometry/polyarea/ :\n// Area of the polygon. For a counter clockwise rotating polygon the area is positive, otherwise negative\n// Note(bebbi): this looks wrong. See polygon getArea()\nconst area = function (cag) {\n  let polygonArea = 0;\n  cag.sides.map(function (side) {\n    polygonArea += side.vertex0.pos.cross(side.vertex1.pos);\n  });\n  polygonArea *= 0.5;\n  return polygonArea;\n};\n\nconst getBounds = function (cag) {\n  let minpoint;\n  if (cag.sides.length === 0) {\n    minpoint = new Vector2D(0, 0);\n  } else {\n    minpoint = cag.sides[0].vertex0.pos;\n  }\n  let maxpoint = minpoint;\n  cag.sides.map(function (side) {\n    minpoint = minpoint.min(side.vertex0.pos);\n    minpoint = minpoint.min(side.vertex1.pos);\n    maxpoint = maxpoint.max(side.vertex0.pos);\n    maxpoint = maxpoint.max(side.vertex1.pos);\n  });\n  return [minpoint, maxpoint];\n};\n\nmodule.exports = {area, getBounds};\n","const OrthoNormalBasis = require('../../core/math/OrthoNormalBasis');\nimport {extrudeInOrthonormalBasis} from './extrudeInOrthonormalBasis';\n\n/** Extrude in a standard cartesian plane, specified by two axis identifiers. Each identifier can be\n * one of [\"X\",\"Y\",\"Z\",\"-X\",\"-Y\",\"-Z\"]\n * The 2d x axis will map to the first given 3D axis, the 2d y axis will map to the second.\n * See OrthoNormalBasis.GetCartesian for details.\n * @param  {CAG} cag the cag to extrude\n * @param  {String} axis1 the first axis\n * @param  {String} axis2 the second axis\n * @param  {Float} depth thickness of the extruded shape. Extrusion is done upwards from the plane\n * @param  {Object} [options] - options for construction\n * @param {Boolean} [options.symmetrical=true] - extrude symmetrically in two directions about the plane\n */\nexport const extrudeInPlane = (cag: any, axis1: any, axis2: any, depth: number, options: any) => {\n  return extrudeInOrthonormalBasis(cag, OrthoNormalBasis.GetCartesian(axis1, axis2), depth, options);\n};\n","const {defaultResolution3D} = require('../../core/constants');\nconst {parseOptionAs3DVector, parseOptionAsFloat, parseOptionAsInt} = require('../../api/optionParsers');\nconst {fromPolygons} = require('../../core/CSGFactories');\nconst {Connector} = require('../../core/connectors');\nconst Vector3D = require('../../core/math/Vector3');\n\n/** linear extrusion of 2D shape, with optional twist\n * @param  {CAG} cag the cag to extrude\n * @param  {Object} [options] - options for construction\n * @param {Array} [options.offset=[0,0,1]] - The 2d shape is placed in in z=0 plane and extruded into direction <offset>\n * (a 3D vector as a 3 component array)\n * @param {Boolean} [options.twiststeps=defaultResolution3D] - twiststeps determines the resolution of the twist (should be >= 1)\n * @param {Boolean} [options.twistangle=0] - twistangle The final face is rotated <twistangle> degrees. Rotation is done around the origin of the 2d shape (i.e. x=0, y=0)\n * @returns {CSG} the extrude shape, as a CSG object\n * @example extruded=cag.extrude({offset: [0,0,10], twistangle: 360, twiststeps: 100});\n */\nexport const extrude = (cag: any, options: any) => {\n  const CSG = require('../../core/CSG'); // FIXME: circular dependencies CAG=>CSG=>CAG\n  if (cag.sides.length === 0) {\n    // empty! : FIXME: should this throw ?\n    return new CSG();\n  }\n  const offsetVector = parseOptionAs3DVector(options, 'offset', [0, 0, 1]);\n  const twistangle = parseOptionAsFloat(options, 'twistangle', 0);\n  let twiststeps = parseOptionAsInt(options, 'twiststeps', defaultResolution3D);\n  if (offsetVector.z === 0) {\n    throw new Error('offset cannot be orthogonal to Z axis');\n  }\n  if (twistangle === 0 || twiststeps < 1) {\n    twiststeps = 1;\n  }\n  const normalVector = Vector3D.Create(0, 1, 0);\n\n  let polygons: any[] = [];\n  // bottom and top\n  polygons = polygons.concat(cag._toPlanePolygons({\n      translation: [0, 0, 0],\n      normalVector,\n      flipped: !(offsetVector.z < 0)\n    }\n  ));\n  polygons = polygons.concat(cag._toPlanePolygons({\n    translation: offsetVector,\n    normalVector: normalVector.rotateZ(twistangle),\n    flipped: offsetVector.z < 0\n  }));\n  // walls\n  for (let i = 0; i < twiststeps; i++) {\n    const c1 = new Connector(offsetVector.times(i / twiststeps), [0, 0, offsetVector.z],\n      normalVector.rotateZ(i * twistangle / twiststeps));\n    const c2 = new Connector(offsetVector.times((i + 1) / twiststeps), [0, 0, offsetVector.z],\n      normalVector.rotateZ((i + 1) * twistangle / twiststeps));\n    polygons = polygons.concat(cag._toWallPolygons({toConnector1: c1, toConnector2: c2}, i));\n  }\n\n  return fromPolygons(polygons);\n};\n","const {EPS, defaultResolution3D} = require('../../core/constants');\nconst {parseOptionAsFloat, parseOptionAsInt} = require('../../api/optionParsers');\nconst Vector3D = require('../../core/math/Vector3');\nconst {Connector} = require('../../core/connectors');\nconst {fromPolygons} = require('../../core/CSGFactories');\n\n// THIS IS AN OLD untested !!! version of rotate extrude\n/** Extrude to into a 3D solid by rotating the origin around the Y axis.\n * (and turning everything into XY plane)\n * @param {Object} options - options for construction\n * @param {Number} [options.angle=360] - angle of rotation\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\n * @returns {CSG} new 3D solid\n */\nexport const rotateExtrude = (cag: any, options: any) => {\n  if (options === undefined) {\n    options = {};\n  }\n  let alpha = parseOptionAsFloat(options, 'angle', 360);\n  const resolution = parseOptionAsInt(options, 'resolution', defaultResolution3D);\n\n  alpha = alpha > 360 ? alpha % 360 : alpha;\n  const origin = [0, 0, 0];\n  const axisV = Vector3D.Create(0, 1, 0);\n  const normalV = [0, 0, 1];\n  let polygons: any[] = [];\n  // planes only needed if alpha > 0\n  const connS = new Connector(origin, axisV, normalV);\n  if (alpha > 0 && alpha < 360) {\n    // we need to rotate negative to satisfy wall function condition of\n    // building in the direction of axis vector\n    const connE = new Connector(origin, axisV.rotateZ(-alpha), normalV);\n    polygons = polygons.concat(\n      cag._toPlanePolygons({toConnector: connS, flipped: true}));\n    polygons = polygons.concat(\n      cag._toPlanePolygons({toConnector: connE}));\n  }\n  let connT1 = connS;\n  let connT2;\n  const step = alpha / resolution;\n  const iteration = 0;\n  for (let a = step; a <= alpha + EPS; a += step) { // FIXME Should this be angelEPS?\n    connT2 = new Connector(origin, axisV.rotateZ(-a), normalV);\n    polygons = polygons.concat(cag._toWallPolygons(\n      {toConnector1: connT1, toConnector2: connT2}, iteration));\n    connT1 = connT2;\n  }\n  return fromPolygons(polygons).reTesselated();\n};\n","// FIXME: right now linear & rotate extrude take params first, while rectangular_extrude\n// takes params second ! confusing and incoherent ! needs to be changed (BREAKING CHANGE !)\n\n/** linear extrusion of the input 2d shape\n * @param {Object} [options] - options for construction\n * @param {Float} [options.height=1] - height of the extruded shape\n * @param {Integer} [options.slices=10] - number of intermediary steps/slices\n * @param {Integer} [options.twist=0] - angle (in degrees to twist the extusion by)\n * @param {Boolean} [options.center=false] - whether to center extrusion or not\n * @param {CAG} baseShape input 2d shape\n * @returns {CSG} new extruded shape\n *\n * @example\n * let revolved = linear_extrude({height: 10}, square())\n */\nexport function linear_extrude(params: any, baseShape: any) {\n  const defaults = {\n    height: 1,\n    slices: 10,\n    twist: 0,\n    center: false,\n  };\n  /* convexity = 10, */\n  const {height, twist, slices, center} = Object.assign({}, defaults, params);\n\n  // if(params.convexity) convexity = params.convexity      // abandoned\n  let output = baseShape.extrude({offset: [0, 0, height], twistangle: twist, twiststeps: slices});\n  if (center === true) {\n    const b = output.getBounds(); // b[0] = min, b[1] = max\n    const offset = (b[1].plus(b[0])).times(-0.5);\n    output = output.translate(offset);\n  }\n  return output;\n}\n","const Matrix4 = require('../../core/math/Matrix4');\nconst {fromPolygons} = require('../../core/CSGFactories');\nconst {cagToPointsArray, clamp, rightMultiply1x3VectorToArray, polygonFromPoints} = require('../../api/helpers');\nconst {fromPoints} = require('../../core/CAGFactories');\n\n/** rotate extrusion / revolve of the given 2d shape\n * @param {Object} [options] - options for construction\n * @param {Integer} [options.fn=1] - resolution/number of segments of the extrusion\n * @param {Float} [options.startAngle=1] - start angle of the extrusion, in degrees\n * @param {Float} [options.angle=1] - angle of the extrusion, in degrees\n * @param {Float} [options.overflow='cap'] - what to do with points outside of bounds (+ / - x) :\n * defaults to capping those points to 0 (only supported behaviour for now)\n * @param {CAG} baseShape input 2d shape\n * @returns {CSG} new extruded shape\n *\n * @example\n * let revolved = rotate_extrude({fn: 10}, square())\n */\nexport function rotate_extrude(params: any, baseShape: any) {\n  // note, we should perhaps alias this to revolve() as well\n  const defaults = {\n    fn: 32,\n    startAngle: 0,\n    angle: 360,\n    overflow: 'cap',\n  };\n  params = Object.assign({}, defaults, params);\n  const {fn, startAngle, angle, overflow} = params;\n  if (overflow !== 'cap') {\n    throw new Error('only capping of overflowing points is supported !');\n  }\n\n  if (arguments.length < 2) { // FIXME: what the hell ??? just put params second !\n    baseShape = params;\n  }\n  // are we dealing with a positive or negative angle (for normals flipping)\n  const flipped = angle > 0;\n  // limit actual angle between 0 & 360, regardless of direction\n  const totalAngle = flipped ? clamp((startAngle + angle), 0, 360) : clamp((startAngle + angle), -360, 0);\n  // adapt to the totalAngle : 1 extra segment per 45 degs if not 360 deg extrusion\n  // needs to be at least one and higher then the input resolution\n  const segments = Math.max(\n    Math.floor(Math.abs(totalAngle) / 45),\n    1,\n    fn,\n  );\n  // maximum distance per axis between two points before considering them to be the same\n  const overlapTolerance = 0.00001;\n  // convert baseshape to just an array of points, easier to deal with\n  let shapePoints = cagToPointsArray(baseShape);\n\n  // determine if the rotate_extrude can be computed in the first place\n  // ie all the points have to be either x > 0 or x < 0\n\n  // generic solution to always have a valid solid, even if points go beyond x/ -x\n  // 1. split points up between all those on the 'left' side of the axis (x<0) & those on the 'righ' (x>0)\n  // 2. for each set of points do the extrusion operation IN OPOSITE DIRECTIONS\n  // 3. union the two resulting solids\n\n  // 1. alt : OR : just cap of points at the axis ?\n\n  // console.log('shapePoints BEFORE', shapePoints, baseShape.sides)\n\n  const pointsWithNegativeX = shapePoints.filter((x:any) => x[0] < 0);\n  const pointsWithPositiveX = shapePoints.filter((x:any) => x[0] >= 0);\n  const arePointsWithNegAndPosX = pointsWithNegativeX.length > 0 && pointsWithPositiveX.length > 0;\n\n  if (arePointsWithNegAndPosX && overflow === 'cap') {\n    if (pointsWithNegativeX.length > pointsWithPositiveX.length) {\n      shapePoints = shapePoints.map((point: any) => [Math.min(point[0], 0), point[1]]);\n    } else if (pointsWithPositiveX.length >= pointsWithNegativeX.length) {\n      shapePoints = shapePoints.map((point: any) => [Math.max(point[0], 0), point[1]]);\n    }\n  }\n\n  // console.log('negXs', pointsWithNegativeX, 'pointsWithPositiveX', pointsWithPositiveX, 'arePointsWithNegAndPosX', arePointsWithNegAndPosX)\n  //  console.log('shapePoints AFTER', shapePoints, baseShape.sides)\n\n  let polygons = [];\n\n  // for each of the intermediary steps in the extrusion\n  for (let i = 1; i < segments + 1; i++) {\n    // for each side of the 2d shape\n    for (let j = 0; j < shapePoints.length - 1; j++) {\n      // 2 points of a side\n      const curPoint = shapePoints[j];\n      const nextPoint = shapePoints[j + 1];\n\n      // compute matrix for current and next segment angle\n      const prevMatrix = Matrix4.rotationZ((i - 1) / segments * angle + startAngle);\n      const curMatrix = Matrix4.rotationZ(i / segments * angle + startAngle);\n\n      const pointA = rightMultiply1x3VectorToArray(prevMatrix, [curPoint[0], 0, curPoint[1]]);\n      const pointAP = rightMultiply1x3VectorToArray(curMatrix, [curPoint[0], 0, curPoint[1]]);\n      const pointB = rightMultiply1x3VectorToArray(prevMatrix, [nextPoint[0], 0, nextPoint[1]]);\n      const pointBP = rightMultiply1x3VectorToArray(curMatrix, [nextPoint[0], 0, nextPoint[1]]);\n\n      // console.log(`point ${j} edge connecting ${j} to ${j + 1}`)\n      let overlappingPoints = false;\n      if (Math.abs(pointA[0] - pointAP[0]) < overlapTolerance && Math.abs(pointB[1] - pointBP[1]) < overlapTolerance) {\n        // console.log('identical / overlapping points (from current angle and next one), what now ?')\n        overlappingPoints = true;\n      }\n\n      // we do not generate a single quad because:\n      // 1. it does not allow eliminating unneeded triangles in case of overlapping points\n      // 2. the current cleanup routines of csg.js create degenerate shapes from those quads\n      // let polyPoints = [pointA, pointB, pointBP, pointAP]\n      // polygons.push(polygonFromPoints(polyPoints))\n\n      if (flipped) {\n        // CW\n        polygons.push(polygonFromPoints([pointA, pointB, pointBP]));\n        if (!overlappingPoints) {\n          polygons.push(polygonFromPoints([pointBP, pointAP, pointA]));\n        }\n      } else {\n        // CCW\n        if (!overlappingPoints) {\n          polygons.push(polygonFromPoints([pointA, pointAP, pointBP]));\n        }\n        polygons.push(polygonFromPoints([pointBP, pointB, pointA]));\n      }\n    }\n    // if we do not do a full extrusion, we want caps at both ends (closed volume)\n    if (Math.abs(angle) < 360) {\n      // we need to recreate the side with capped points where applicable\n      const sideShape = fromPoints(shapePoints);\n      const endMatrix = Matrix4.rotationX(90).multiply(\n        Matrix4.rotationZ(-startAngle),\n      );\n      const endCap = sideShape._toPlanePolygons({flipped})\n        .map((x: any) => x.transform(endMatrix));\n\n      const startMatrix = Matrix4.rotationX(90).multiply(\n        Matrix4.rotationZ(-angle - startAngle),\n      );\n      const startCap = sideShape._toPlanePolygons({flipped: !flipped})\n        .map((x: any) => x.transform(startMatrix));\n      polygons = polygons.concat(endCap).concat(startCap);\n    }\n  }\n  return fromPolygons(polygons).reTesselated().canonicalized();\n}\n","const Vertex3 = require('../core/math/Vertex3');\nconst Vector3 = require('../core/math/Vector3');\nconst Polygon3 = require('../core/math/Polygon3');\n\n// FIXME: this is to have more readable/less extremely verbose code below\nconst vertexFromVectorArray = array => {\n  return new Vertex3(new Vector3(array));\n};\n\nconst polygonFromPoints = points => {\n  // EEK talk about wrapping wrappers !\n  const vertices = points.map(point => new Vertex3(new Vector3(point)));\n  return new Polygon3(vertices);\n};\n\n// Simplified, array vector rightMultiply1x3Vector\nconst rightMultiply1x3VectorToArray = (matrix, vector) => {\n  const [v0, v1, v2] = vector;\n  const v3 = 1;\n  let x = v0 * matrix.elements[0] + v1 * matrix.elements[1] + v2 * matrix.elements[2] + v3 * matrix.elements[3];\n  let y = v0 * matrix.elements[4] + v1 * matrix.elements[5] + v2 * matrix.elements[6] + v3 * matrix.elements[7];\n  let z = v0 * matrix.elements[8] + v1 * matrix.elements[9] + v2 * matrix.elements[10] + v3 * matrix.elements[11];\n  let w = v0 * matrix.elements[12] + v1 * matrix.elements[13] + v2 * matrix.elements[14] + v3 * matrix.elements[15];\n\n  // scale such that fourth element becomes 1:\n  if (w !== 1) {\n    const invw = 1.0 / w;\n    x *= invw;\n    y *= invw;\n    z *= invw;\n  }\n  return [x, y, z];\n};\n\nfunction clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\nconst cagToPointsArray = input => {\n  let points;\n  if ('sides' in input) { // this is a cag\n    points = [];\n    input.sides.forEach(side => {\n      points.push([side.vertex0.pos.x, side.vertex0.pos.y]);\n      points.push([side.vertex1.pos.x, side.vertex1.pos.y]);\n    });\n    // cag.sides.map(side => [side.vertex0.pos.x, side.vertex0.pos.y])\n    //, side.vertex1.pos.x, side.vertex1.pos.y])\n    // due to the logic of CAG.fromPoints()\n    // move the first point to the last\n    /* if (points.length > 0) {\n      points.push(points.shift())\n    } */\n  } else if ('points' in input) {\n    points = input.points.map(p => ([p.x, p.y]));\n  }\n\n  return points;\n};\n\nconst degToRad = deg => (Math.PI / 180) * deg;\n\nmodule.exports = {cagToPointsArray, clamp, rightMultiply1x3VectorToArray, polygonFromPoints};\n","const Path2D = require('../../core/math/Path2');\n\n/** rectangular extrusion of the given array of points\n * @param {Array} basePoints array of points (nested) to extrude from\n * layed out like [ [0,0], [10,0], [5,10], [0,10] ]\n * @param {Object} [options] - options for construction\n * @param {Float} [options.h=1] - height of the extruded shape\n * @param {Float} [options.w=10] - width of the extruded shape\n * @param {Integer} [options.fn=1] - resolution/number of segments of the extrusion\n * @param {Boolean} [options.closed=false] - whether to close the input path for the extrusion or not\n * @param {Boolean} [options.round=true] - whether to round the extrusion or not\n * @returns {CSG} new extruded shape\n *\n * @example\n * let revolved = rectangular_extrude({height: 10}, square())\n */\nexport function rectangular_extrude(basePoints: any, params: any) {\n  const defaults = {\n    w: 1,\n    h: 1,\n    fn: 8,\n    closed: false,\n    round: true,\n  };\n  const {w, h, fn, closed, round} = Object.assign({}, defaults, params);\n  return new Path2D(basePoints, closed).rectangularExtrude(w, h, fn, round);\n}\n","const Path2D = require('../core/math/Path2');\n\nconst cagoutlinePaths = function (_cag) {\n  let cag = _cag.canonicalized();\n  let sideTagToSideMap = {};\n  let startVertexTagToSideTagMap = {};\n  cag.sides.map(function (side) {\n    let sidetag = side.getTag();\n    sideTagToSideMap[sidetag] = side;\n    let startvertextag = side.vertex0.getTag();\n    if (!(startvertextag in startVertexTagToSideTagMap)) {\n      startVertexTagToSideTagMap[startvertextag] = [];\n    }\n    startVertexTagToSideTagMap[startvertextag].push(sidetag);\n  });\n  let paths = [];\n  while (true) {\n    let startsidetag = null;\n    for (let aVertexTag in startVertexTagToSideTagMap) {\n      let sidesForcagVertex = startVertexTagToSideTagMap[aVertexTag];\n      startsidetag = sidesForcagVertex[0];\n      sidesForcagVertex.splice(0, 1);\n      if (sidesForcagVertex.length === 0) {\n        delete startVertexTagToSideTagMap[aVertexTag];\n      }\n      break;\n    }\n    if (startsidetag === null) break; // we've had all sides\n    let connectedVertexPoints = [];\n    let sidetag = startsidetag;\n    let cagside = sideTagToSideMap[sidetag];\n    let startvertextag = cagside.vertex0.getTag();\n    while (true) {\n      connectedVertexPoints.push(cagside.vertex0.pos);\n      let nextvertextag = cagside.vertex1.getTag();\n      if (nextvertextag === startvertextag) break; // we've closed the polygon\n      if (!(nextvertextag in startVertexTagToSideTagMap)) {\n        throw new Error('Area is not closed!');\n      }\n      let nextpossiblesidetags = startVertexTagToSideTagMap[nextvertextag];\n      let nextsideindex = -1;\n      if (nextpossiblesidetags.length === 1) {\n        nextsideindex = 0;\n      } else {\n        // more than one side starting at the same vertex. cag means we have\n        // two shapes touching at the same corner\n        let bestangle = null;\n        let cagangle = cagside.direction().angleDegrees();\n        for (let sideindex = 0; sideindex < nextpossiblesidetags.length; sideindex++) {\n          let nextpossiblesidetag = nextpossiblesidetags[sideindex];\n          let possibleside = sideTagToSideMap[nextpossiblesidetag];\n          let angle = possibleside.direction().angleDegrees();\n          let angledif = angle - cagangle;\n          if (angledif < -180) angledif += 360;\n          if (angledif >= 180) angledif -= 360;\n          if ((nextsideindex < 0) || (angledif > bestangle)) {\n            nextsideindex = sideindex;\n            bestangle = angledif;\n          }\n        }\n      }\n      let nextsidetag = nextpossiblesidetags[nextsideindex];\n      nextpossiblesidetags.splice(nextsideindex, 1);\n      if (nextpossiblesidetags.length === 0) {\n        delete startVertexTagToSideTagMap[nextvertextag];\n      }\n      cagside = sideTagToSideMap[nextsidetag];\n    } // inner loop\n    // due to the logic of fromPoints()\n    // move the first point to the last\n    if (connectedVertexPoints.length > 0) {\n      connectedVertexPoints.push(connectedVertexPoints.shift());\n    }\n    let path = new Path2D(connectedVertexPoints, true);\n    paths.push(path);\n  } // outer loop\n  return paths;\n};\n\nmodule.exports = cagoutlinePaths;\n","/* converts input data to array if it is not already an array */\nfunction toArray(data) {\n  if (!data) return [];\n  if (data.constructor !== Array) return [data];\n  return data;\n}\n\nmodule.exports = toArray;\n","const Polygon = require('../core/math/Polygon3');\nconst {fromPolygons} = require('../core/CSGFactories');\nconst {fnSortByIndex} = require('../core/utils');\n\n// FIXME: WHY is this for 3D polygons and not for 2D shapes ?\n/**\n * Creates solid from slices (Polygon) by generating walls\n * @param {Object} options Solid generating options\n *  - numslices {Number} Number of slices to be generated\n *  - callback(t, slice) {Function} Callback function generating slices.\n *          arguments: t = [0..1], slice = [0..numslices - 1]\n *          return: Polygon or null to skip\n *  - loop {Boolean} no flats, only walls, it's used to generate solids like a tor\n */\nconst solidFromSlices = function (polygon, options) {\n  let polygons = [];\n  let csg = null;\n  let prev = null;\n  let bottom = null;\n  let top = null;\n  let numSlices = 2;\n  let bLoop = false;\n  let fnCallback;\n  let flipped = null;\n\n  if (options) {\n    bLoop = Boolean(options['loop']);\n\n    if (options.numslices) {\n      numSlices = options.numslices;\n    }\n\n    if (options.callback) {\n      fnCallback = options.callback;\n    }\n  }\n  if (!fnCallback) {\n    let square = Polygon.createFromPoints([\n      [0, 0, 0],\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0]\n    ]);\n    fnCallback = function (t, slice) {\n      return t === 0 || t === 1 ? square.translate([0, 0, t]) : null;\n    };\n  }\n  for (let i = 0, iMax = numSlices - 1; i <= iMax; i++) {\n    csg = fnCallback.call(polygon, i / iMax, i);\n    if (csg) {\n      if (!(csg instanceof Polygon)) {\n        throw new Error('Polygon.solidFromSlices callback error: Polygon expected');\n      }\n      csg.checkIfConvex();\n\n      if (prev) { // generate walls\n        if (flipped === null) { // not generated yet\n          flipped = prev.plane.signedDistanceToPoint(csg.vertices[0].pos) < 0;\n        }\n        _addWalls(polygons, prev, csg, flipped);\n      } else { // the first - will be a bottom\n        bottom = csg;\n      }\n      prev = csg;\n    } // callback can return null to skip that slice\n  }\n  top = csg;\n\n  if (bLoop) {\n    let bSameTopBottom = bottom.vertices.length === top.vertices.length &&\n      bottom.vertices.every(function (v, index) {\n        return v.pos.equals(top.vertices[index].pos);\n      });\n    // if top and bottom are not the same -\n    // generate walls between them\n    if (!bSameTopBottom) {\n      _addWalls(polygons, top, bottom, flipped);\n    } // else - already generated\n  } else {\n    // save top and bottom\n    // TODO: flip if necessary\n    polygons.unshift(flipped ? bottom : bottom.flipped());\n    polygons.push(flipped ? top.flipped() : top);\n  }\n  return fromPolygons(polygons);\n};\n\n/**\n * @param walls Array of wall polygons\n * @param bottom Bottom polygon\n * @param top Top polygon\n */\nconst _addWalls = function (walls, bottom, top, bFlipped) {\n  let bottomPoints = bottom.vertices.slice(0); // make a copy\n  let topPoints = top.vertices.slice(0); // make a copy\n  let color = top.shared || null;\n\n  // check if bottom perimeter is closed\n  if (!bottomPoints[0].pos.equals(bottomPoints[bottomPoints.length - 1].pos)) {\n    bottomPoints.push(bottomPoints[0]);\n  }\n\n  // check if top perimeter is closed\n  if (!topPoints[0].pos.equals(topPoints[topPoints.length - 1].pos)) {\n    topPoints.push(topPoints[0]);\n  }\n  if (bFlipped) {\n    bottomPoints = bottomPoints.reverse();\n    topPoints = topPoints.reverse();\n  }\n\n  let iTopLen = topPoints.length - 1;\n  let iBotLen = bottomPoints.length - 1;\n  let iExtra = iTopLen - iBotLen;// how many extra triangles we need\n  let bMoreTops = iExtra > 0;\n  let bMoreBottoms = iExtra < 0;\n\n  let aMin = []; // indexes to start extra triangles (polygon with minimal square)\n  // init - we need exactly /iExtra/ small triangles\n  for (let i = Math.abs(iExtra); i > 0; i--) {\n    aMin.push({\n      len: Infinity,\n      index: -1\n    });\n  }\n\n  let len;\n  if (bMoreBottoms) {\n    for (let i = 0; i < iBotLen; i++) {\n      len = bottomPoints[i].pos.distanceToSquared(bottomPoints[i + 1].pos);\n      // find the element to replace\n      for (let j = aMin.length - 1; j >= 0; j--) {\n        if (aMin[j].len > len) {\n          aMin[j].len = len;\n          aMin.index = j;\n          break;\n        }\n      } // for\n    }\n  } else if (bMoreTops) {\n    for (let i = 0; i < iTopLen; i++) {\n      len = topPoints[i].pos.distanceToSquared(topPoints[i + 1].pos);\n      // find the element to replace\n      for (let j = aMin.length - 1; j >= 0; j--) {\n        if (aMin[j].len > len) {\n          aMin[j].len = len;\n          aMin.index = j;\n          break;\n        }\n      } // for\n    }\n  } // if\n  // sort by index\n  aMin.sort(fnSortByIndex);\n  let getTriangle = function addWallsPutTriangle(pointA, pointB, pointC, color) {\n    return new Polygon([pointA, pointB, pointC], color);\n    // return bFlipped ? triangle.flipped() : triangle;\n  };\n\n  let bpoint = bottomPoints[0];\n  let tpoint = topPoints[0];\n  let secondPoint;\n  let nBotFacet;\n  let nTopFacet; // length of triangle facet side\n  for (let iB = 0, iT = 0, iMax = iTopLen + iBotLen; iB + iT < iMax;) {\n    if (aMin.length) {\n      if (bMoreTops && iT === aMin[0].index) { // one vertex is on the bottom, 2 - on the top\n        secondPoint = topPoints[++iT];\n        // console.log('<<< extra top: ' + secondPoint + ', ' + tpoint + ', bottom: ' + bpoint);\n        walls.push(getTriangle(\n          secondPoint, tpoint, bpoint, color\n        ));\n        tpoint = secondPoint;\n        aMin.shift();\n        continue;\n      } else if (bMoreBottoms && iB === aMin[0].index) {\n        secondPoint = bottomPoints[++iB];\n        walls.push(getTriangle(\n          tpoint, bpoint, secondPoint, color\n        ));\n        bpoint = secondPoint;\n        aMin.shift();\n        continue;\n      }\n    }\n    // choose the shortest path\n    if (iB < iBotLen) { // one vertex is on the top, 2 - on the bottom\n      nBotFacet = tpoint.pos.distanceToSquared(bottomPoints[iB + 1].pos);\n    } else {\n      nBotFacet = Infinity;\n    }\n    if (iT < iTopLen) { // one vertex is on the bottom, 2 - on the top\n      nTopFacet = bpoint.pos.distanceToSquared(topPoints[iT + 1].pos);\n    } else {\n      nTopFacet = Infinity;\n    }\n    if (nBotFacet <= nTopFacet) {\n      secondPoint = bottomPoints[++iB];\n      walls.push(getTriangle(\n        tpoint, bpoint, secondPoint, color\n      ));\n      bpoint = secondPoint;\n    } else if (iT < iTopLen) { // nTopFacet < Infinity\n      secondPoint = topPoints[++iT];\n      // console.log('<<< top: ' + secondPoint + ', ' + tpoint + ', bottom: ' + bpoint);\n      walls.push(getTriangle(\n        secondPoint, tpoint, bpoint, color\n      ));\n      tpoint = secondPoint;\n    }\n    ;\n  }\n  return walls;\n};\n\nmodule.exports = solidFromSlices;\n","const {EPS} = require('../constants');\nconst Polygon = require('../math/Polygon3');\nconst Plane = require('../math/Plane');\n\nfunction addSide(sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) {\n  let starttag = vertex0.getTag();\n  let endtag = vertex1.getTag();\n  if (starttag === endtag) throw new Error('Assertion failed');\n  let newsidetag = starttag + '/' + endtag;\n  let reversesidetag = endtag + '/' + starttag;\n  if (reversesidetag in sidemap) {\n    // we have a matching reverse oriented side.\n    // Instead of adding the new side, cancel out the reverse side:\n    // console.log(\"addSide(\"+newsidetag+\") has reverse side:\");\n    deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, vertex1, vertex0, null);\n    return null;\n  }\n  //  console.log(\"addSide(\"+newsidetag+\")\");\n  let newsideobj = {\n    vertex0: vertex0,\n    vertex1: vertex1,\n    polygonindex: polygonindex\n  };\n  if (!(newsidetag in sidemap)) {\n    sidemap[newsidetag] = [newsideobj];\n  } else {\n    sidemap[newsidetag].push(newsideobj);\n  }\n  if (starttag in vertextag2sidestart) {\n    vertextag2sidestart[starttag].push(newsidetag);\n  } else {\n    vertextag2sidestart[starttag] = [newsidetag];\n  }\n  if (endtag in vertextag2sideend) {\n    vertextag2sideend[endtag].push(newsidetag);\n  } else {\n    vertextag2sideend[endtag] = [newsidetag];\n  }\n  return newsidetag;\n}\n\nfunction deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) {\n  let starttag = vertex0.getTag();\n  let endtag = vertex1.getTag();\n  let sidetag = starttag + '/' + endtag;\n  // console.log(\"deleteSide(\"+sidetag+\")\");\n  if (!(sidetag in sidemap)) throw new Error('Assertion failed');\n  let idx = -1;\n  let sideobjs = sidemap[sidetag];\n  for (let i = 0; i < sideobjs.length; i++) {\n    let sideobj = sideobjs[i];\n    if (sideobj.vertex0 !== vertex0) continue;\n    if (sideobj.vertex1 !== vertex1) continue;\n    if (polygonindex !== null) {\n      if (sideobj.polygonindex !== polygonindex) continue;\n    }\n    idx = i;\n    break;\n  }\n  if (idx < 0) throw new Error('Assertion failed');\n  sideobjs.splice(idx, 1);\n  if (sideobjs.length === 0) {\n    delete sidemap[sidetag];\n  }\n  idx = vertextag2sidestart[starttag].indexOf(sidetag);\n  if (idx < 0) throw new Error('Assertion failed');\n  vertextag2sidestart[starttag].splice(idx, 1);\n  if (vertextag2sidestart[starttag].length === 0) {\n    delete vertextag2sidestart[starttag];\n  }\n\n  idx = vertextag2sideend[endtag].indexOf(sidetag);\n  if (idx < 0) throw new Error('Assertion failed');\n  vertextag2sideend[endtag].splice(idx, 1);\n  if (vertextag2sideend[endtag].length === 0) {\n    delete vertextag2sideend[endtag];\n  }\n}\n\n/*\n     fixTJunctions:\n\n     Suppose we have two polygons ACDB and EDGF:\n\n      A-----B\n      |     |\n      |     E--F\n      |     |  |\n      C-----D--G\n\n     Note that vertex E forms a T-junction on the side BD. In this case some STL slicers will complain\n     that the solid is not watertight. This is because the watertightness check is done by checking if\n     each side DE is matched by another side ED.\n\n     This function will return a new solid with ACDB replaced by ACDEB\n\n     Note that this can create polygons that are slightly non-convex (due to rounding errors). Therefore the result should\n     not be used for further CSG operations!\n*/\nconst fixTJunctions = function (fromPolygons, csg) {\n  csg = csg.canonicalized();\n  let sidemap = {};\n\n  // STEP 1\n  for (let polygonindex = 0; polygonindex < csg.polygons.length; polygonindex++) {\n    let polygon = csg.polygons[polygonindex];\n    let numvertices = polygon.vertices.length;\n    // should be true\n    if (numvertices >= 3) {\n      let vertex = polygon.vertices[0];\n      let vertextag = vertex.getTag();\n      for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\n        let nextvertexindex = vertexindex + 1;\n        if (nextvertexindex === numvertices) nextvertexindex = 0;\n        let nextvertex = polygon.vertices[nextvertexindex];\n        let nextvertextag = nextvertex.getTag();\n        let sidetag = vertextag + '/' + nextvertextag;\n        let reversesidetag = nextvertextag + '/' + vertextag;\n        if (reversesidetag in sidemap) {\n          // this side matches the same side in another polygon. Remove from sidemap:\n          let ar = sidemap[reversesidetag];\n          ar.splice(-1, 1);\n          if (ar.length === 0) {\n            delete sidemap[reversesidetag];\n          }\n        } else {\n          let sideobj = {\n            vertex0: vertex,\n            vertex1: nextvertex,\n            polygonindex: polygonindex\n          };\n          if (!(sidetag in sidemap)) {\n            sidemap[sidetag] = [sideobj];\n          } else {\n            sidemap[sidetag].push(sideobj);\n          }\n        }\n        vertex = nextvertex;\n        vertextag = nextvertextag;\n      }\n    }\n  }\n  // STEP 2\n  // now sidemap contains 'unmatched' sides\n  // i.e. side AB in one polygon does not have a matching side BA in another polygon\n  let vertextag2sidestart = {};\n  let vertextag2sideend = {};\n  let sidestocheck = {};\n  let sidemapisempty = true;\n  for (let sidetag in sidemap) {\n    sidemapisempty = false;\n    sidestocheck[sidetag] = true;\n    sidemap[sidetag].map(function (sideobj) {\n      let starttag = sideobj.vertex0.getTag();\n      let endtag = sideobj.vertex1.getTag();\n      if (starttag in vertextag2sidestart) {\n        vertextag2sidestart[starttag].push(sidetag);\n      } else {\n        vertextag2sidestart[starttag] = [sidetag];\n      }\n      if (endtag in vertextag2sideend) {\n        vertextag2sideend[endtag].push(sidetag);\n      } else {\n        vertextag2sideend[endtag] = [sidetag];\n      }\n    });\n  }\n\n  // STEP 3 : if sidemap is not empty\n  if (!sidemapisempty) {\n    // make a copy of the polygons array, since we are going to modify it:\n    let polygons = csg.polygons.slice(0);\n    while (true) {\n      let sidemapisempty = true;\n      for (let sidetag in sidemap) {\n        sidemapisempty = false;\n        sidestocheck[sidetag] = true;\n      }\n      if (sidemapisempty) break;\n      let donesomething = false;\n      while (true) {\n        let sidetagtocheck = null;\n        for (let sidetag in sidestocheck) {\n          sidetagtocheck = sidetag;\n          break; // FIXME  : say what now ?\n        }\n        if (sidetagtocheck === null) break; // sidestocheck is empty, we're done!\n        let donewithside = true;\n        if (sidetagtocheck in sidemap) {\n          let sideobjs = sidemap[sidetagtocheck];\n          if (sideobjs.length === 0) throw new Error('Assertion failed');\n          let sideobj = sideobjs[0];\n          for (let directionindex = 0; directionindex < 2; directionindex++) {\n            let startvertex = (directionindex === 0) ? sideobj.vertex0 : sideobj.vertex1;\n            let endvertex = (directionindex === 0) ? sideobj.vertex1 : sideobj.vertex0;\n            let startvertextag = startvertex.getTag();\n            let endvertextag = endvertex.getTag();\n            let matchingsides = [];\n            if (directionindex === 0) {\n              if (startvertextag in vertextag2sideend) {\n                matchingsides = vertextag2sideend[startvertextag];\n              }\n            } else {\n              if (startvertextag in vertextag2sidestart) {\n                matchingsides = vertextag2sidestart[startvertextag];\n              }\n            }\n            for (let matchingsideindex = 0; matchingsideindex < matchingsides.length; matchingsideindex++) {\n              let matchingsidetag = matchingsides[matchingsideindex];\n              let matchingside = sidemap[matchingsidetag][0];\n              let matchingsidestartvertex = (directionindex === 0) ? matchingside.vertex0 : matchingside.vertex1;\n              let matchingsideendvertex = (directionindex === 0) ? matchingside.vertex1 : matchingside.vertex0;\n              let matchingsidestartvertextag = matchingsidestartvertex.getTag();\n              let matchingsideendvertextag = matchingsideendvertex.getTag();\n              if (matchingsideendvertextag !== startvertextag) throw new Error('Assertion failed');\n              if (matchingsidestartvertextag === endvertextag) {\n                // matchingside cancels sidetagtocheck\n                deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, startvertex, endvertex, null);\n                deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex, startvertex, null);\n                donewithside = false;\n                directionindex = 2; // skip reverse direction check\n                donesomething = true;\n                break;\n              } else {\n                let startpos = startvertex.pos;\n                let endpos = endvertex.pos;\n                let checkpos = matchingsidestartvertex.pos;\n                let direction = checkpos.minus(startpos);\n                // Now we need to check if endpos is on the line startpos-checkpos:\n                let t = endpos.minus(startpos).dot(direction) / direction.dot(direction);\n                if ((t > 0) && (t < 1)) {\n                  let closestpoint = startpos.plus(direction.times(t));\n                  let distancesquared = closestpoint.distanceToSquared(endpos);\n                  if (distancesquared < (EPS * EPS)) {\n                    // Yes it's a t-junction! We need to split matchingside in two:\n                    let polygonindex = matchingside.polygonindex;\n                    let polygon = polygons[polygonindex];\n                    // find the index of startvertextag in polygon:\n                    let insertionvertextag = matchingside.vertex1.getTag();\n                    let insertionvertextagindex = -1;\n                    for (let i = 0; i < polygon.vertices.length; i++) {\n                      if (polygon.vertices[i].getTag() === insertionvertextag) {\n                        insertionvertextagindex = i;\n                        break;\n                      }\n                    }\n                    if (insertionvertextagindex < 0) throw new Error('Assertion failed');\n                    // split the side by inserting the vertex:\n                    let newvertices = polygon.vertices.slice(0);\n                    newvertices.splice(insertionvertextagindex, 0, endvertex);\n                    let newpolygon = new Polygon(newvertices, polygon.shared /* polygon.plane */);\n\n                    // calculate plane with differents point\n                    if (isNaN(newpolygon.plane.w)) {\n                      let found = false;\n                      let loop = function (callback) {\n                        newpolygon.vertices.forEach(function (item) {\n                          if (found) return;\n                          callback(item);\n                        });\n                      };\n\n                      loop(function (a) {\n                        loop(function (b) {\n                          loop(function (c) {\n                            newpolygon.plane = Plane.fromPoints(a.pos, b.pos, c.pos);\n                            if (!isNaN(newpolygon.plane.w)) {\n                              found = true;\n                            }\n                          });\n                        });\n                      });\n                    }\n                    polygons[polygonindex] = newpolygon;\n                    // remove the original sides from our maps\n                    // deleteSide(sideobj.vertex0, sideobj.vertex1, null)\n                    deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, matchingside.vertex0, matchingside.vertex1, polygonindex);\n                    let newsidetag1 = addSide(sidemap, vertextag2sidestart, vertextag2sideend, matchingside.vertex0, endvertex, polygonindex);\n                    let newsidetag2 = addSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex, matchingside.vertex1, polygonindex);\n                    if (newsidetag1 !== null) sidestocheck[newsidetag1] = true;\n                    if (newsidetag2 !== null) sidestocheck[newsidetag2] = true;\n                    donewithside = false;\n                    directionindex = 2; // skip reverse direction check\n                    donesomething = true;\n                    break;\n                  } // if(distancesquared < 1e-10)\n                } // if( (t > 0) && (t < 1) )\n              } // if(endingstidestartvertextag === endvertextag)\n            } // for matchingsideindex\n          } // for directionindex\n        } // if(sidetagtocheck in sidemap)\n        if (donewithside) {\n          delete sidestocheck[sidetagtocheck];\n        }\n      }\n      if (!donesomething) break;\n    }\n    let newcsg = fromPolygons(polygons);\n    newcsg.properties = csg.properties;\n    newcsg.isCanonicalized = true;\n    newcsg.isRetesselated = true;\n    csg = newcsg;\n  }\n\n  // FIXME : what is even the point of this ???\n  /* sidemapisempty = true\n  for (let sidetag in sidemap) {\n    sidemapisempty = false\n    break\n  }\n  */\n\n  return csg;\n};\n\nmodule.exports = fixTJunctions;\n","const Vector3D = require('../math/Vector3');\n\n/**\n * Returns an array of Vector3D, providing minimum coordinates and maximum coordinates\n * of this solid.\n * @returns {Vector3D[]}\n * @example\n * let bounds = A.getBounds()\n * let minX = bounds[0].x\n */\nconst bounds = function (csg) {\n  if (!csg.cachedBoundingBox) {\n    let minpoint = new Vector3D(0, 0, 0);\n    let maxpoint = new Vector3D(0, 0, 0);\n    let polygons = csg.polygons;\n    let numpolygons = polygons.length;\n    for (let i = 0; i < numpolygons; i++) {\n      let polygon = polygons[i];\n      let bounds = polygon.boundingBox();\n      if (i === 0) {\n        minpoint = bounds[0];\n        maxpoint = bounds[1];\n      } else {\n        minpoint = minpoint.min(bounds[0]);\n        maxpoint = maxpoint.max(bounds[1]);\n      }\n    }\n    // FIXME: not ideal, we are mutating the input, we need to move some of it out\n    csg.cachedBoundingBox = [minpoint, maxpoint];\n  }\n  return csg.cachedBoundingBox;\n};\n\nconst volume = function (csg) {\n  let result = csg.toTriangles().map(function (triPoly) {\n    return triPoly.getTetraFeatures(['volume']);\n  });\n  console.log('volume', result);\n};\n\nconst area = function (csg) {\n  let result = csg.toTriangles().map(function (triPoly) {\n    return triPoly.getTetraFeatures(['area']);\n  });\n  console.log('area', result);\n};\n\nmodule.exports = {bounds, volume, area};\n","const CAG = require('../CAG'); // FIXME: circular dependency !\nconst {EPS} = require('../constants');\n\n// project the 3D CSG onto a plane\n// This returns a 2D CAG with the 'shadow' shape of the 3D solid when projected onto the\n// plane represented by the orthonormal basis\nconst projectToOrthoNormalBasis = function (csg, orthobasis) {\n  let cags = [];\n  csg.polygons.filter(function (p) {\n    // only return polys in plane, others may disturb result\n    return p.plane.normal.minus(orthobasis.plane.normal).lengthSquared() < (EPS * EPS);\n  })\n    .map(function (polygon) {\n      let cag = polygon.projectToOrthoNormalBasis(orthobasis);\n      if (cag.sides.length > 0) {\n        cags.push(cag);\n      }\n    });\n  let result = new CAG().union(cags);\n  return result;\n};\n\nmodule.exports = {projectToOrthoNormalBasis};\n","const {EPS} = require('../core/constants');\nconst Plane = require('../core/math/Plane');\nconst Vector2 = require('../core/math/Vector2');\nconst Vertex3 = require('../core/math/Vertex3');\nconst Polygon3 = require('../core/math/Polygon3');\nconst OrthoNormalBasis = require('../core/math/OrthoNormalBasis');\n\n/** cuts a csg along a orthobasis\n * @param  {CSG} csg the csg object to cut\n * @param  {Orthobasis} orthobasis the orthobasis to cut along\n */\nconst sectionCut = function (csg, orthobasis) {\n  let plane1 = orthobasis.plane;\n  let plane2 = orthobasis.plane.flipped();\n  plane1 = new Plane(plane1.normal, plane1.w);\n  plane2 = new Plane(plane2.normal, plane2.w + (5 * EPS));\n  let cut3d = csg.cutByPlane(plane1);\n  cut3d = cut3d.cutByPlane(plane2);\n  return cut3d.projectToOrthoNormalBasis(orthobasis);\n};\n\n/** Cut the solid by a plane. Returns the solid on the back side of the plane\n * @param  {Plane} plane\n * @returns {CSG} the solid on the back side of the plane\n */\nconst cutByPlane = function (csg, plane) {\n  if (csg.polygons.length === 0) {\n    const CSG = require('../core/CSG'); // FIXME: circular dependency ! CSG => cutByPlane => CSG\n    return new CSG();\n  }\n  // Ideally we would like to do an intersection with a polygon of inifinite size\n  // but this is not supported by our implementation. As a workaround, we will create\n  // a cube, with one face on the plane, and a size larger enough so that the entire\n  // solid fits in the cube.\n  // find the max distance of any vertex to the center of the plane:\n  let planecenter = plane.normal.times(plane.w);\n  let maxdistance = 0;\n  csg.polygons.map(function (polygon) {\n    polygon.vertices.map(function (vertex) {\n      let distance = vertex.pos.distanceToSquared(planecenter);\n      if (distance > maxdistance) maxdistance = distance;\n    });\n  });\n  maxdistance = Math.sqrt(maxdistance);\n  maxdistance *= 1.01; // make sure it's really larger\n  // Now build a polygon on the plane, at any point farther than maxdistance from the plane center:\n  let vertices = [];\n  let orthobasis = new OrthoNormalBasis(plane);\n  vertices.push(Vertex3.fromPosAndUV(orthobasis.to3D(new Vector2(maxdistance, -maxdistance)),\n    new Vector2(maxdistance, -maxdistance)));\n  vertices.push(Vertex3.fromPosAndUV(orthobasis.to3D(new Vector2(-maxdistance, -maxdistance)),\n    new Vector2(-maxdistance, -maxdistance)));\n  vertices.push(Vertex3.fromPosAndUV(orthobasis.to3D(new Vector2(-maxdistance, maxdistance)),\n    new Vector2(-maxdistance, maxdistance)));\n  vertices.push(Vertex3.fromPosAndUV(orthobasis.to3D(new Vector2(maxdistance, maxdistance)),\n    new Vector2(maxdistance, maxdistance)));\n  const polygon = new Polygon3(vertices, null, plane.flipped());\n\n  // and extrude the polygon into a cube, backwards of the plane:\n  const cube = polygon.extrude(plane.normal.times(-maxdistance));\n\n  // Now we can do the intersection:\n  let result = csg.intersect(cube);\n  result.properties = csg.properties; // keep original properties\n  return result;\n};\n\nmodule.exports = {sectionCut, cutByPlane};\n","const CAG = require('../../core/CAG');\nconst {parseOptionAs2DVector, parseOptionAsFloat, parseOptionAsInt} = require('../../api/optionParsers');\nconst {defaultResolution2D} = require('../../core/constants');\nconst Vector2D = require('../../core/math/Vector2');\nconst Path2D = require('../../core/math/Path2');\nconst {fromCompactBinary, fromPoints, fromPath2} = require('../../core/CAGFactories');\n\n/** Construct a circle.\n * @param {Object} [options] - options for construction\n * @param {Vector2D} [options.center=[0,0]] - center of circle\n * @param {Number} [options.radius=1] - radius of circle\n * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\n * @returns {CAG} new CAG object\n */\nconst circle = function (options) {\n  options = options || {};\n  let center = parseOptionAs2DVector(options, 'center', [0, 0]);\n  let radius = parseOptionAsFloat(options, 'radius', 1);\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D);\n  let points = [];\n  for (let i = 0; i < resolution; i++) {\n    let radians = 2 * Math.PI * i / resolution;\n    let point = Vector2D.fromAngleRadians(radians).times(radius).plus(center);\n    points.push(point);\n  }\n  return fromPoints(points);\n};\n\n/** Construct an ellispe.\n * @param {Object} [options] - options for construction\n * @param {Vector2D} [options.center=[0,0]] - center of ellipse\n * @param {Vector2D} [options.radius=[1,1]] - radius of ellipse, width and height\n * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\n * @returns {CAG} new CAG object\n */\nconst ellipse = function (options) {\n  options = options || {};\n  let c = parseOptionAs2DVector(options, 'center', [0, 0]);\n  let r = parseOptionAs2DVector(options, 'radius', [1, 1]);\n  r = r.abs(); // negative radii make no sense\n  let res = parseOptionAsInt(options, 'resolution', defaultResolution2D);\n\n  let e2 = new Path2D([[c.x, c.y + r.y]]);\n  e2 = e2.appendArc([c.x, c.y - r.y], {\n    xradius: r.x,\n    yradius: r.y,\n    xaxisrotation: 0,\n    resolution: res,\n    clockwise: true,\n    large: false\n  });\n  e2 = e2.appendArc([c.x, c.y + r.y], {\n    xradius: r.x,\n    yradius: r.y,\n    xaxisrotation: 0,\n    resolution: res,\n    clockwise: true,\n    large: false\n  });\n  e2 = e2.close();\n  return fromPath2(e2);\n};\n\n/** Construct a rectangle.\n * @param {Object} [options] - options for construction\n * @param {Vector2D} [options.center=[0,0]] - center of rectangle\n * @param {Vector2D} [options.radius=[1,1]] - radius of rectangle, width and height\n * @param {Vector2D} [options.corner1=[0,0]] - bottom left corner of rectangle (alternate)\n * @param {Vector2D} [options.corner2=[0,0]] - upper right corner of rectangle (alternate)\n * @returns {CAG} new CAG object\n */\nconst rectangle = function (options) {\n  options = options || {};\n  let c, r;\n  if (('corner1' in options) || ('corner2' in options)) {\n    if (('center' in options) || ('radius' in options)) {\n      throw new Error('rectangle: should either give a radius and center parameter, or a corner1 and corner2 parameter');\n    }\n    let corner1 = parseOptionAs2DVector(options, 'corner1', [0, 0]);\n    let corner2 = parseOptionAs2DVector(options, 'corner2', [1, 1]);\n    c = corner1.plus(corner2).times(0.5);\n    r = corner2.minus(corner1).times(0.5);\n  } else {\n    c = parseOptionAs2DVector(options, 'center', [0, 0]);\n    r = parseOptionAs2DVector(options, 'radius', [1, 1]);\n  }\n  r = r.abs(); // negative radii make no sense\n  let rswap = new Vector2D(r.x, -r.y);\n  let points = [\n    c.plus(r), c.plus(rswap), c.minus(r), c.minus(rswap)\n  ];\n  return fromPoints(points);\n};\n\n/** Construct a rounded rectangle.\n * @param {Object} [options] - options for construction\n * @param {Vector2D} [options.center=[0,0]] - center of rounded rectangle\n * @param {Vector2D} [options.radius=[1,1]] - radius of rounded rectangle, width and height\n * @param {Vector2D} [options.corner1=[0,0]] - bottom left corner of rounded rectangle (alternate)\n * @param {Vector2D} [options.corner2=[0,0]] - upper right corner of rounded rectangle (alternate)\n * @param {Number} [options.roundradius=0.2] - round radius of corners\n * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\n * @returns {CAG} new CAG object\n *\n * @example\n * let r = roundedRectangle({\n *   center: [0, 0],\n *   radius: [5, 10],\n *   roundradius: 2,\n *   resolution: 36,\n * });\n */\nconst roundedRectangle = function (options) {\n  options = options || {};\n  let center, radius;\n  if (('corner1' in options) || ('corner2' in options)) {\n    if (('center' in options) || ('radius' in options)) {\n      throw new Error('roundedRectangle: should either give a radius and center parameter, or a corner1 and corner2 parameter');\n    }\n    let corner1 = parseOptionAs2DVector(options, 'corner1', [0, 0]);\n    let corner2 = parseOptionAs2DVector(options, 'corner2', [1, 1]);\n    center = corner1.plus(corner2).times(0.5);\n    radius = corner2.minus(corner1).times(0.5);\n  } else {\n    center = parseOptionAs2DVector(options, 'center', [0, 0]);\n    radius = parseOptionAs2DVector(options, 'radius', [1, 1]);\n  }\n  radius = radius.abs(); // negative radii make no sense\n  let roundradius = parseOptionAsFloat(options, 'roundradius', 0.2);\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D);\n  let maxroundradius = Math.min(radius.x, radius.y);\n  maxroundradius -= 0.1;\n  roundradius = Math.min(roundradius, maxroundradius);\n  roundradius = Math.max(0, roundradius);\n  radius = new Vector2D(radius.x - roundradius, radius.y - roundradius);\n  let rect = rectangle({\n    center: center,\n    radius: radius\n  });\n  if (roundradius > 0) {\n    rect = rect.expand(roundradius, resolution);\n  }\n  return rect;\n};\n\nmodule.exports = {\n  circle,\n  ellipse,\n  rectangle,\n  roundedRectangle,\n  fromCompactBinary\n};\n","const {parseOption, parseOptionAs3DVector, parseOptionAs2DVector, parseOptionAs3DVectorList, parseOptionAsFloat, parseOptionAsInt} = require('../../api/optionParsers');\nconst {defaultResolution3D, defaultResolution2D, EPS} = require('../../core/constants');\nconst Vector3 = require('../../core/math/Vector3');\nconst Vertex3 = require('../../core/math/Vertex3');\nconst Polygon3 = require('../../core/math/Polygon3');\nconst {Connector} = require('../../core/connectors');\nconst Properties = require('../../core/Properties');\nconst {fromPolygons} = require('../../core/CSGFactories');\n\n/** Construct an axis-aligned solid cuboid.\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.center=[0,0,0]] - center of cube\n * @param {Vector3} [options.radius=[1,1,1]] - radius of cube, single scalar also possible\n * @returns {CSG} new 3D solid\n *\n * @example\n * let cube = CSG.cube({\n *   center: [5, 5, 5],\n *   radius: 5, // scalar radius\n * });\n */\nconst cube = function (options) {\n  let c;\n  let r;\n  let corner1;\n  let corner2;\n  options = options || {};\n  if (('corner1' in options) || ('corner2' in options)) {\n    if (('center' in options) || ('radius' in options)) {\n      throw new Error('cube: should either give a radius and center parameter, or a corner1 and corner2 parameter');\n    }\n    corner1 = parseOptionAs3DVector(options, 'corner1', [0, 0, 0]);\n    corner2 = parseOptionAs3DVector(options, 'corner2', [1, 1, 1]);\n    c = corner1.plus(corner2).times(0.5);\n    r = corner2.minus(corner1).times(0.5);\n  } else {\n    c = parseOptionAs3DVector(options, 'center', [0, 0, 0]);\n    r = parseOptionAs3DVector(options, 'radius', [1, 1, 1]);\n  }\n  r = r.abs(); // negative radii make no sense\n  let result = fromPolygons([\n    [\n      [0, 4, 6, 2],\n      [-1, 0, 0]\n    ],\n    [\n      [1, 3, 7, 5],\n      [+1, 0, 0]\n    ],\n    [\n      [0, 1, 5, 4],\n      [0, -1, 0]\n    ],\n    [\n      [2, 6, 7, 3],\n      [0, +1, 0]\n    ],\n    [\n      [0, 2, 3, 1],\n      [0, 0, -1]\n    ],\n    [\n      [4, 5, 7, 6],\n      [0, 0, +1]\n    ]\n  ].map(function (info) {\n    let vertices = info[0].map(function (i) {\n      let pos = new Vector3(\n        c.x + r.x * (2 * !!(i & 1) - 1), c.y + r.y * (2 * !!(i & 2) - 1), c.z + r.z * (2 * !!(i & 4) - 1));\n      return new Vertex3(pos);\n    });\n    return new Polygon3(vertices, null /* , plane */);\n  }));\n  result.properties.cube = new Properties();\n  result.properties.cube.center = new Vector3(c);\n  // add 6 connectors, at the centers of each face:\n  result.properties.cube.facecenters = [\n    new Connector(new Vector3([r.x, 0, 0]).plus(c), [1, 0, 0], [0, 0, 1]),\n    new Connector(new Vector3([-r.x, 0, 0]).plus(c), [-1, 0, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, r.y, 0]).plus(c), [0, 1, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, -r.y, 0]).plus(c), [0, -1, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, 0, r.z]).plus(c), [0, 0, 1], [1, 0, 0]),\n    new Connector(new Vector3([0, 0, -r.z]).plus(c), [0, 0, -1], [1, 0, 0])\n  ];\n  return result;\n};\n\n/** Construct a solid sphere\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.center=[0,0,0]] - center of sphere\n * @param {Number} [options.radius=1] - radius of sphere\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\n * @param {Array} [options.axes] -  an array with 3 vectors for the x, y and z base vectors\n * @returns {CSG} new 3D solid\n *\n *\n * @example\n * let sphere = CSG.sphere({\n *   center: [0, 0, 0],\n *   radius: 2,\n *   resolution: 32,\n * });\n */\nconst sphere = function (options) {\n  options = options || {};\n  let center = parseOptionAs3DVector(options, 'center', [0, 0, 0]);\n  let radius = parseOptionAsFloat(options, 'radius', 1);\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution3D);\n  let xvector, yvector, zvector;\n  if ('axes' in options) {\n    xvector = options.axes[0].unit().times(radius);\n    yvector = options.axes[1].unit().times(radius);\n    zvector = options.axes[2].unit().times(radius);\n  } else {\n    xvector = new Vector3([1, 0, 0]).times(radius);\n    yvector = new Vector3([0, -1, 0]).times(radius);\n    zvector = new Vector3([0, 0, 1]).times(radius);\n  }\n  if (resolution < 4) resolution = 4;\n  let qresolution = Math.round(resolution / 4);\n  let prevcylinderpoint;\n  let polygons = [];\n  for (let slice1 = 0; slice1 <= resolution; slice1++) {\n    let angle = Math.PI * 2.0 * slice1 / resolution;\n    let cylinderpoint = xvector.times(Math.cos(angle)).plus(yvector.times(Math.sin(angle)));\n    if (slice1 > 0) {\n      // cylinder vertices:\n      let vertices = [];\n      let prevcospitch, prevsinpitch;\n      for (let slice2 = 0; slice2 <= qresolution; slice2++) {\n        let pitch = 0.5 * Math.PI * slice2 / qresolution;\n        let cospitch = Math.cos(pitch);\n        let sinpitch = Math.sin(pitch);\n        if (slice2 > 0) {\n          vertices = [];\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))));\n          vertices.push(new Vertex3(center.plus(cylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))));\n          if (slice2 < qresolution) {\n            vertices.push(new Vertex3(center.plus(cylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))));\n          }\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))));\n          polygons.push(new Polygon3(vertices));\n          vertices = [];\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))));\n          vertices.push(new Vertex3(center.plus(cylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))));\n          if (slice2 < qresolution) {\n            vertices.push(new Vertex3(center.plus(cylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))));\n          }\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))));\n          vertices.reverse();\n          polygons.push(new Polygon3(vertices));\n        }\n        prevcospitch = cospitch;\n        prevsinpitch = sinpitch;\n      }\n    }\n    prevcylinderpoint = cylinderpoint;\n  }\n  let result = fromPolygons(polygons);\n  result.properties.sphere = new Properties();\n  result.properties.sphere.center = new Vector3(center);\n  result.properties.sphere.facepoint = center.plus(xvector);\n  return result;\n};\n\n/** Construct a solid cylinder.\n * @param {Object} [options] - options for construction\n * @param {Vector} [options.start=[0,-1,0]] - start point of cylinder\n * @param {Vector} [options.end=[0,1,0]] - end point of cylinder\n * @param {Number} [options.radius=1] - radius of cylinder, must be scalar\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\n * @returns {CSG} new 3D solid\n *\n * @example\n * let cylinder = CSG.cylinder({\n *   start: [0, -10, 0],\n *   end: [0, 10, 0],\n *   radius: 10,\n *   resolution: 16\n * });\n */\nconst cylinder = function (options) {\n  let s = parseOptionAs3DVector(options, 'start', [0, -1, 0]);\n  let e = parseOptionAs3DVector(options, 'end', [0, 1, 0]);\n  let r = parseOptionAsFloat(options, 'radius', 1);\n  let rEnd = parseOptionAsFloat(options, 'radiusEnd', r);\n  let rStart = parseOptionAsFloat(options, 'radiusStart', r);\n  let alpha = parseOptionAsFloat(options, 'sectorAngle', 360);\n  alpha = alpha > 360 ? alpha % 360 : alpha;\n\n  if ((rEnd < 0) || (rStart < 0)) {\n    throw new Error('Radius should be non-negative');\n  }\n  if ((rEnd === 0) && (rStart === 0)) {\n    throw new Error('Either radiusStart or radiusEnd should be positive');\n  }\n\n  let slices = parseOptionAsInt(options, 'resolution', defaultResolution2D); // FIXME is this 3D?\n  let ray = e.minus(s);\n  let axisZ = ray.unit(); //, isY = (Math.abs(axisZ.y) > 0.5);\n  let axisX = axisZ.randomNonParallelVector().unit();\n\n  //  let axisX = new Vector3(isY, !isY, 0).cross(axisZ).unit();\n  let axisY = axisX.cross(axisZ).unit();\n  let start = new Vertex3(s);\n  let end = new Vertex3(e);\n  let polygons = [];\n\n  function point(stack, slice, radius) {\n    let angle = slice * Math.PI * alpha / 180;\n    let out = axisX.times(Math.cos(angle)).plus(axisY.times(Math.sin(angle)));\n    let pos = s.plus(ray.times(stack)).plus(out.times(radius));\n    return new Vertex3(pos);\n  }\n\n  if (alpha > 0) {\n    for (let i = 0; i < slices; i++) {\n      let t0 = i / slices;\n      let t1 = (i + 1) / slices;\n      if (rEnd === rStart) {\n        polygons.push(new Polygon3([start, point(0, t0, rEnd), point(0, t1, rEnd)]));\n        polygons.push(new Polygon3([point(0, t1, rEnd), point(0, t0, rEnd), point(1, t0, rEnd), point(1, t1, rEnd)]));\n        polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]));\n      } else {\n        if (rStart > 0) {\n          polygons.push(new Polygon3([start, point(0, t0, rStart), point(0, t1, rStart)]));\n          polygons.push(new Polygon3([point(0, t0, rStart), point(1, t0, rEnd), point(0, t1, rStart)]));\n        }\n        if (rEnd > 0) {\n          polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]));\n          polygons.push(new Polygon3([point(1, t0, rEnd), point(1, t1, rEnd), point(0, t1, rStart)]));\n        }\n      }\n    }\n    if (alpha < 360) {\n      polygons.push(new Polygon3([start, end, point(0, 0, rStart)]));\n      polygons.push(new Polygon3([point(0, 0, rStart), end, point(1, 0, rEnd)]));\n      polygons.push(new Polygon3([start, point(0, 1, rStart), end]));\n      polygons.push(new Polygon3([point(0, 1, rStart), point(1, 1, rEnd), end]));\n    }\n  }\n  let result = fromPolygons(polygons);\n  result.properties.cylinder = new Properties();\n  result.properties.cylinder.start = new Connector(s, axisZ.negated(), axisX);\n  result.properties.cylinder.end = new Connector(e, axisZ, axisX);\n  let cylCenter = s.plus(ray.times(0.5));\n  let fptVec = axisX.rotate(s, axisZ, -alpha / 2).times((rStart + rEnd) / 2);\n  let fptVec90 = fptVec.cross(axisZ);\n  // note this one is NOT a face normal for a cone. - It's horizontal from cyl perspective\n  result.properties.cylinder.facepointH = new Connector(cylCenter.plus(fptVec), fptVec, axisZ);\n  result.properties.cylinder.facepointH90 = new Connector(cylCenter.plus(fptVec90), fptVec90, axisZ);\n  return result;\n};\n\n/** Construct a cylinder with rounded ends.\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.start=[0,-1,0]] - start point of cylinder\n * @param {Vector3} [options.end=[0,1,0]] - end point of cylinder\n * @param {Number} [options.radius=1] - radius of rounded ends, must be scalar\n * @param {Vector3} [options.normal] - vector determining the starting angle for tesselation. Should be non-parallel to start.minus(end)\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\n * @returns {CSG} new 3D solid\n *\n * @example\n * let cylinder = CSG.roundedCylinder({\n *   start: [0, -10, 0],\n *   end: [0, 10, 0],\n *   radius: 2,\n *   resolution: 16\n * });\n */\nconst roundedCylinder = function (options) {\n  let p1 = parseOptionAs3DVector(options, 'start', [0, -1, 0]);\n  let p2 = parseOptionAs3DVector(options, 'end', [0, 1, 0]);\n  let radius = parseOptionAsFloat(options, 'radius', 1);\n  let direction = p2.minus(p1);\n  let defaultnormal;\n  if (Math.abs(direction.x) > Math.abs(direction.y)) {\n    defaultnormal = new Vector3(0, 1, 0);\n  } else {\n    defaultnormal = new Vector3(1, 0, 0);\n  }\n  let normal = parseOptionAs3DVector(options, 'normal', defaultnormal);\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution3D);\n  if (resolution < 4) resolution = 4;\n  let polygons = [];\n  let qresolution = Math.floor(0.25 * resolution);\n  let length = direction.length();\n  if (length < EPS) {\n    return sphere({\n      center: p1,\n      radius: radius,\n      resolution: resolution\n    });\n  }\n  let zvector = direction.unit().times(radius);\n  let xvector = zvector.cross(normal).unit().times(radius);\n  let yvector = xvector.cross(zvector).unit().times(radius);\n  let prevcylinderpoint;\n  for (let slice1 = 0; slice1 <= resolution; slice1++) {\n    let angle = Math.PI * 2.0 * slice1 / resolution;\n    let cylinderpoint = xvector.times(Math.cos(angle)).plus(yvector.times(Math.sin(angle)));\n    if (slice1 > 0) {\n      // cylinder vertices:\n      let vertices = [];\n      vertices.push(new Vertex3(p1.plus(cylinderpoint)));\n      vertices.push(new Vertex3(p1.plus(prevcylinderpoint)));\n      vertices.push(new Vertex3(p2.plus(prevcylinderpoint)));\n      vertices.push(new Vertex3(p2.plus(cylinderpoint)));\n      polygons.push(new Polygon3(vertices));\n      let prevcospitch, prevsinpitch;\n      for (let slice2 = 0; slice2 <= qresolution; slice2++) {\n        let pitch = 0.5 * Math.PI * slice2 / qresolution;\n        // let pitch = Math.asin(slice2/qresolution);\n        let cospitch = Math.cos(pitch);\n        let sinpitch = Math.sin(pitch);\n        if (slice2 > 0) {\n          vertices = [];\n          vertices.push(new Vertex3(p1.plus(prevcylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))));\n          vertices.push(new Vertex3(p1.plus(cylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))));\n          if (slice2 < qresolution) {\n            vertices.push(new Vertex3(p1.plus(cylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))));\n          }\n          vertices.push(new Vertex3(p1.plus(prevcylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))));\n          polygons.push(new Polygon3(vertices));\n          vertices = [];\n          vertices.push(new Vertex3(p2.plus(prevcylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))));\n          vertices.push(new Vertex3(p2.plus(cylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))));\n          if (slice2 < qresolution) {\n            vertices.push(new Vertex3(p2.plus(cylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))));\n          }\n          vertices.push(new Vertex3(p2.plus(prevcylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))));\n          vertices.reverse();\n          polygons.push(new Polygon3(vertices));\n        }\n        prevcospitch = cospitch;\n        prevsinpitch = sinpitch;\n      }\n    }\n    prevcylinderpoint = cylinderpoint;\n  }\n  let result = fromPolygons(polygons);\n  let ray = zvector.unit();\n  let axisX = xvector.unit();\n  result.properties.roundedCylinder = new Properties();\n  result.properties.roundedCylinder.start = new Connector(p1, ray.negated(), axisX);\n  result.properties.roundedCylinder.end = new Connector(p2, ray, axisX);\n  result.properties.roundedCylinder.facepoint = p1.plus(xvector);\n  return result;\n};\n\n/** Construct an elliptic cylinder.\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.start=[0,-1,0]] - start point of cylinder\n * @param {Vector3} [options.end=[0,1,0]] - end point of cylinder\n * @param {Vector2D} [options.radius=[1,1]] - radius of rounded ends, must be two dimensional array\n * @param {Vector2D} [options.radiusStart=[1,1]] - OPTIONAL radius of rounded start, must be two dimensional array\n * @param {Vector2D} [options.radiusEnd=[1,1]] - OPTIONAL radius of rounded end, must be two dimensional array\n * @param {Number} [options.resolution=defaultResolution2D] - number of polygons per 360 degree revolution\n * @returns {CSG} new 3D solid\n *\n * @example\n *     let cylinder = CSG.cylinderElliptic({\n *       start: [0, -10, 0],\n *       end: [0, 10, 0],\n *       radiusStart: [10,5],\n *       radiusEnd: [8,3],\n *       resolution: 16\n *     });\n */\n\nconst cylinderElliptic = function (options) {\n  let s = parseOptionAs3DVector(options, 'start', [0, -1, 0]);\n  let e = parseOptionAs3DVector(options, 'end', [0, 1, 0]);\n  let r = parseOptionAs2DVector(options, 'radius', [1, 1]);\n  let rEnd = parseOptionAs2DVector(options, 'radiusEnd', r);\n  let rStart = parseOptionAs2DVector(options, 'radiusStart', r);\n\n  if ((rEnd._x < 0) || (rStart._x < 0) || (rEnd._y < 0) || (rStart._y < 0)) {\n    throw new Error('Radius should be non-negative');\n  }\n  if ((rEnd._x === 0 || rEnd._y === 0) && (rStart._x === 0 || rStart._y === 0)) {\n    throw new Error('Either radiusStart or radiusEnd should be positive');\n  }\n\n  let slices = parseOptionAsInt(options, 'resolution', defaultResolution2D); // FIXME is this correct?\n  let ray = e.minus(s);\n  let axisZ = ray.unit(); //, isY = (Math.abs(axisZ.y) > 0.5);\n  let axisX = axisZ.randomNonParallelVector().unit();\n\n  //  let axisX = new Vector3(isY, !isY, 0).cross(axisZ).unit();\n  let axisY = axisX.cross(axisZ).unit();\n  let start = new Vertex3(s);\n  let end = new Vertex3(e);\n  let polygons = [];\n\n  function point(stack, slice, radius) {\n    let angle = slice * Math.PI * 2;\n    let out = axisX.times(radius._x * Math.cos(angle)).plus(axisY.times(radius._y * Math.sin(angle)));\n    let pos = s.plus(ray.times(stack)).plus(out);\n    return new Vertex3(pos);\n  }\n\n  for (let i = 0; i < slices; i++) {\n    let t0 = i / slices;\n    let t1 = (i + 1) / slices;\n\n    if (rEnd._x === rStart._x && rEnd._y === rStart._y) {\n      polygons.push(new Polygon3([start, point(0, t0, rEnd), point(0, t1, rEnd)]));\n      polygons.push(new Polygon3([point(0, t1, rEnd), point(0, t0, rEnd), point(1, t0, rEnd), point(1, t1, rEnd)]));\n      polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]));\n    } else {\n      if (rStart._x > 0) {\n        polygons.push(new Polygon3([start, point(0, t0, rStart), point(0, t1, rStart)]));\n        polygons.push(new Polygon3([point(0, t0, rStart), point(1, t0, rEnd), point(0, t1, rStart)]));\n      }\n      if (rEnd._x > 0) {\n        polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]));\n        polygons.push(new Polygon3([point(1, t0, rEnd), point(1, t1, rEnd), point(0, t1, rStart)]));\n      }\n    }\n  }\n  let result = fromPolygons(polygons);\n  result.properties.cylinder = new Properties();\n  result.properties.cylinder.start = new Connector(s, axisZ.negated(), axisX);\n  result.properties.cylinder.end = new Connector(e, axisZ, axisX);\n  result.properties.cylinder.facepoint = s.plus(axisX.times(rStart));\n  return result;\n};\n\n/** Construct an axis-aligned solid rounded cuboid.\n * @param {Object} [options] - options for construction\n * @param {Vector3} [options.center=[0,0,0]] - center of rounded cube\n * @param {Vector3} [options.radius=[1,1,1]] - radius of rounded cube, single scalar is possible\n * @param {Number} [options.roundradius=0.2] - radius of rounded edges\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\n * @returns {CSG} new 3D solid\n *\n * @example\n * let cube = CSG.roundedCube({\n *   center: [2, 0, 2],\n *   radius: 15,\n *   roundradius: 2,\n *   resolution: 36,\n * });\n */\nconst roundedCube = function (options) {\n  let minRR = 1e-2; // minroundradius 1e-3 gives rounding errors already\n  let center;\n  let cuberadius;\n  let corner1;\n  let corner2;\n  options = options || {};\n  if (('corner1' in options) || ('corner2' in options)) {\n    if (('center' in options) || ('radius' in options)) {\n      throw new Error('roundedCube: should either give a radius and center parameter, or a corner1 and corner2 parameter');\n    }\n    corner1 = parseOptionAs3DVector(options, 'corner1', [0, 0, 0]);\n    corner2 = parseOptionAs3DVector(options, 'corner2', [1, 1, 1]);\n    center = corner1.plus(corner2).times(0.5);\n    cuberadius = corner2.minus(corner1).times(0.5);\n  } else {\n    center = parseOptionAs3DVector(options, 'center', [0, 0, 0]);\n    cuberadius = parseOptionAs3DVector(options, 'radius', [1, 1, 1]);\n  }\n  cuberadius = cuberadius.abs(); // negative radii make no sense\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution3D);\n  if (resolution < 4) resolution = 4;\n  if (resolution % 2 === 1 && resolution < 8) resolution = 8; // avoid ugly\n  let roundradius = parseOptionAs3DVector(options, 'roundradius', [0.2, 0.2, 0.2]);\n  // slight hack for now - total radius stays ok\n  roundradius = Vector3.Create(Math.max(roundradius.x, minRR), Math.max(roundradius.y, minRR), Math.max(roundradius.z, minRR));\n  let innerradius = cuberadius.minus(roundradius);\n  if (innerradius.x < 0 || innerradius.y < 0 || innerradius.z < 0) {\n    throw new Error('roundradius <= radius!');\n  }\n  let res = sphere({radius: 1, resolution: resolution});\n  res = res.scale(roundradius);\n  innerradius.x > EPS && (res = res.stretchAtPlane([1, 0, 0], [0, 0, 0], 2 * innerradius.x));\n  innerradius.y > EPS && (res = res.stretchAtPlane([0, 1, 0], [0, 0, 0], 2 * innerradius.y));\n  innerradius.z > EPS && (res = res.stretchAtPlane([0, 0, 1], [0, 0, 0], 2 * innerradius.z));\n  res = res.translate([-innerradius.x + center.x, -innerradius.y + center.y, -innerradius.z + center.z]);\n  res = res.reTesselated();\n  res.properties.roundedCube = new Properties();\n  res.properties.roundedCube.center = new Vertex3(center);\n  res.properties.roundedCube.facecenters = [\n    new Connector(new Vector3([cuberadius.x, 0, 0]).plus(center), [1, 0, 0], [0, 0, 1]),\n    new Connector(new Vector3([-cuberadius.x, 0, 0]).plus(center), [-1, 0, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, cuberadius.y, 0]).plus(center), [0, 1, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, -cuberadius.y, 0]).plus(center), [0, -1, 0], [0, 0, 1]),\n    new Connector(new Vector3([0, 0, cuberadius.z]).plus(center), [0, 0, 1], [1, 0, 0]),\n    new Connector(new Vector3([0, 0, -cuberadius.z]).plus(center), [0, 0, -1], [1, 0, 0])\n  ];\n  return res;\n};\n\n/** Create a polyhedron using Openscad style arguments.\n * Define face vertices clockwise looking from outside.\n * @param {Object} [options] - options for construction\n * @returns {CSG} new 3D solid\n */\nconst polyhedron = function (options) {\n  options = options || {};\n  if (('points' in options) !== ('faces' in options)) {\n    throw new Error(\"polyhedron needs 'points' and 'faces' arrays\");\n  }\n  let vertices = parseOptionAs3DVectorList(options, 'points', [\n    [1, 1, 0],\n    [1, -1, 0],\n    [-1, -1, 0],\n    [-1, 1, 0],\n    [0, 0, 1]\n  ])\n    .map(function (pt) {\n      return new Vertex3(pt);\n    });\n  let faces = parseOption(options, 'faces', [\n    [0, 1, 4],\n    [1, 2, 4],\n    [2, 3, 4],\n    [3, 0, 4],\n    [1, 0, 3],\n    [2, 1, 3]\n  ]);\n  // Openscad convention defines inward normals - so we have to invert here\n  faces.forEach(function (face) {\n    face.reverse();\n  });\n  let polygons = faces.map(function (face) {\n    return new Polygon3(face.map(function (idx) {\n      return vertices[idx];\n    }));\n  });\n\n  // TODO: facecenters as connectors? probably overkill. Maybe centroid\n  // the re-tesselation here happens because it's so easy for a user to\n  // create parametrized polyhedrons that end up with 1-2 dimensional polygons.\n  // These will create infinite loops at CSG.Tree()\n  return fromPolygons(polygons).reTesselated();\n};\n\nmodule.exports = {\n  cube,\n  sphere,\n  roundedCube,\n  cylinder,\n  roundedCylinder,\n  cylinderElliptic,\n  polyhedron\n};\n","const {CAG} = require('../csg');// we have to import from top level otherwise prototypes are not complete..\n\n/** Construct a circle\n * @param {Object} [options] - options for construction\n * @param {Float} [options.r=1] - radius of the circle\n * @param {Integer} [options.fn=32] - segments of circle (ie quality/ resolution)\n * @param {Boolean} [options.center=true] - wether to center the circle or not\n * @returns {CAG} new circle\n *\n * @example\n * let circle1 = circle({\n *   r: 10\n * })\n */\nexport function circle(params: any) {\n  const defaults = {\n    r: 1,\n    fn: 32,\n    center: false\n  };\n\n  // tslint:disable-next-line:prefer-const\n  let {r, fn, center} = Object.assign({}, defaults, params);\n  if (params && !params.r && !params.fn && !params.center) r = params;\n  const offset = center === true ? [0, 0] : [r, r];\n\n  return CAG.circle({center: offset, radius: r, resolution: fn});\n}\n","const {CAG} = require('../csg');// we have to import from top level otherwise prototypes are not complete..\nconst {fromPoints} = require('../core/CAGFactories');\n\n/** Construct a polygon either from arrays of paths and points,\n * or just arrays of points nested paths (multiple paths) and flat paths are supported\n * @param {Object} [options] - options for construction or either flat or nested array of points\n * @param {Array} [options.points] - points of the polygon : either flat or nested array of points\n * @param {Array} [options.paths] - paths of the polygon : either flat or nested array of points index\n * @returns {CAG} new polygon\n *\n * @example\n * let roof = [[10,11], [0,11], [5,20]]\n * let wall = [[0,0], [10,0], [10,10], [0,10]]\n *\n * let poly = polygon(roof)\n * or\n * let poly = polygon([roof, wall])\n * or\n * let poly = polygon({ points: roof })\n * or\n * let poly = polygon({ points: [roof, wall] })\n * or\n * let poly = polygon({ points: roof, path: [0, 1, 2] })\n * or\n * let poly = polygon({ points: [roof, wall], path: [[0, 1, 2], [3, 4, 5, 6]] })\n * or\n * let poly = polygon({ points: roof.concat(wall), paths: [[0, 1, 2], [3, 4, 5], [3, 6, 5]] })\n */\nexport function polygon(params: any) { // array of po(ints) and pa(ths)\n  let points: any[] = [];\n  if (params.paths && params.paths.length && params.paths[0].length) { // pa(th): [[0,1,2],[2,3,1]] (two paths)\n    if (typeof params.points[0][0] !== 'number') { // flatten points array\n      params.points = params.points.reduce((a: any, b: any) => a.concat(b));\n    }\n    params.paths.forEach((path: any, i: number) => {\n      points.push([]);\n      path.forEach((j: any) => points[i].push(params.points[j]));\n    });\n  } else if (params.paths && params.paths.length) { // pa(th): [0,1,2,3,4] (single path)\n    params.paths.forEach((i: any) => points.push(params.points[i]));\n  } else { // pa(th) = po(ints)\n    if (params.length) {\n      points = params;\n    } else {\n      points = params.points;\n    }\n  }\n  return fromPoints(points);\n}\n","const {CAG} = require('../csg');// we have to import from top level otherwise prototypes are not complete..\nconst {fromPoints} = require('../core/CAGFactories');\n\n// FIXME: errr this is kinda just a special case of a polygon , why do we need it ?\n/** Construct a triangle\n * @returns {CAG} new triangle\n *\n * @example\n * let triangle = trangle({\n *   length: 10\n * })\n */\nexport function triangle() {\n  let a = arguments;\n  if (a[0] && a[0].length) a = a[0];\n  return fromPoints(a);\n}\n","const {CSG} = require('../csg');\nconst {translate} = require('../modifiers/transforms');\n\n/** Construct a cuboid\n * @param {Object} [options] - options for construction\n * @param {Float} [options.size=1] - size of the side of the cuboid : can be either:\n * - a scalar : ie a single float, in which case all dimensions will be the same\n * - or an array: to specify different dimensions along x/y/z\n * @param {Integer} [options.fn=32] - segments of the sphere (ie quality/resolution)\n * @param {Integer} [options.fno=32] - segments of extrusion (ie quality)\n * @param {String} [options.type='normal'] - type of sphere : either 'normal' or 'geodesic'\n * @returns {CSG} new sphere\n *\n * @example\n * let cube1 = cube({\n *   r: 10,\n *   fn: 20\n * })\n */\nexport function cube(params: any) {\n  const defaults = {\n    size: 1,\n    offset: [0, 0, 0],\n    round: false,\n    radius: 0,\n    fn: 8,\n  };\n\n  // tslint:disable-next-line:prefer-const\n  let {round, radius, fn, size} = Object.assign({}, defaults, params);\n  let offset = [0, 0, 0];\n  let v = null;\n  if (params && params.length) v = params;\n  if (params && params.size && params.size.length) v = params.size; // { size: [1,2,3] }\n  if (params && params.size && !params.size.length) size = params.size; // { size: 1 }\n  if (params && (typeof params !== 'object')) size = params;// (2)\n  if (params && params.round === true) {\n    round = true;\n    radius = v && v.length ? (v[0] + v[1] + v[2]) / 30 : size / 10;\n  }\n  if (params && params.radius) {\n    round = true;\n    radius = params.radius;\n  }\n\n  let x = size;\n  let y = size;\n  let z = size;\n  if (v && v.length) {\n    [x, y, z] = v;\n  }\n  offset = [x / 2, y / 2, z / 2]; // center: false default\n  const object = round\n    ? CSG.roundedCube({radius: [x / 2, y / 2, z / 2], roundradius: radius, resolution: fn})\n    : CSG.cube({radius: [x / 2, y / 2, z / 2]});\n  if (params && params.center && params.center.length) {\n    offset = [params.center[0] ? 0 : x / 2, params.center[1] ? 0 : y / 2, params.center[2] ? 0 : z / 2];\n  } else if (params && params.center === true) {\n    offset = [0, 0, 0];\n  } else if (params && params.center === false) {\n    offset = [x / 2, y / 2, z / 2];\n  }\n  return (offset[0] || offset[1] || offset[2]) ? translate(offset, object) : object;\n}\n","/** translate an object in 2D/3D space\n * @param {Object} vector - 3D vector to translate the given object(s) by\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to translate\n * @returns {CSG} new CSG object , translated by the given amount\n *\n * @example\n * let movedSphere = translate([10,2,0], sphere())\n */\nexport function translate(vector: any, ...objects: any[]) {      // v, obj or array\n  // workaround needed to determine if we are dealing with an array of objects\n  const _objects = (objects.length >= 1 && objects[0].length) ? objects[0] : objects;\n  let object = _objects[0];\n\n  if (_objects.length > 1) {\n    for (let i = 1; i < _objects.length; i++) { // FIXME/ why is union really needed ??\n      object = object.union(_objects[i]);\n    }\n  }\n  return object.translate(vector);\n}\n","/** scale an object in 2D/3D space\n * @param {Float|Array} scaleValue - either an array or simple number to scale object(s) by\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to scale\n * @returns {CSG} new CSG object , scaled by the given amount\n *\n * @example\n * let scaledSphere = scale([0.2,15,1], sphere())\n */\nexport function scale(scaleValue: any, ...objects: any[]) {         // v, obj or array\n  const _objects = (objects.length >= 1 && objects[0].length) ? objects[0] : objects;\n  let object = _objects[0];\n\n  if (_objects.length > 1) {\n    for (let i = 1; i < _objects.length; i++) { // FIXME/ why is union really needed ??\n      object = object.union(_objects[i]);\n    }\n  }\n  return object.scale(scaleValue);\n}\n","/** rotate an object in 2D/3D space\n * @param {Float|Array} rotation - either an array or simple number to rotate object(s) by\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to rotate\n * @returns {CSG} new CSG object , rotated by the given amount\n *\n * @example\n * let rotatedSphere = rotate([0.2,15,1], sphere())\n */\nexport function rotate() {\n  let o;\n  let i;\n  let v;\n  let r = 1;\n  let a = arguments;\n  if (!a[0].length) {        // rotate(r,[x,y,z],o)\n    r = a[0];\n    v = a[1];\n    i = 2;\n    if (a[2].length) {\n      a = a[2];\n      i = 0;\n    }\n  } else {                   // rotate([x,y,z],o)\n    v = a[0];\n    i = 1;\n    if (a[1].length) {\n      a = a[1];\n      i = 0;\n    }\n  }\n  for (o = a[i++]; i < a.length; i++) {\n    o = o.union(a[i]);\n  }\n  if (r !== 1) {\n    return o.rotate([0, 0, 0], v, r);\n  } else {\n    return o.rotateX(v[0]).rotateY(v[1]).rotateZ(v[2]);\n  }\n}\n","const Matrix4 = require('../../core/math/Matrix4');\n\n/** apply the given matrix transform to the given objects\n * @param {Array} matrix - the 4x4 matrix to apply, as a simple 1d array of 16 elements\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to transform\n * @returns {CSG} new CSG object , transformed\n *\n * @example\n * const angle = 45\n * let transformedShape = transform([\n * cos(angle), -sin(angle), 0, 10,\n * sin(angle),  cos(angle), 0, 20,\n * 0         ,           0, 1, 30,\n * 0,           0, 0,  1\n * ], sphere())\n */\nexport function transform(matrix: any, ...objects: any) { // v, obj or array\n  const _objects = (objects.length >= 1 && objects[0].length) ? objects[0] : objects;\n  let object = _objects[0];\n\n  if (_objects.length > 1) {\n    for (let i = 1; i < _objects.length; i++) { // FIXME/ why is union really needed ??\n      object = object.union(_objects[i]);\n    }\n  }\n\n  let transformationMatrix;\n  if (!Array.isArray(matrix)) {\n    throw new Error('Matrix needs to be an array');\n  }\n  matrix.forEach(element => {\n    if (!Number.isFinite(element)) {\n      throw new Error('you can only use a flat array of valid, finite numbers (float and integers)');\n    }\n  });\n  transformationMatrix = new Matrix4(matrix);\n  return object.transform(transformationMatrix);\n}\n","/**\n * Center the given object(s) about the given axes\n * @param {Array|Boolean} axes=[true,true,true]|true  - an array of boolean values that indicate the axes (X,Y,Z) to center upon. A single boolean is also allowed.\n * @param {...Object} object one or more objects to center, i.e. objects are CSG or CAG\n * @returns {CSG} new CSG object , translated by the given amount\n *\n * @example\n * let csg = center([true,false,false], sphere()) // center about the X axis\n */\nexport function center(axes: any, ...objects: any[]) {\n  const _objects = (objects.length >= 1 && objects[0].length) ? objects[0] : objects;\n  let object = _objects[0];\n\n  if (_objects.length > 1) {\n    for (let i = 1; i < _objects.length; i++) { // FIXME/ why is union really needed ??\n      object = object.union(_objects[i]);\n    }\n  }\n  if (!Array.isArray(axes)) {\n    axes = [axes, axes, axes];\n  }\n  return object.center(axes);\n}\n","const Plane = require('../../core/math/Plane');\nconst Vector3 = require('../../core/math/Vector3');\n\n/** mirror an object in 2D/3D space\n * @param {Array} vector - the axes to mirror the object(s) by\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to mirror\n * @returns {CSG} new CSG object , mirrored\n *\n * @example\n * let rotatedSphere = mirror([0.2,15,1], sphere())\n */\nexport function mirror(vector: any, ...objects: any[]) {\n  const _objects = (objects.length >= 1 && objects[0].length) ? objects[0] : objects;\n  let object = _objects[0];\n\n  if (_objects.length > 1) {\n    for (let i = 1; i < _objects.length; i++) { // FIXME/ why is union really needed ??\n      object = object.union(_objects[i]);\n    }\n  }\n  const plane = new Plane(new Vector3(vector[0], vector[1], vector[2]).unit(), 0);\n  return object.mirrored(plane);\n}\n","/** expand an object in 2D/3D space\n * @param {float} radius - the radius to expand by\n * @param {Object} object a CSG/CAG objects to expand\n * @returns {CSG/CAG} new CSG/CAG object , expanded\n *\n * @example\n * let expanededShape = expand([0.2,15,1], sphere())\n */\nexport function expand(radius: number, n: any, object: any) {\n  return object.expand(radius, n);\n}\n","/** contract an object(s) in 2D/3D space\n * @param {float} radius - the radius to contract by\n * @param {Object} object a CSG/CAG objects to contract\n * @returns {CSG/CAG} new CSG/CAG object , contracted\n *\n * @example\n * let contractedShape = contract([0.2,15,1], sphere())\n */\nexport function contract(radius: number, n: any, object: any) {\n  return object.contract(radius, n);\n}\n","/** create a minkowski sum of the given shapes\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to create a hull around\n * @returns {CSG} new CSG object , mirrored\n *\n * @example\n * let hulled = hull(rect(), circle())\n */\nexport function minkowski() {\n  // tslint:disable-next-line:no-console\n  console.log('minkowski() not yet implemented');\n}\n","import {ConvexHullPoint} from './ConvexHullPoint';\n\n/**\n * Convex Hull\n * from http://www.psychedelicdevelopment.com/grahamscan/\n * see also at https://github.com/bkiers/GrahamScan/blob/master/src/main/cg/GrahamScan.java\n */\nexport class ConvexHull {\n  points: any[] = null!;\n  indices: number[] = null!;\n\n  getIndices() {\n    return this.indices;\n  };\n\n  clear() {\n    this.indices = null!;\n    this.points = null!;\n  }\n\n  ccw(p1: number, p2: number, p3: number) {\n    const ccw = (this.points[p2].x - this.points[p1].x) * (this.points[p3].y - this.points[p1].y) -\n      (this.points[p2].y - this.points[p1].y) * (this.points[p3].x - this.points[p1].x);\n    // we need this, otherwise sorting never ends, see https://github.com/Spiritdude/OpenJSCAD.org/issues/18\n    if (ccw < 1e-5) {\n      return 0;\n    }\n    return ccw;\n  }\n\n  angle(o: number, a: number) {\n    // return Math.atan((this.points[a].y-this.points[o].y) / (this.points[a].x - this.points[o].x));\n    return Math.atan2((this.points[a].y - this.points[o].y), (this.points[a].x - this.points[o].x));\n  }\n\n  distance(a: number, b: number) {\n    return ((this.points[b].x - this.points[a].x) * (this.points[b].x - this.points[a].x) +\n      (this.points[b].y - this.points[a].y) * (this.points[b].y - this.points[a].y));\n  };\n\n  compute(_points: any[]) {\n    this.indices = null!;\n    if (_points.length < 3) {\n      return;\n    }\n    this.points = _points;\n\n    // Find the lowest point\n    let min = 0;\n    for (let i = 1; i < this.points.length; i++) {\n      if (this.points[i].y === this.points[min].y) {\n        if (this.points[i].x < this.points[min].x) {\n          min = i;\n        }\n      } else if (this.points[i].y < this.points[min].y) {\n        min = i;\n      }\n    }\n\n    // Calculate angle and distance from base\n    const al: ConvexHullPoint[] = [];\n    let ang = 0.0;\n    let dist = 0.0;\n    for (let i = 0; i < this.points.length; i++) {\n      if (i === min) {\n        continue;\n      }\n      ang = this.angle(min, i);\n      if (ang < 0) {\n        ang += Math.PI;\n      }\n      dist = this.distance(min, i);\n      al.push(new ConvexHullPoint(i, ang, dist));\n    }\n\n    al.sort((a, b) => {\n      return a.compare(b);\n    });\n\n    // Create stack\n    const stack = new Array(this.points.length + 1);\n    let j = 2;\n    for (let i = 0; i < this.points.length; i++) {\n      if (i === min) {\n        continue;\n      }\n      stack[j] = al[j - 2].index;\n      j++;\n    }\n    stack[0] = stack[this.points.length];\n    stack[1] = min;\n\n    let tmp;\n    let M = 2;\n    for (let i = 3; i <= this.points.length; i++) {\n      while (this.ccw(stack[M - 1], stack[M], stack[i]) <= 0) {\n        M--;\n      }\n      M++;\n      tmp = stack[i];\n      stack[i] = stack[M];\n      stack[M] = tmp;\n    }\n\n    this.indices = new Array(M);\n    for (let i = 0; i < M; i++) {\n      this.indices[i] = stack[i + 1];\n    }\n  };\n}\n","/**\n * Convex Hull Point\n */\nexport class ConvexHullPoint {\n  constructor(public index: number, public angle: number, public distance: number) {\n  }\n\n  compare(p: ConvexHullPoint) {\n    if (this.angle < p.angle) {\n      return -1;\n    } else if (this.angle > p.angle) {\n      return 1;\n    } else {\n      if (this.distance < p.distance) {\n        return -1;\n      } else if (this.distance > p.distance) {\n        return 1;\n      }\n    }\n    return 0;\n  };\n}\n","const {union} = require('../booleans');\nimport {hull} from './hull';\n\n/** create a chain hull of the given shapes\n * Originally \"Whosa whatsis\" suggested \"Chain Hull\" ,\n * as described at https://plus.google.com/u/0/105535247347788377245/posts/aZGXKFX1ACN\n * essentially hull A+B, B+C, C+D and then union those\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to create a chain hull around\n * @returns {CSG} new CSG object ,which a chain hull of the inputs\n *\n * @example\n * let hulled = chain_hull(rect(), circle())\n */\nexport function chain_hull(params: any, objects: any) {\n  /*\n  const defaults = {\n    closed: false\n  }\n  const closed = Object.assign({}, defaults, params) */\n  let a = arguments;\n  let closed = false;\n  let j = 0;\n\n  if (a[j].closed !== undefined) {\n    closed = a[j++].closed;\n  }\n\n  if (a[j].length) {\n    a = a[j];\n  }\n\n  const hulls = [];\n  const hullsAmount = a.length - (closed ? 0 : 1);\n  for (let i = 0; i < hullsAmount; i++) {\n    hulls.push(hull(a[i], a[(i + 1) % a.length]));\n  }\n  return union(hulls);\n}\n","import {geodesicSphere} from './geodesicSphere';\n\nconst {CSG} = require('../csg');\nconst {translate} = require('../modifiers/transforms');\n\n/** Construct a sphere\n * @param {Object} [options] - options for construction\n * @param {Float} [options.r=1] - radius of the sphere\n * @param {Integer} [options.fn=32] - segments of the sphere (ie quality/resolution)\n * @param {Integer} [options.fno=32] - segments of extrusion (ie quality)\n * @param {String} [options.type='normal'] - type of sphere : either 'normal' or 'geodesic'\n * @returns {CSG} new sphere\n *\n * @example\n * let sphere1 = sphere({\n *   r: 10,\n *   fn: 20\n * })\n */\nexport function sphere(params: any) {\n  const defaults = {\n    r: 1,\n    fn: 32,\n    type: 'normal'\n  };\n\n  // tslint:disable-next-line:prefer-const\n  let {r, fn, type} = Object.assign({}, defaults, params);\n  let offset = [0, 0, 0]; // center: false (default)\n  if (params && (typeof params !== 'object')) {\n    r = params;\n  }\n  // let zoffset = 0 // sphere() in openscad has no center:true|false\n\n  const output = type === 'geodesic' ? geodesicSphere(params) : CSG.sphere({radius: r, resolution: fn});\n\n  // preparing individual x,y,z center\n  if (params && params.center && params.center.length) {\n    offset = [params.center[0] ? 0 : r, params.center[1] ? 0 : r, params.center[2] ? 0 : r];\n  } else if (params && params.center === true) {\n    offset = [0, 0, 0];\n  } else if (params && params.center === false) {\n    offset = [r, r, r];\n  }\n  return (offset[0] || offset[1] || offset[2]) ? translate(offset, output) : output;\n}\n","const {CSG} = require('../csg');\nconst {translate} = require('../modifiers/transforms');\n\n/** Construct a cylinder\n * @param {Object} [options] - options for construction\n * @param {Float} [options.r=1] - radius of the cylinder\n * @param {Float} [options.r1=1] - radius of the top of the cylinder\n * @param {Float} [options.r2=1] - radius of the bottom of the cylinder\n * @param {Float} [options.d=1] - diameter of the cylinder\n * @param {Float} [options.d1=1] - diameter of the top of the cylinder\n * @param {Float} [options.d2=1] - diameter of the bottom of the cylinder\n * @param {Integer} [options.fn=32] - number of sides of the cylinder (ie quality/resolution)\n * @returns {CSG} new cylinder\n *\n * @example\n * let cylinder = cylinder({\n *   d: 10,\n *   fn: 20\n * })\n */\nexport function cylinder(params: any) {\n  const defaults = {\n    r: 1,\n    r1: 1,\n    r2: 1,\n    h: 1,\n    fn: 32,\n    round: false\n  };\n\n  // tslint:disable-next-line:prefer-const\n  let {r1, r2, h, fn, round} = Object.assign({}, defaults, params);\n  let offset = [0, 0, 0];\n  let a = arguments;\n  if (params && params.d) {\n    r1 = r2 = params.d / 2;\n  }\n  if (params && params.r) {\n    r1 = params.r;\n    r2 = params.r;\n  }\n  if (params && params.h) {\n    h = params.h;\n  }\n  if (params && (params.r1 || params.r2)) {\n    r1 = params.r1;\n    r2 = params.r2;\n    if (params.h) h = params.h;\n  }\n  if (params && (params.d1 || params.d2)) {\n    r1 = params.d1 / 2;\n    r2 = params.d2 / 2;\n  }\n\n  if (a && a[0] && a[0].length) {\n    a = a[0];\n    r1 = a[0];\n    r2 = a[1];\n    h = a[2];\n    if (a.length === 4) fn = a[3];\n  }\n\n  let object;\n  if (params && (params.start && params.end)) {\n    object = round\n      ? CSG.roundedCylinder({start: params.start, end: params.end, radiusStart: r1, radiusEnd: r2, resolution: fn})\n      : CSG.cylinder({start: params.start, end: params.end, radiusStart: r1, radiusEnd: r2, resolution: fn});\n  } else {\n    object = round\n      ? CSG.roundedCylinder({start: [0, 0, 0], end: [0, 0, h], radiusStart: r1, radiusEnd: r2, resolution: fn})\n      : CSG.cylinder({start: [0, 0, 0], end: [0, 0, h], radiusStart: r1, radiusEnd: r2, resolution: fn});\n    const r = r1 > r2 ? r1 : r2;\n    if (params && params.center && params.center.length) { // preparing individual x,y,z center\n      offset = [params.center[0] ? 0 : r, params.center[1] ? 0 : r, params.center[2] ? -h / 2 : 0];\n    } else if (params && params.center === true) {\n      offset = [0, 0, -h / 2];\n    } else if (params && params.center === false) {\n      offset = [0, 0, 0];\n    }\n    object = (offset[0] || offset[1] || offset[2]) ? translate(offset, object) : object;\n  }\n  return object;\n}\n","const {CSG} = require('../csg');\nconst {circle} = require('./');\nconst {rotate_extrude} = require('../modifiers/extrusions');\nconst {translate, scale} = require('../modifiers/transforms');\nconst Polygon3 = require('../core/math/Polygon3');\nconst Vector3 = require('../core/math/Vector3');\nconst Vertex3 = require('../core/math/Vertex3');\n\n/** Construct a torus\n * @param {Object} [options] - options for construction\n * @param {Float} [options.ri=1] - radius of base circle\n * @param {Float} [options.ro=4] - radius offset\n * @param {Integer} [options.fni=16] - segments of base circle (ie quality)\n * @param {Integer} [options.fno=32] - segments of extrusion (ie quality)\n * @param {Integer} [options.roti=0] - rotation angle of base circle\n * @returns {CSG} new torus\n *\n * @example\n * let torus1 = torus({\n *   ri: 10\n * })\n */\nexport function torus(params: any) {\n  const defaults = {\n    ri: 1,\n    ro: 4,\n    fni: 16,\n    fno: 32,\n    roti: 0\n  };\n  params = Object.assign({}, defaults, params);\n\n  /* possible enhancements ? declarative limits\n  const limits = {\n    fni: {min: 3},\n    fno: {min: 3}\n  } */\n\n  // tslint:disable-next-line:prefer-const\n  let {ri, ro, fni, fno, roti} = params;\n\n  if (fni < 3) fni = 3;\n  if (fno < 3) fno = 3;\n\n  let baseCircle = circle({r: ri, fn: fni, center: true});\n\n  if (roti) baseCircle = baseCircle.rotateZ(roti);\n  const result = rotate_extrude({fn: fno}, translate([ro, 0, 0], baseCircle));\n  // result = result.union(result)\n  return result;\n}\n","export {color} from './color';\nexport {css2rgb} from './css2rgb';\nexport {rgb2hsl} from './rgb2hsl';\nexport {rgb2html} from './rgb2html';\nexport {rgb2hsv} from './rgb2hsv';\nexport {html2rgb} from './html2rgb';\nexport {hsv2rgb} from './hsv2rgb';\nexport {hue2rgb} from './hue2rgb';\nexport {hsl2rgb} from './hsl2rgb';\n","import {css2rgb} from './css2rgb';\n\n// color( (array[r,g,b] | css-string) [,alpha] (,array[objects] | list of objects) )\n\n/** apply the given color to the input object(s)\n * @param {Object} colorValue - either an array or a hex string of color values\n * @param {Object|Array} objects either a single or multiple CSG/CAG objects to color\n * @returns {CSG} new CSG object , with the given color\n *\n * @example\n * let redSphere = color([1,0,0,1], sphere())\n */\nexport const color = (colorValue: string | number[], ...objects: any[]) => {\n  let object;\n  let i = 1;\n  let a = objects;\n\n  // assume first argument is RGB array\n  // but check if first argument is CSS string\n  if (typeof colorValue === 'string') {\n    colorValue = css2rgb(colorValue);\n  }\n\n  // check if second argument is alpha\n  if (Number.isFinite(a[i])) {\n    colorValue = colorValue.concat(a[i]);\n    i++;\n  }\n\n  // check if next argument is an an array\n  if (Array.isArray(a[i])) {\n    a = a[i];\n    i = 0;\n  } // use this as the list of objects\n\n  for (object = a[i++]; i < a.length; i++) {\n    object = object.union(a[i]);\n  }\n\n  return object.setColor(colorValue);\n}\n","export type TCssColorNames = keyof typeof cssColors3ub;\n\n// color table from http://www.w3.org/TR/css3-color/\nexport const cssColors3ub = {\n// basic color keywords\n  'black': [0, 0, 0],\n  'silver': [192, 192, 192],\n  'gray': [128, 128, 128],\n  'white': [255, 255, 255],\n  'maroon': [128, 0, 0],\n  'red': [255, 0, 0],\n  'purple': [128, 0, 128],\n  'fuchsia': [255, 0, 255],\n  'green': [0, 128, 0],\n  'lime': [0, 255, 0],\n  'olive': [128, 128, 0],\n  'yellow': [255, 255, 0],\n  'navy': [0, 0, 128],\n  'blue': [0, 0, 255],\n  'teal': [0, 128, 128],\n  'aqua': [0, 255, 255],\n  // extended color keywords\n  'aliceblue': [240, 248, 255],\n  'antiquewhite': [250, 235, 215],\n  // 'aqua': [ 0, 255, 255 ],\n  'aquamarine': [127, 255, 212],\n  'azure': [240, 255, 255],\n  'beige': [245, 245, 220],\n  'bisque': [255, 228, 196],\n  // 'black': [ 0, 0, 0 ],\n  'blanchedalmond': [255, 235, 205],\n  // 'blue': [ 0, 0, 255 ],\n  'blueviolet': [138, 43, 226],\n  'brown': [165, 42, 42],\n  'burlywood': [222, 184, 135],\n  'cadetblue': [95, 158, 160],\n  'chartreuse': [127, 255, 0],\n  'chocolate': [210, 105, 30],\n  'coral': [255, 127, 80],\n  'cornflowerblue': [100, 149, 237],\n  'cornsilk': [255, 248, 220],\n  'crimson': [220, 20, 60],\n  'cyan': [0, 255, 255],\n  'darkblue': [0, 0, 139],\n  'darkcyan': [0, 139, 139],\n  'darkgoldenrod': [184, 134, 11],\n  'darkgray': [169, 169, 169],\n  'darkgreen': [0, 100, 0],\n  'darkgrey': [169, 169, 169],\n  'darkkhaki': [189, 183, 107],\n  'darkmagenta': [139, 0, 139],\n  'darkolivegreen': [85, 107, 47],\n  'darkorange': [255, 140, 0],\n  'darkorchid': [153, 50, 204],\n  'darkred': [139, 0, 0],\n  'darksalmon': [233, 150, 122],\n  'darkseagreen': [143, 188, 143],\n  'darkslateblue': [72, 61, 139],\n  'darkslategray': [47, 79, 79],\n  'darkslategrey': [47, 79, 79],\n  'darkturquoise': [0, 206, 209],\n  'darkviolet': [148, 0, 211],\n  'deeppink': [255, 20, 147],\n  'deepskyblue': [0, 191, 255],\n  'dimgray': [105, 105, 105],\n  'dimgrey': [105, 105, 105],\n  'dodgerblue': [30, 144, 255],\n  'firebrick': [178, 34, 34],\n  'floralwhite': [255, 250, 240],\n  'forestgreen': [34, 139, 34],\n  // 'fuchsia': [ 255, 0, 255 ],\n  'gainsboro': [220, 220, 220],\n  'ghostwhite': [248, 248, 255],\n  'gold': [255, 215, 0],\n  'goldenrod': [218, 165, 32],\n  // 'gray': [ 128, 128, 128 ],\n  // 'green': [ 0, 128, 0 ],\n  'greenyellow': [173, 255, 47],\n  'grey': [128, 128, 128],\n  'honeydew': [240, 255, 240],\n  'hotpink': [255, 105, 180],\n  'indianred': [205, 92, 92],\n  'indigo': [75, 0, 130],\n  'ivory': [255, 255, 240],\n  'khaki': [240, 230, 140],\n  'lavender': [230, 230, 250],\n  'lavenderblush': [255, 240, 245],\n  'lawngreen': [124, 252, 0],\n  'lemonchiffon': [255, 250, 205],\n  'lightblue': [173, 216, 230],\n  'lightcoral': [240, 128, 128],\n  'lightcyan': [224, 255, 255],\n  'lightgoldenrodyellow': [250, 250, 210],\n  'lightgray': [211, 211, 211],\n  'lightgreen': [144, 238, 144],\n  'lightgrey': [211, 211, 211],\n  'lightpink': [255, 182, 193],\n  'lightsalmon': [255, 160, 122],\n  'lightseagreen': [32, 178, 170],\n  'lightskyblue': [135, 206, 250],\n  'lightslategray': [119, 136, 153],\n  'lightslategrey': [119, 136, 153],\n  'lightsteelblue': [176, 196, 222],\n  'lightyellow': [255, 255, 224],\n  // 'lime': [ 0, 255, 0 ],\n  'limegreen': [50, 205, 50],\n  'linen': [250, 240, 230],\n  'magenta': [255, 0, 255],\n  // 'maroon': [ 128, 0, 0 ],\n  'mediumaquamarine': [102, 205, 170],\n  'mediumblue': [0, 0, 205],\n  'mediumorchid': [186, 85, 211],\n  'mediumpurple': [147, 112, 219],\n  'mediumseagreen': [60, 179, 113],\n  'mediumslateblue': [123, 104, 238],\n  'mediumspringgreen': [0, 250, 154],\n  'mediumturquoise': [72, 209, 204],\n  'mediumvioletred': [199, 21, 133],\n  'midnightblue': [25, 25, 112],\n  'mintcream': [245, 255, 250],\n  'mistyrose': [255, 228, 225],\n  'moccasin': [255, 228, 181],\n  'navajowhite': [255, 222, 173],\n  // 'navy': [ 0, 0, 128 ],\n  'oldlace': [253, 245, 230],\n  // 'olive': [ 128, 128, 0 ],\n  'olivedrab': [107, 142, 35],\n  'orange': [255, 165, 0],\n  'orangered': [255, 69, 0],\n  'orchid': [218, 112, 214],\n  'palegoldenrod': [238, 232, 170],\n  'palegreen': [152, 251, 152],\n  'paleturquoise': [175, 238, 238],\n  'palevioletred': [219, 112, 147],\n  'papayawhip': [255, 239, 213],\n  'peachpuff': [255, 218, 185],\n  'peru': [205, 133, 63],\n  'pink': [255, 192, 203],\n  'plum': [221, 160, 221],\n  'powderblue': [176, 224, 230],\n  // 'purple': [ 128, 0, 128 ],\n  // 'red': [ 255, 0, 0 ],\n  'rosybrown': [188, 143, 143],\n  'royalblue': [65, 105, 225],\n  'saddlebrown': [139, 69, 19],\n  'salmon': [250, 128, 114],\n  'sandybrown': [244, 164, 96],\n  'seagreen': [46, 139, 87],\n  'seashell': [255, 245, 238],\n  'sienna': [160, 82, 45],\n  // 'silver': [ 192, 192, 192 ],\n  'skyblue': [135, 206, 235],\n  'slateblue': [106, 90, 205],\n  'slategray': [112, 128, 144],\n  'slategrey': [112, 128, 144],\n  'snow': [255, 250, 250],\n  'springgreen': [0, 255, 127],\n  'steelblue': [70, 130, 180],\n  'tan': [210, 180, 140],\n  // 'teal': [ 0, 128, 128 ],\n  'thistle': [216, 191, 216],\n  'tomato': [255, 99, 71],\n  'turquoise': [64, 224, 208],\n  'violet': [238, 130, 238],\n  'wheat': [245, 222, 179],\n  // 'white': [ 255, 255, 255 ],\n  'whitesmoke': [245, 245, 245],\n  // 'yellow': [ 255, 255, 0 ],\n  'yellowgreen': [154, 205, 50],\n};\n","// from http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\n/**\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes r, g, and b are contained in the set [0, 1] and\n * returns h, s, and l in the set [0, 1].\n *\n * @param   {number}  r       The red color value\n * @param   {number}  g       The green color value\n * @param   {number}  b       The blue color value\n * @return  Array           The HSL representation\n */\nexport function rgb2hsl(r: number | number[], g: number, b: number) {\n\n  if (Array.isArray(r)) {\n    b = r[2];\n    g = r[1];\n    r = r[0];\n  }\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n  let s;\n  const l = (max + min) / 2;\n\n  if (max === min) {\n    h = s = 0; // achromatic\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [h, s, l];\n}\n","/**\n * Converts RGB color value to HTML5 color value (string)\n * Conversion forumla:\n * - convert R, G, B into HEX strings\n * - return HTML formatted string \"#RRGGBB\"\n */\nexport function rgb2html(r: number | number[], g: number, b: number) {\n  if (Array.isArray(r)) {\n    b = r[2];\n    g = r[1];\n    r = r[0];\n  }\n\n  const s = '#' +\n    Number(0x1000000 + r * 255 * 0x10000 + g * 255 * 0x100 + b * 255).toString(16).substring(1, 7);\n  return s;\n}\n","/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 1] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   {number}  r       The red color value\n * @param   {number}  g       The green color value\n * @param   {number}  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsv(r: number | number[], g: number, b: number) {\n  if (Array.isArray(r)) {\n    b = r[2];\n    g = r[1];\n    r = r[0];\n  }\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n  let s;\n  const v = max;\n\n  const d = max - min;\n  s = max === 0 ? 0 : d / max;\n\n  if (max === min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n","/**\n * Converts a HTML5 color value (string) to RGB values\n * See the color input type of HTML5 forms\n * Conversion formula:\n * - split the string; \"#RRGGBB\" into RGB components\n * - convert the HEX value into RGB values\n */\nexport function html2rgb(s: string) {\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  if (s.length === 7) {\n    r = parseInt('0x' + s.slice(1, 3), 16) / 255;\n    g = parseInt('0x' + s.slice(3, 5), 16) / 255;\n    b = parseInt('0x' + s.slice(5, 7), 16) / 255;\n  }\n  return [r, g, b];\n}\n","/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 1].\n *\n * @param   {number}  h       The hue\n * @param   {number}  s       The saturation\n * @param   {number}  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsv2rgb(h: number | number[], s: number, v: number) {\n  if (Array.isArray(h)) {\n    v = h[2];\n    s = h[1];\n    h = h[0];\n  }\n\n  let r;\n  let g;\n  let b;\n\n  const i = Math.floor(h * 6);\n  const f = h * 6 - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v, g = t, b = p;\n      break;\n    case 1:\n      r = q, g = v, b = p;\n      break;\n    case 2:\n      r = p, g = v, b = t;\n      break;\n    case 3:\n      r = p, g = q, b = v;\n      break;\n    case 4:\n      r = t, g = p, b = v;\n      break;\n    case 5:\n      r = v, g = p, b = q;\n      break;\n  }\n\n  return [r, g, b];\n}\n","import {hue2rgb} from './hue2rgb';\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 1].\n *\n * @param  {Number}  h       The hue\n * @param  {Number}  s       The saturation\n * @param  {Number}  l       The lightness\n * @return  Array           The RGB representation\n */\nexport function hsl2rgb(h: number | number[], s: number, l: number) {\n  if (Array.isArray(h)) {\n    l = h[2];\n    s = h[1];\n    h = h[0];\n  }\n  let r;\n  let g;\n  let b;\n\n  if (s === 0) {\n    r = g = b = l; // achromatic\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [r, g, b];\n}\n","// -- Math functions (360 deg based vs 2pi)\nfunction sin(a) {\n  return Math.sin(a / 360 * Math.PI * 2);\n}\n\nfunction cos(a) {\n  return Math.cos(a / 360 * Math.PI * 2);\n}\n\nfunction asin(a) {\n  return Math.asin(a) / (Math.PI * 2) * 360;\n}\n\nfunction acos(a) {\n  return Math.acos(a) / (Math.PI * 2) * 360;\n}\n\nfunction tan(a) {\n  return Math.tan(a / 360 * Math.PI * 2);\n}\n\nfunction atan(a) {\n  return Math.atan(a) / (Math.PI * 2) * 360;\n}\n\nfunction atan2(a, b) {\n  return Math.atan2(a, b) / (Math.PI * 2) * 360;\n}\n\nfunction ceil(a) {\n  return Math.ceil(a);\n}\n\nfunction floor(a) {\n  return Math.floor(a);\n}\n\nfunction abs(a) {\n  return Math.abs(a);\n}\n\nfunction min(a, b) {\n  return a < b ? a : b;\n}\n\nfunction max(a, b) {\n  return a > b ? a : b;\n}\n\nfunction rands(min, max, vn, seed) {\n  // -- seed is ignored for now, FIX IT (requires reimplementation of random())\n  //    see http://stackoverflow.com/questions/424292/how-to-create-my-own-javascript-random-number-generator-that-i-can-also-set-the\n  var v = new Array(vn);\n  for (var i = 0; i < vn; i++) {\n    v[i] = Math.random() * (max - min) + min;\n  }\n}\n\nfunction log(a) {\n  return Math.log(a);\n}\n\nfunction lookup(ix, v) {\n  var r = 0;\n  for (var i = 0; i < v.length; i++) {\n    var a0 = v[i];\n    if (a0[0] >= ix) {\n      i--;\n      a0 = v[i];\n      var a1 = v[i + 1];\n      var m = 0;\n      if (a0[0] !== a1[0]) {\n        m = abs((ix - a0[0]) / (a1[0] - a0[0]));\n      }\n      // echo(\">>\",i,ix,a0[0],a1[0],\";\",m,a0[1],a1[1])\n      if (m > 0) {\n        r = a0[1] * (1 - m) + a1[1] * m;\n      } else {\n        r = a0[1];\n      }\n      return r;\n    }\n  }\n  return r;\n}\n\nfunction pow(a, b) {\n  return Math.pow(a, b);\n}\n\nfunction sign(a) {\n  return a < 0 ? -1 : (a > 1 ? 1 : 0);\n}\n\nfunction sqrt(a) {\n  return Math.sqrt(a);\n}\n\nfunction round(a) {\n  return floor(a + 0.5);\n}\n\nmodule.exports = {\n  sin,\n  cos,\n  asin,\n  acos,\n  tan,\n  atan,\n  atan2,\n  ceil,\n  floor,\n  abs,\n  min,\n  max,\n  rands,\n  log,\n  lookup,\n  pow,\n  sign,\n  sqrt,\n  round\n};\n","const defaultFont = require('../fonts/single-line/hershey/simplex.js');\n\nconst defaultsVectorParams = {\n  xOffset: 0,\n  yOffset: 0,\n  input: '?',\n  align: 'left',\n  font: defaultFont,\n  height: 14, // == old vector_xxx simplex font height\n  lineSpacing: 2.142857142857143, // == 30/14 == old vector_xxx ratio\n  letterSpacing: 1,\n  extrudeOffset: 0\n};\n\n// vectorsXXX parameters handler\nfunction vectorParams(options, input) {\n  if (!input && typeof options === 'string') {\n    options = {input: options};\n  }\n  options = options || {};\n  let params = Object.assign({}, defaultsVectorParams, options);\n  params.input = input || params.input;\n  return params;\n}\n\n// translate text line\nfunction translateLine(options, line) {\n  const {x, y} = Object.assign({x: 0, y: 0}, options || {});\n  let segments = line.segments;\n  let segment = null;\n  let point = null;\n  for (let i = 0, il = segments.length; i < il; i++) {\n    segment = segments[i];\n    for (let j = 0, jl = segment.length; j < jl; j++) {\n      point = segment[j];\n      segment[j] = [point[0] + x, point[1] + y];\n    }\n  }\n  return line;\n}\n\n/** Represents a character as segments\n * @typedef {Object} VectorCharObject\n * @property {Float} width - character width\n * @property {Float} height - character height (uppercase)\n * @property {Array} segments - character segments [[[x, y], ...], ...]\n */\n\n/** Construct a {@link VectorCharObject} from a ascii character whose code is between 31 and 127,\n * if the character is not supported it is replaced by a question mark.\n * @param {Object|String} [options] - options for construction or ascii character\n * @param {Float} [options.xOffset=0] - x offset\n * @param {Float} [options.yOffset=0] - y offset\n * @param {Float} [options.height=21] - font size (uppercase height)\n * @param {Float} [options.extrudeOffset=0] - width of the extrusion that will be applied (manually) after the creation of the character\n * @param {String} [options.input='?'] - ascii character (ignored/overwrited if provided as seconds parameter)\n * @param {String} [char='?'] - ascii character\n * @returns {VectorCharObject}\n *\n * @example\n * let vectorCharObject = vectorChar()\n * or\n * let vectorCharObject = vectorChar('A')\n * or\n * let vectorCharObject = vectorChar({ xOffset: 57 }, 'C')\n * or\n * let vectorCharObject = vectorChar({ xOffset: 78, input: '!' })\n */\nfunction vectorChar(options, char) {\n  let {\n    xOffset, yOffset, input, font, height, extrudeOffset\n  } = vectorParams(options, char);\n  let code = input.charCodeAt(0);\n  if (!code || !font[code]) {\n    code = 63; // 63 => ?\n  }\n  let glyph = [].concat(font[code]);\n  let ratio = (height - extrudeOffset) / font.height;\n  let extrudeYOffset = (extrudeOffset / 2);\n  let width = glyph.shift() * ratio;\n  let segments = [];\n  let polyline = [];\n  for (let i = 0, il = glyph.length; i < il; i += 2) {\n    gx = ratio * glyph[i] + xOffset;\n    gy = ratio * glyph[i + 1] + yOffset + extrudeYOffset;\n    if (glyph[i] !== undefined) {\n      polyline.push([gx, gy]);\n      continue;\n    }\n    segments.push(polyline);\n    polyline = [];\n    i--;\n  }\n  if (polyline.length) {\n    segments.push(polyline);\n  }\n  return {width, height, segments};\n}\n\n/** Construct an array of character segments from a ascii string whose characters code is between 31 and 127,\n * if one character is not supported it is replaced by a question mark.\n * @param {Object|String} [options] - options for construction or ascii string\n * @param {Float} [options.xOffset=0] - x offset\n * @param {Float} [options.yOffset=0] - y offset\n * @param {Float} [options.height=21] - font size (uppercase height)\n * @param {Float} [options.lineSpacing=1.4] - line spacing expressed as a percentage of font size\n * @param {Float} [options.letterSpacing=1] - extra letter spacing expressed as a percentage of font size\n * @param {String} [options.align='left'] - multi-line text alignement: left, center or right\n * @param {Float} [options.extrudeOffset=0] - width of the extrusion that will be applied (manually) after the creation of the character\n * @param {String} [options.input='?'] - ascii string (ignored/overwrited if provided as seconds parameter)\n * @param {String} [text='?'] - ascii string\n * @returns {Array} characters segments [[[x, y], ...], ...]\n *\n * @example\n * let textSegments = vectorText()\n * or\n * let textSegments = vectorText('OpenJSCAD')\n * or\n * let textSegments = vectorText({ yOffset: -50 }, 'OpenJSCAD')\n * or\n * let textSegments = vectorText({ yOffset: -80, input: 'OpenJSCAD' })\n */\nfunction vectorText(options, text) {\n  let {\n    xOffset, yOffset, input, font, height, align, extrudeOffset, lineSpacing, letterSpacing\n  } = vectorParams(options, text);\n  let [x, y] = [xOffset, yOffset];\n  let [i, il, char, vect, width, diff] = [];\n  let line = {width: 0, segments: []};\n  let lines = [];\n  let output = [];\n  let maxWidth = 0;\n  let lineStart = x;\n  const pushLine = () => {\n    lines.push(line);\n    maxWidth = Math.max(maxWidth, line.width);\n    line = {width: 0, segments: []};\n  };\n  for (i = 0, il = input.length; i < il; i++) {\n    char = input[i];\n    vect = vectorChar({xOffset: x, yOffset: y, font, height, extrudeOffset}, char);\n    if (char === '\\n') {\n      x = lineStart;\n      y -= vect.height * lineSpacing;\n      pushLine();\n      continue;\n    }\n    width = vect.width * letterSpacing;\n    line.width += width;\n    x += width;\n    if (char !== ' ') {\n      line.segments = line.segments.concat(vect.segments);\n    }\n  }\n  if (line.segments.length) {\n    pushLine();\n  }\n  for (i = 0, il = lines.length; i < il; i++) {\n    line = lines[i];\n    if (maxWidth > line.width) {\n      diff = maxWidth - line.width;\n      if (align === 'right') {\n        line = translateLine({x: diff}, line);\n      } else if (align === 'center') {\n        line = translateLine({x: diff / 2}, line);\n      }\n    }\n    output = output.concat(line.segments);\n  }\n  return output;\n}\n\n/** Construct a {@link VectorCharObject} from a ascii character whose code is between 31 and 127,\n * if the character is not supported it is replaced by a question mark.\n * @param {Float} x - x offset\n * @param {Float} y - y offset\n * @param {String} char - ascii character\n * @returns {VectorCharObject}\n * @deprecated >= v2\n\n * @example\n * let vectorCharObject = vector_char(36, 0, 'B')\n */\nfunction vector_char(x, y, char) {\n  return vectorChar({xOffset: x, yOffset: y}, char);\n}\n\n/** Construct an array of character segments from a ascii string whose characters code is between 31 and 127,\n * if one character is not supported it is replaced by a question mark.\n * @param {Float} x - x offset\n * @param {Float} y - y offset\n * @param {String} text - ascii string\n * @returns {Array} characters segments [[[x, y], ...], ...]\n * @deprecated >= v2\n *\n * @example\n * let textSegments = vector_text(0, -20, 'OpenJSCAD')\n */\nfunction vector_text(x, y, text) {\n  return vectorText({xOffset: x, yOffset: y}, text);\n}\n\nmodule.exports = {\n  vector_char,\n  vector_text,\n  vectorChar,\n  vectorText\n};\n","// -- data source from from http://paulbourke.net/dataformats/hershey/\n// -- reduced to save some bytes...\n// { [ascii code]: [width, x, y, ...] } - undefined value as path separator\nmodule.exports = {\n  height: 14,\n  32: [16],\n  33: [10, 5, 21, 5, 7, , 5, 2, 4, 1, 5, 0, 6, 1, 5, 2],\n  34: [16, 4, 21, 4, 14, , 12, 21, 12, 14],\n  35: [21, 11, 25, 4, -7, , 17, 25, 10, -7, , 4, 12, 18, 12, , 3, 6, 17, 6],\n  36: [20, 8, 25, 8, -4, , 12, 25, 12, -4, , 17, 18, 15, 20, 12, 21, 8, 21, 5, 20, 3, 18, 3, 16, 4, 14, 5, 13, 7, 12, 13, 10, 15, 9, 16, 8, 17, 6, 17, 3, 15, 1, 12, 0, 8, 0, 5, 1, 3, 3],\n  37: [24, 21, 21, 3, 0, , 8, 21, 10, 19, 10, 17, 9, 15, 7, 14, 5, 14, 3, 16, 3, 18, 4, 20, 6, 21, 8, 21, 10, 20, 13, 19, 16, 19, 19, 20, 21, 21, , 17, 7, 15, 6, 14, 4, 14, 2, 16, 0, 18, 0, 20, 1, 21, 3, 21, 5, 19, 7, 17, 7],\n  38: [26, 23, 12, 23, 13, 22, 14, 21, 14, 20, 13, 19, 11, 17, 6, 15, 3, 13, 1, 11, 0, 7, 0, 5, 1, 4, 2, 3, 4, 3, 6, 4, 8, 5, 9, 12, 13, 13, 14, 14, 16, 14, 18, 13, 20, 11, 21, 9, 20, 8, 18, 8, 16, 9, 13, 11, 10, 16, 3, 18, 1, 20, 0, 22, 0, 23, 1, 23, 2],\n  39: [10, 5, 19, 4, 20, 5, 21, 6, 20, 6, 18, 5, 16, 4, 15],\n  40: [14, 11, 25, 9, 23, 7, 20, 5, 16, 4, 11, 4, 7, 5, 2, 7, -2, 9, -5, 11, -7],\n  41: [14, 3, 25, 5, 23, 7, 20, 9, 16, 10, 11, 10, 7, 9, 2, 7, -2, 5, -5, 3, -7],\n  42: [16, 8, 21, 8, 9, , 3, 18, 13, 12, , 13, 18, 3, 12],\n  43: [26, 13, 18, 13, 0, , 4, 9, 22, 9],\n  44: [10, 6, 1, 5, 0, 4, 1, 5, 2, 6, 1, 6, -1, 5, -3, 4, -4],\n  45: [26, 4, 9, 22, 9],\n  46: [10, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2],\n  47: [22, 20, 25, 2, -7],\n  48: [20, 9, 21, 6, 20, 4, 17, 3, 12, 3, 9, 4, 4, 6, 1, 9, 0, 11, 0, 14, 1, 16, 4, 17, 9, 17, 12, 16, 17, 14, 20, 11, 21, 9, 21],\n  49: [20, 6, 17, 8, 18, 11, 21, 11, 0],\n  50: [20, 4, 16, 4, 17, 5, 19, 6, 20, 8, 21, 12, 21, 14, 20, 15, 19, 16, 17, 16, 15, 15, 13, 13, 10, 3, 0, 17, 0],\n  51: [20, 5, 21, 16, 21, 10, 13, 13, 13, 15, 12, 16, 11, 17, 8, 17, 6, 16, 3, 14, 1, 11, 0, 8, 0, 5, 1, 4, 2, 3, 4],\n  52: [20, 13, 21, 3, 7, 18, 7, , 13, 21, 13, 0],\n  53: [20, 15, 21, 5, 21, 4, 12, 5, 13, 8, 14, 11, 14, 14, 13, 16, 11, 17, 8, 17, 6, 16, 3, 14, 1, 11, 0, 8, 0, 5, 1, 4, 2, 3, 4],\n  54: [20, 16, 18, 15, 20, 12, 21, 10, 21, 7, 20, 5, 17, 4, 12, 4, 7, 5, 3, 7, 1, 10, 0, 11, 0, 14, 1, 16, 3, 17, 6, 17, 7, 16, 10, 14, 12, 11, 13, 10, 13, 7, 12, 5, 10, 4, 7],\n  55: [20, 17, 21, 7, 0, , 3, 21, 17, 21],\n  56: [20, 8, 21, 5, 20, 4, 18, 4, 16, 5, 14, 7, 13, 11, 12, 14, 11, 16, 9, 17, 7, 17, 4, 16, 2, 15, 1, 12, 0, 8, 0, 5, 1, 4, 2, 3, 4, 3, 7, 4, 9, 6, 11, 9, 12, 13, 13, 15, 14, 16, 16, 16, 18, 15, 20, 12, 21, 8, 21],\n  57: [20, 16, 14, 15, 11, 13, 9, 10, 8, 9, 8, 6, 9, 4, 11, 3, 14, 3, 15, 4, 18, 6, 20, 9, 21, 10, 21, 13, 20, 15, 18, 16, 14, 16, 9, 15, 4, 13, 1, 10, 0, 8, 0, 5, 1, 4, 3],\n  58: [10, 5, 14, 4, 13, 5, 12, 6, 13, 5, 14, , 5, 2, 4, 1, 5, 0, 6, 1, 5, 2],\n  59: [10, 5, 14, 4, 13, 5, 12, 6, 13, 5, 14, , 6, 1, 5, 0, 4, 1, 5, 2, 6, 1, 6, -1, 5, -3, 4, -4],\n  60: [24, 20, 18, 4, 9, 20, 0],\n  61: [26, 4, 12, 22, 12, , 4, 6, 22, 6],\n  62: [24, 4, 18, 20, 9, 4, 0],\n  63: [18, 3, 16, 3, 17, 4, 19, 5, 20, 7, 21, 11, 21, 13, 20, 14, 19, 15, 17, 15, 15, 14, 13, 13, 12, 9, 10, 9, 7, , 9, 2, 8, 1, 9, 0, 10, 1, 9, 2],\n  64: [27, 18, 13, 17, 15, 15, 16, 12, 16, 10, 15, 9, 14, 8, 11, 8, 8, 9, 6, 11, 5, 14, 5, 16, 6, 17, 8, , 12, 16, 10, 14, 9, 11, 9, 8, 10, 6, 11, 5, , 18, 16, 17, 8, 17, 6, 19, 5, 21, 5, 23, 7, 24, 10, 24, 12, 23, 15, 22, 17, 20, 19, 18, 20, 15, 21, 12, 21, 9, 20, 7, 19, 5, 17, 4, 15, 3, 12, 3, 9, 4, 6, 5, 4, 7, 2, 9, 1, 12, 0, 15, 0, 18, 1, 20, 2, 21, 3, , 19, 16, 18, 8, 18, 6, 19, 5],\n  65: [18, 9, 21, 1, 0, , 9, 21, 17, 0, , 4, 7, 14, 7],\n  66: [21, 4, 21, 4, 0, , 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 15, 17, 13, 16, 12, 13, 11, , 4, 11, 13, 11, 16, 10, 17, 9, 18, 7, 18, 4, 17, 2, 16, 1, 13, 0, 4, 0],\n  67: [21, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5],\n  68: [21, 4, 21, 4, 0, , 4, 21, 11, 21, 14, 20, 16, 18, 17, 16, 18, 13, 18, 8, 17, 5, 16, 3, 14, 1, 11, 0, 4, 0],\n  69: [19, 4, 21, 4, 0, , 4, 21, 17, 21, , 4, 11, 12, 11, , 4, 0, 17, 0],\n  70: [18, 4, 21, 4, 0, , 4, 21, 17, 21, , 4, 11, 12, 11],\n  71: [21, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 18, 8, , 13, 8, 18, 8],\n  72: [22, 4, 21, 4, 0, , 18, 21, 18, 0, , 4, 11, 18, 11],\n  73: [8, 4, 21, 4, 0],\n  74: [16, 12, 21, 12, 5, 11, 2, 10, 1, 8, 0, 6, 0, 4, 1, 3, 2, 2, 5, 2, 7],\n  75: [21, 4, 21, 4, 0, , 18, 21, 4, 7, , 9, 12, 18, 0],\n  76: [17, 4, 21, 4, 0, , 4, 0, 16, 0],\n  77: [24, 4, 21, 4, 0, , 4, 21, 12, 0, , 20, 21, 12, 0, , 20, 21, 20, 0],\n  78: [22, 4, 21, 4, 0, , 4, 21, 18, 0, , 18, 21, 18, 0],\n  79: [22, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 19, 8, 19, 13, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21],\n  80: [21, 4, 21, 4, 0, , 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 14, 17, 12, 16, 11, 13, 10, 4, 10],\n  81: [22, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 19, 8, 19, 13, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, , 12, 4, 18, -2],\n  82: [21, 4, 21, 4, 0, , 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 15, 17, 13, 16, 12, 13, 11, 4, 11, , 11, 11, 18, 0],\n  83: [20, 17, 18, 15, 20, 12, 21, 8, 21, 5, 20, 3, 18, 3, 16, 4, 14, 5, 13, 7, 12, 13, 10, 15, 9, 16, 8, 17, 6, 17, 3, 15, 1, 12, 0, 8, 0, 5, 1, 3, 3],\n  84: [16, 8, 21, 8, 0, , 1, 21, 15, 21],\n  85: [22, 4, 21, 4, 6, 5, 3, 7, 1, 10, 0, 12, 0, 15, 1, 17, 3, 18, 6, 18, 21],\n  86: [18, 1, 21, 9, 0, , 17, 21, 9, 0],\n  87: [24, 2, 21, 7, 0, , 12, 21, 7, 0, , 12, 21, 17, 0, , 22, 21, 17, 0],\n  88: [20, 3, 21, 17, 0, , 17, 21, 3, 0],\n  89: [18, 1, 21, 9, 11, 9, 0, , 17, 21, 9, 11],\n  90: [20, 17, 21, 3, 0, , 3, 21, 17, 21, , 3, 0, 17, 0],\n  91: [14, 4, 25, 4, -7, , 5, 25, 5, -7, , 4, 25, 11, 25, , 4, -7, 11, -7],\n  92: [14, 0, 21, 14, -3],\n  93: [14, 9, 25, 9, -7, , 10, 25, 10, -7, , 3, 25, 10, 25, , 3, -7, 10, -7],\n  94: [16, 6, 15, 8, 18, 10, 15, , 3, 12, 8, 17, 13, 12, , 8, 17, 8, 0],\n  95: [16, 0, -2, 16, -2],\n  96: [10, 6, 21, 5, 20, 4, 18, 4, 16, 5, 15, 6, 16, 5, 17],\n  97: [19, 15, 14, 15, 0, , 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  98: [19, 4, 21, 4, 0, , 4, 11, 6, 13, 8, 14, 11, 14, 13, 13, 15, 11, 16, 8, 16, 6, 15, 3, 13, 1, 11, 0, 8, 0, 6, 1, 4, 3],\n  99: [18, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  100: [19, 15, 21, 15, 0, , 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  101: [18, 3, 8, 15, 8, 15, 10, 14, 12, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  102: [12, 10, 21, 8, 21, 6, 20, 5, 17, 5, 0, , 2, 14, 9, 14],\n  103: [19, 15, 14, 15, -2, 14, -5, 13, -6, 11, -7, 8, -7, 6, -6, , 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  104: [19, 4, 21, 4, 0, , 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0],\n  105: [8, 3, 21, 4, 20, 5, 21, 4, 22, 3, 21, , 4, 14, 4, 0],\n  106: [10, 5, 21, 6, 20, 7, 21, 6, 22, 5, 21, , 6, 14, 6, -3, 5, -6, 3, -7, 1, -7],\n  107: [17, 4, 21, 4, 0, , 14, 14, 4, 4, , 8, 8, 15, 0],\n  108: [8, 4, 21, 4, 0],\n  109: [30, 4, 14, 4, 0, , 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0, , 15, 10, 18, 13, 20, 14, 23, 14, 25, 13, 26, 10, 26, 0],\n  110: [19, 4, 14, 4, 0, , 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0],\n  111: [19, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3, 16, 6, 16, 8, 15, 11, 13, 13, 11, 14, 8, 14],\n  112: [19, 4, 14, 4, -7, , 4, 11, 6, 13, 8, 14, 11, 14, 13, 13, 15, 11, 16, 8, 16, 6, 15, 3, 13, 1, 11, 0, 8, 0, 6, 1, 4, 3],\n  113: [19, 15, 14, 15, -7, , 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  114: [13, 4, 14, 4, 0, , 4, 8, 5, 11, 7, 13, 9, 14, 12, 14],\n  115: [17, 14, 11, 13, 13, 10, 14, 7, 14, 4, 13, 3, 11, 4, 9, 6, 8, 11, 7, 13, 6, 14, 4, 14, 3, 13, 1, 10, 0, 7, 0, 4, 1, 3, 3],\n  116: [12, 5, 21, 5, 4, 6, 1, 8, 0, 10, 0, , 2, 14, 9, 14],\n  117: [19, 4, 14, 4, 4, 5, 1, 7, 0, 10, 0, 12, 1, 15, 4, , 15, 14, 15, 0],\n  118: [16, 2, 14, 8, 0, , 14, 14, 8, 0],\n  119: [22, 3, 14, 7, 0, , 11, 14, 7, 0, , 11, 14, 15, 0, , 19, 14, 15, 0],\n  120: [17, 3, 14, 14, 0, , 14, 14, 3, 0],\n  121: [16, 2, 14, 8, 0, , 14, 14, 8, 0, 6, -4, 4, -6, 2, -7, 1, -7],\n  122: [17, 14, 14, 3, 0, , 3, 14, 14, 14, , 3, 0, 14, 0],\n  123: [14, 9, 25, 7, 24, 6, 23, 5, 21, 5, 19, 6, 17, 7, 16, 8, 14, 8, 12, 6, 10, , 7, 24, 6, 22, 6, 20, 7, 18, 8, 17, 9, 15, 9, 13, 8, 11, 4, 9, 8, 7, 9, 5, 9, 3, 8, 1, 7, 0, 6, -2, 6, -4, 7, -6, , 6, 8, 8, 6, 8, 4, 7, 2, 6, 1, 5, -1, 5, -3, 6, -5, 7, -6, 9, -7],\n  124: [8, 4, 25, 4, -7],\n  125: [14, 5, 25, 7, 24, 8, 23, 9, 21, 9, 19, 8, 17, 7, 16, 6, 14, 6, 12, 8, 10, , 7, 24, 8, 22, 8, 20, 7, 18, 6, 17, 5, 15, 5, 13, 6, 11, 10, 9, 6, 7, 5, 5, 5, 3, 6, 1, 7, 0, 8, -2, 8, -4, 7, -6, , 8, 8, 6, 6, 6, 4, 7, 2, 8, 1, 9, -1, 9, -3, 8, -5, 7, -6, 5, -7],\n  126: [24, 3, 6, 3, 8, 4, 11, 6, 12, 8, 12, 10, 11, 14, 8, 16, 7, 18, 7, 20, 8, 21, 10, , 3, 8, 4, 10, 6, 11, 8, 11, 10, 10, 14, 7, 16, 6, 18, 6, 20, 7, 21, 10, 21, 12]\n};\n"],"sourceRoot":""}